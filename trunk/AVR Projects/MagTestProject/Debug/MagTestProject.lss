
MagTestProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010c  00800100  0000264c  000026e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000264c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000049  0080020c  0080020c  000027ec  2**0
                  ALLOC
  3 .stab         000015e4  00000000  00000000  000027ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e81  00000000  00000000  00003dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00004c51  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  00004df1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  00004fe1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  000073ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  00008764  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000993c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  00009afc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  00009def  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a7bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__ctors_end>
       4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
       8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
       c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      10:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      14:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      18:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      1c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      20:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      24:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      28:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      2c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      30:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      34:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      38:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      3c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      40:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      44:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      48:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      4c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      50:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      54:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      58:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      5c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      60:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      64:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <__vector_25>
      68:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__vector_26>
      6c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      70:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      74:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      78:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      7c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      80:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      84:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      88:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      8c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      90:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      94:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      98:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      9c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      a0:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      a4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      a8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 00       	.word	0x003f	; ????
      da:	40 7a       	andi	r20, 0xA0	; 160
      dc:	10 f3       	brcs	.-60     	; 0xa2 <__SREG__+0x63>
      de:	5a 00       	.word	0x005a	; ????
      e0:	a0 72       	andi	r26, 0x20	; 32
      e2:	4e 18       	sub	r4, r14
      e4:	09 00       	.word	0x0009	; ????
      e6:	10 a5       	ldd	r17, Z+40	; 0x28
      e8:	d4 e8       	ldi	r29, 0x84	; 132
      ea:	00 00       	nop
      ec:	e8 76       	andi	r30, 0x68	; 104
      ee:	48 17       	cp	r20, r24
      f0:	00 00       	nop
      f2:	e4 0b       	sbc	r30, r20
      f4:	54 02       	muls	r21, r20
      f6:	00 00       	nop
      f8:	ca 9a       	sbi	0x19, 2	; 25
      fa:	3b 00       	.word	0x003b	; ????
      fc:	00 00       	nop
      fe:	e1 f5       	brne	.+120    	; 0x178 <__SREG__+0x139>
     100:	05 00       	.word	0x0005	; ????
     102:	00 80       	ld	r0, Z
     104:	96 98       	cbi	0x12, 6	; 18
     106:	00 00       	nop
     108:	00 40       	sbci	r16, 0x00	; 0
     10a:	42 0f       	add	r20, r18
     10c:	00 00       	nop
     10e:	00 a0       	ldd	r0, Z+32	; 0x20
     110:	86 01       	movw	r16, r12
     112:	00 00       	nop
     114:	00 10       	cpse	r0, r0
     116:	27 00       	.word	0x0027	; ????
     118:	00 00       	nop
     11a:	00 e8       	ldi	r16, 0x80	; 128
     11c:	03 00       	.word	0x0003	; ????
     11e:	00 00       	nop
     120:	00 64       	ori	r16, 0x40	; 64
     122:	00 00       	nop
     124:	00 00       	nop
     126:	00 0a       	sbc	r0, r16
     128:	00 00       	nop
     12a:	00 00       	nop
     12c:	00 01       	movw	r0, r0
     12e:	00 00       	nop
     130:	00 00       	nop
     132:	00 2c       	mov	r0, r0
     134:	76 d8       	rcall	.-3860   	; 0xfffff222 <__eeprom_end+0xff7ef222>
     136:	88 dc       	rcall	.-1776   	; 0xfffffa48 <__eeprom_end+0xff7efa48>
     138:	67 4f       	sbci	r22, 0xF7	; 247
     13a:	08 23       	and	r16, r24
     13c:	df c1       	rjmp	.+958    	; 0x4fc <hmc5883l_getrawdata+0xd8>
     13e:	df ae       	std	Y+63, r13	; 0x3f
     140:	59 e1       	ldi	r21, 0x19	; 25
     142:	b1 b7       	in	r27, 0x31	; 49
     144:	96 e5       	ldi	r25, 0x56	; 86
     146:	e3 e4       	ldi	r30, 0x43	; 67
     148:	53 c6       	rjmp	.+3238   	; 0xdf0 <uart_getc+0x10>
     14a:	3a e6       	ldi	r19, 0x6A	; 106
     14c:	51 99       	sbic	0x0a, 1	; 10
     14e:	76 96       	adiw	r30, 0x16	; 22
     150:	e8 e6       	ldi	r30, 0x68	; 104
     152:	c2 84       	ldd	r12, Z+10	; 0x0a
     154:	26 eb       	ldi	r18, 0xB6	; 182
     156:	89 8c       	ldd	r8, Y+25	; 0x19
     158:	9b 62       	ori	r25, 0x2B	; 43
     15a:	ed 40       	sbci	r30, 0x0D	; 13
     15c:	7c 6f       	ori	r23, 0xFC	; 252
     15e:	fc ef       	ldi	r31, 0xFC	; 252
     160:	bc 9c       	mul	r11, r12
     162:	9f 40       	sbci	r25, 0x0F	; 15
     164:	f2 ba       	out	0x12, r15	; 18
     166:	a5 6f       	ori	r26, 0xF5	; 245
     168:	a5 f4       	brhc	.+40     	; 0x192 <__SREG__+0x153>
     16a:	90 05       	cpc	r25, r0
     16c:	5a 2a       	or	r5, r26
     16e:	f7 5c       	subi	r31, 0xC7	; 199
     170:	93 6b       	ori	r25, 0xB3	; 179
     172:	6c f9       	.word	0xf96c	; ????
     174:	67 6d       	ori	r22, 0xD7	; 215
     176:	c1 1b       	sub	r28, r17
     178:	fc e0       	ldi	r31, 0x0C	; 12
     17a:	e4 0d       	add	r30, r4
     17c:	47 fe       	sbrs	r4, 7
     17e:	f5 20       	and	r15, r5
     180:	e6 b5       	in	r30, 0x26	; 38
     182:	00 d0       	rcall	.+0      	; 0x184 <__SREG__+0x145>
     184:	ed 90       	ld	r14, X+
     186:	2e 03       	fmul	r18, r22
     188:	00 94       	com	r0
     18a:	35 77       	andi	r19, 0x75	; 117
     18c:	05 00       	.word	0x0005	; ????
     18e:	80 84       	ldd	r8, Z+8	; 0x08
     190:	1e 08       	sbc	r1, r14
     192:	00 00       	nop
     194:	20 4e       	sbci	r18, 0xE0	; 224
     196:	0a 00       	.word	0x000a	; ????
     198:	00 00       	nop
     19a:	c8 0c       	add	r12, r8
     19c:	33 33       	cpi	r19, 0x33	; 51
     19e:	33 33       	cpi	r19, 0x33	; 51
     1a0:	0f 98       	cbi	0x01, 7	; 1
     1a2:	6e 12       	cpse	r6, r30
     1a4:	83 11       	cpse	r24, r3
     1a6:	41 ef       	ldi	r20, 0xF1	; 241
     1a8:	8d 21       	and	r24, r13
     1aa:	14 89       	ldd	r17, Z+20	; 0x14
     1ac:	3b e6       	ldi	r19, 0x6B	; 107
     1ae:	55 16       	cp	r5, r21
     1b0:	cf fe       	.word	0xfecf	; ????
     1b2:	e6 db       	rcall	.-2100   	; 0xfffff980 <__eeprom_end+0xff7ef980>
     1b4:	18 d1       	rcall	.+560    	; 0x3e6 <hmc5883l_init+0x1d4>
     1b6:	84 4b       	sbci	r24, 0xB4	; 180
     1b8:	38 1b       	sub	r19, r24
     1ba:	f7 7c       	andi	r31, 0xC7	; 199
     1bc:	1d 90       	ld	r1, X+
     1be:	1d a4       	ldd	r1, Y+45	; 0x2d
     1c0:	bb e4       	ldi	r27, 0x4B	; 75
     1c2:	24 20       	and	r2, r4
     1c4:	32 84       	ldd	r3, Z+10	; 0x0a
     1c6:	72 5e       	subi	r23, 0xE2	; 226
     1c8:	22 81       	ldd	r18, Z+2	; 0x02
     1ca:	00 c9       	rjmp	.-3584   	; 0xfffff3cc <__eeprom_end+0xff7ef3cc>
     1cc:	f1 24       	eor	r15, r1
     1ce:	ec a1       	ldd	r30, Y+36	; 0x24
     1d0:	e5 3d       	cpi	r30, 0xD5	; 213
     1d2:	27 00       	.word	0x0027	; ????

000001d4 <__ctors_end>:
     1d4:	11 24       	eor	r1, r1
     1d6:	1f be       	out	0x3f, r1	; 63
     1d8:	cf ef       	ldi	r28, 0xFF	; 255
     1da:	da e0       	ldi	r29, 0x0A	; 10
     1dc:	de bf       	out	0x3e, r29	; 62
     1de:	cd bf       	out	0x3d, r28	; 61

000001e0 <__do_copy_data>:
     1e0:	12 e0       	ldi	r17, 0x02	; 2
     1e2:	a0 e0       	ldi	r26, 0x00	; 0
     1e4:	b1 e0       	ldi	r27, 0x01	; 1
     1e6:	ec e4       	ldi	r30, 0x4C	; 76
     1e8:	f6 e2       	ldi	r31, 0x26	; 38
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <.do_copy_data_start>

000001ec <.do_copy_data_loop>:
     1ec:	05 90       	lpm	r0, Z+
     1ee:	0d 92       	st	X+, r0

000001f0 <.do_copy_data_start>:
     1f0:	ac 30       	cpi	r26, 0x0C	; 12
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <.do_copy_data_loop>

000001f6 <__do_clear_bss>:
     1f6:	12 e0       	ldi	r17, 0x02	; 2
     1f8:	ac e0       	ldi	r26, 0x0C	; 12
     1fa:	b2 e0       	ldi	r27, 0x02	; 2
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	a5 35       	cpi	r26, 0x55	; 85
     202:	b1 07       	cpc	r27, r17
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 c5 03 	call	0x78a	; 0x78a <main>
     20a:	0c 94 24 13 	jmp	0x2648	; 0x2648 <_exit>

0000020e <__bad_interrupt>:
     20e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000212 <hmc5883l_init>:
static double hmc5883l_scale = 0;

/*
 * init the hmc5883l
 */
void hmc5883l_init() {
     212:	df 93       	push	r29
     214:	cf 93       	push	r28
     216:	cd b7       	in	r28, 0x3d	; 61
     218:	de b7       	in	r29, 0x3e	; 62
     21a:	69 97       	sbiw	r28, 0x19	; 25
     21c:	0f b6       	in	r0, 0x3f	; 63
     21e:	f8 94       	cli
     220:	de bf       	out	0x3e, r29	; 62
     222:	0f be       	out	0x3f, r0	; 63
     224:	cd bf       	out	0x3d, r28	; 61
	#if HMC5883L_I2CINIT == 1
	//init i2c
	i2c_init();
     226:	0e 94 58 05 	call	0xab0	; 0xab0 <i2c_init>
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	a0 e2       	ldi	r26, 0x20	; 32
     230:	b1 e4       	ldi	r27, 0x41	; 65
     232:	8d 8b       	std	Y+21, r24	; 0x15
     234:	9e 8b       	std	Y+22, r25	; 0x16
     236:	af 8b       	std	Y+23, r26	; 0x17
     238:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     23a:	6d 89       	ldd	r22, Y+21	; 0x15
     23c:	7e 89       	ldd	r23, Y+22	; 0x16
     23e:	8f 89       	ldd	r24, Y+23	; 0x17
     240:	98 8d       	ldd	r25, Y+24	; 0x18
     242:	2b ea       	ldi	r18, 0xAB	; 171
     244:	3a ea       	ldi	r19, 0xAA	; 170
     246:	4a e2       	ldi	r20, 0x2A	; 42
     248:	50 e4       	ldi	r21, 0x40	; 64
     24a:	0e 94 67 09 	call	0x12ce	; 0x12ce <__mulsf3>
     24e:	dc 01       	movw	r26, r24
     250:	cb 01       	movw	r24, r22
     252:	89 8b       	std	Y+17, r24	; 0x11
     254:	9a 8b       	std	Y+18, r25	; 0x12
     256:	ab 8b       	std	Y+19, r26	; 0x13
     258:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     25a:	69 89       	ldd	r22, Y+17	; 0x11
     25c:	7a 89       	ldd	r23, Y+18	; 0x12
     25e:	8b 89       	ldd	r24, Y+19	; 0x13
     260:	9c 89       	ldd	r25, Y+20	; 0x14
     262:	20 e0       	ldi	r18, 0x00	; 0
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	40 e8       	ldi	r20, 0x80	; 128
     268:	5f e3       	ldi	r21, 0x3F	; 63
     26a:	0e 94 6d 0b 	call	0x16da	; 0x16da <__ltsf2>
     26e:	88 23       	and	r24, r24
     270:	1c f4       	brge	.+6      	; 0x278 <hmc5883l_init+0x66>
		__ticks = 1;
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	88 8b       	std	Y+16, r24	; 0x10
     276:	91 c0       	rjmp	.+290    	; 0x39a <hmc5883l_init+0x188>
	else if (__tmp > 255)
     278:	69 89       	ldd	r22, Y+17	; 0x11
     27a:	7a 89       	ldd	r23, Y+18	; 0x12
     27c:	8b 89       	ldd	r24, Y+19	; 0x13
     27e:	9c 89       	ldd	r25, Y+20	; 0x14
     280:	20 e0       	ldi	r18, 0x00	; 0
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	4f e7       	ldi	r20, 0x7F	; 127
     286:	53 e4       	ldi	r21, 0x43	; 67
     288:	0e 94 0d 0b 	call	0x161a	; 0x161a <__gtsf2>
     28c:	18 16       	cp	r1, r24
     28e:	0c f0       	brlt	.+2      	; 0x292 <hmc5883l_init+0x80>
     290:	7b c0       	rjmp	.+246    	; 0x388 <hmc5883l_init+0x176>
	{
		_delay_ms(__us / 1000.0);
     292:	6d 89       	ldd	r22, Y+21	; 0x15
     294:	7e 89       	ldd	r23, Y+22	; 0x16
     296:	8f 89       	ldd	r24, Y+23	; 0x17
     298:	98 8d       	ldd	r25, Y+24	; 0x18
     29a:	20 e0       	ldi	r18, 0x00	; 0
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	4a e7       	ldi	r20, 0x7A	; 122
     2a0:	54 e4       	ldi	r21, 0x44	; 68
     2a2:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__divsf3>
     2a6:	dc 01       	movw	r26, r24
     2a8:	cb 01       	movw	r24, r22
     2aa:	8c 87       	std	Y+12, r24	; 0x0c
     2ac:	9d 87       	std	Y+13, r25	; 0x0d
     2ae:	ae 87       	std	Y+14, r26	; 0x0e
     2b0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     2b2:	6c 85       	ldd	r22, Y+12	; 0x0c
     2b4:	7d 85       	ldd	r23, Y+13	; 0x0d
     2b6:	8e 85       	ldd	r24, Y+14	; 0x0e
     2b8:	9f 85       	ldd	r25, Y+15	; 0x0f
     2ba:	20 e0       	ldi	r18, 0x00	; 0
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	4a ef       	ldi	r20, 0xFA	; 250
     2c0:	54 e4       	ldi	r21, 0x44	; 68
     2c2:	0e 94 67 09 	call	0x12ce	; 0x12ce <__mulsf3>
     2c6:	dc 01       	movw	r26, r24
     2c8:	cb 01       	movw	r24, r22
     2ca:	88 87       	std	Y+8, r24	; 0x08
     2cc:	99 87       	std	Y+9, r25	; 0x09
     2ce:	aa 87       	std	Y+10, r26	; 0x0a
     2d0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     2d2:	68 85       	ldd	r22, Y+8	; 0x08
     2d4:	79 85       	ldd	r23, Y+9	; 0x09
     2d6:	8a 85       	ldd	r24, Y+10	; 0x0a
     2d8:	9b 85       	ldd	r25, Y+11	; 0x0b
     2da:	20 e0       	ldi	r18, 0x00	; 0
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	40 e8       	ldi	r20, 0x80	; 128
     2e0:	5f e3       	ldi	r21, 0x3F	; 63
     2e2:	0e 94 6d 0b 	call	0x16da	; 0x16da <__ltsf2>
     2e6:	88 23       	and	r24, r24
     2e8:	2c f4       	brge	.+10     	; 0x2f4 <hmc5883l_init+0xe2>
		__ticks = 1;
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	9f 83       	std	Y+7, r25	; 0x07
     2f0:	8e 83       	std	Y+6, r24	; 0x06
     2f2:	3f c0       	rjmp	.+126    	; 0x372 <hmc5883l_init+0x160>
	else if (__tmp > 65535)
     2f4:	68 85       	ldd	r22, Y+8	; 0x08
     2f6:	79 85       	ldd	r23, Y+9	; 0x09
     2f8:	8a 85       	ldd	r24, Y+10	; 0x0a
     2fa:	9b 85       	ldd	r25, Y+11	; 0x0b
     2fc:	20 e0       	ldi	r18, 0x00	; 0
     2fe:	3f ef       	ldi	r19, 0xFF	; 255
     300:	4f e7       	ldi	r20, 0x7F	; 127
     302:	57 e4       	ldi	r21, 0x47	; 71
     304:	0e 94 0d 0b 	call	0x161a	; 0x161a <__gtsf2>
     308:	18 16       	cp	r1, r24
     30a:	4c f5       	brge	.+82     	; 0x35e <hmc5883l_init+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     30c:	6c 85       	ldd	r22, Y+12	; 0x0c
     30e:	7d 85       	ldd	r23, Y+13	; 0x0d
     310:	8e 85       	ldd	r24, Y+14	; 0x0e
     312:	9f 85       	ldd	r25, Y+15	; 0x0f
     314:	20 e0       	ldi	r18, 0x00	; 0
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	40 e2       	ldi	r20, 0x20	; 32
     31a:	51 e4       	ldi	r21, 0x41	; 65
     31c:	0e 94 67 09 	call	0x12ce	; 0x12ce <__mulsf3>
     320:	dc 01       	movw	r26, r24
     322:	cb 01       	movw	r24, r22
     324:	bc 01       	movw	r22, r24
     326:	cd 01       	movw	r24, r26
     328:	0e 94 91 07 	call	0xf22	; 0xf22 <__fixunssfsi>
     32c:	dc 01       	movw	r26, r24
     32e:	cb 01       	movw	r24, r22
     330:	9f 83       	std	Y+7, r25	; 0x07
     332:	8e 83       	std	Y+6, r24	; 0x06
     334:	0f c0       	rjmp	.+30     	; 0x354 <hmc5883l_init+0x142>
     336:	88 ec       	ldi	r24, 0xC8	; 200
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	9d 83       	std	Y+5, r25	; 0x05
     33c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     33e:	8c 81       	ldd	r24, Y+4	; 0x04
     340:	9d 81       	ldd	r25, Y+5	; 0x05
     342:	01 97       	sbiw	r24, 0x01	; 1
     344:	f1 f7       	brne	.-4      	; 0x342 <hmc5883l_init+0x130>
     346:	9d 83       	std	Y+5, r25	; 0x05
     348:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     34a:	8e 81       	ldd	r24, Y+6	; 0x06
     34c:	9f 81       	ldd	r25, Y+7	; 0x07
     34e:	01 97       	sbiw	r24, 0x01	; 1
     350:	9f 83       	std	Y+7, r25	; 0x07
     352:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     354:	8e 81       	ldd	r24, Y+6	; 0x06
     356:	9f 81       	ldd	r25, Y+7	; 0x07
     358:	00 97       	sbiw	r24, 0x00	; 0
     35a:	69 f7       	brne	.-38     	; 0x336 <hmc5883l_init+0x124>
     35c:	24 c0       	rjmp	.+72     	; 0x3a6 <hmc5883l_init+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     35e:	68 85       	ldd	r22, Y+8	; 0x08
     360:	79 85       	ldd	r23, Y+9	; 0x09
     362:	8a 85       	ldd	r24, Y+10	; 0x0a
     364:	9b 85       	ldd	r25, Y+11	; 0x0b
     366:	0e 94 91 07 	call	0xf22	; 0xf22 <__fixunssfsi>
     36a:	dc 01       	movw	r26, r24
     36c:	cb 01       	movw	r24, r22
     36e:	9f 83       	std	Y+7, r25	; 0x07
     370:	8e 83       	std	Y+6, r24	; 0x06
     372:	8e 81       	ldd	r24, Y+6	; 0x06
     374:	9f 81       	ldd	r25, Y+7	; 0x07
     376:	9b 83       	std	Y+3, r25	; 0x03
     378:	8a 83       	std	Y+2, r24	; 0x02
     37a:	8a 81       	ldd	r24, Y+2	; 0x02
     37c:	9b 81       	ldd	r25, Y+3	; 0x03
     37e:	01 97       	sbiw	r24, 0x01	; 1
     380:	f1 f7       	brne	.-4      	; 0x37e <hmc5883l_init+0x16c>
     382:	9b 83       	std	Y+3, r25	; 0x03
     384:	8a 83       	std	Y+2, r24	; 0x02
     386:	0f c0       	rjmp	.+30     	; 0x3a6 <hmc5883l_init+0x194>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     388:	69 89       	ldd	r22, Y+17	; 0x11
     38a:	7a 89       	ldd	r23, Y+18	; 0x12
     38c:	8b 89       	ldd	r24, Y+19	; 0x13
     38e:	9c 89       	ldd	r25, Y+20	; 0x14
     390:	0e 94 91 07 	call	0xf22	; 0xf22 <__fixunssfsi>
     394:	dc 01       	movw	r26, r24
     396:	cb 01       	movw	r24, r22
     398:	88 8b       	std	Y+16, r24	; 0x10
     39a:	88 89       	ldd	r24, Y+16	; 0x10
     39c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     39e:	89 81       	ldd	r24, Y+1	; 0x01
     3a0:	8a 95       	dec	r24
     3a2:	f1 f7       	brne	.-4      	; 0x3a0 <hmc5883l_init+0x18e>
     3a4:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	#endif

	//set scale
	hmc5883l_scale = 0;
     3a6:	80 e0       	ldi	r24, 0x00	; 0
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	a0 e0       	ldi	r26, 0x00	; 0
     3ac:	b0 e0       	ldi	r27, 0x00	; 0
     3ae:	80 93 0c 02 	sts	0x020C, r24
     3b2:	90 93 0d 02 	sts	0x020D, r25
     3b6:	a0 93 0e 02 	sts	0x020E, r26
     3ba:	b0 93 0f 02 	sts	0x020F, r27
	uint8_t regValue = 0x00;
     3be:	19 8e       	std	Y+25, r1	; 0x19
	#if HMC5883L_SCALE == HMC5883L_SCALE088
		regValue = 0x00;
		hmc5883l_scale = 0.73;
	#elif HMC5883L_SCALE == HMC5883L_SCALE13
		regValue = 0x01;
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	89 8f       	std	Y+25, r24	; 0x19
		hmc5883l_scale = 0.92;
     3c4:	8f e1       	ldi	r24, 0x1F	; 31
     3c6:	95 e8       	ldi	r25, 0x85	; 133
     3c8:	ab e6       	ldi	r26, 0x6B	; 107
     3ca:	bf e3       	ldi	r27, 0x3F	; 63
     3cc:	80 93 0c 02 	sts	0x020C, r24
     3d0:	90 93 0d 02 	sts	0x020D, r25
     3d4:	a0 93 0e 02 	sts	0x020E, r26
     3d8:	b0 93 0f 02 	sts	0x020F, r27
		regValue = 0x07;
		hmc5883l_scale = 4.35;
	#endif

	//setting is in the top 3 bits of the register.
	regValue = regValue << 5;
     3dc:	89 8d       	ldd	r24, Y+25	; 0x19
     3de:	82 95       	swap	r24
     3e0:	88 0f       	add	r24, r24
     3e2:	80 7e       	andi	r24, 0xE0	; 224
     3e4:	89 8f       	std	Y+25, r24	; 0x19
    i2c_start_wait(HMC5883L_ADDR | I2C_WRITE);
     3e6:	8c e3       	ldi	r24, 0x3C	; 60
     3e8:	0e 94 a7 05 	call	0xb4e	; 0xb4e <i2c_start_wait>
    i2c_write(HMC5883L_CONFREGB);
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	0e 94 0d 06 	call	0xc1a	; 0xc1a <i2c_write>
    i2c_write(regValue);
     3f2:	89 8d       	ldd	r24, Y+25	; 0x19
     3f4:	0e 94 0d 06 	call	0xc1a	; 0xc1a <i2c_write>
    i2c_stop();
     3f8:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <i2c_stop>

	//set measurement mode
	i2c_start_wait(HMC5883L_ADDR | I2C_WRITE);
     3fc:	8c e3       	ldi	r24, 0x3C	; 60
     3fe:	0e 94 a7 05 	call	0xb4e	; 0xb4e <i2c_start_wait>
	i2c_write(HMC5883L_MODEREG);
     402:	82 e0       	ldi	r24, 0x02	; 2
     404:	0e 94 0d 06 	call	0xc1a	; 0xc1a <i2c_write>
	i2c_write(HMC5883L_MEASUREMODE);
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <i2c_write>
	i2c_stop();
     40e:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <i2c_stop>
}
     412:	69 96       	adiw	r28, 0x19	; 25
     414:	0f b6       	in	r0, 0x3f	; 63
     416:	f8 94       	cli
     418:	de bf       	out	0x3e, r29	; 62
     41a:	0f be       	out	0x3f, r0	; 63
     41c:	cd bf       	out	0x3d, r28	; 61
     41e:	cf 91       	pop	r28
     420:	df 91       	pop	r29
     422:	08 95       	ret

00000424 <hmc5883l_getrawdata>:

/*
 * get raw data
 */
void hmc5883l_getrawdata(int16_t *mxraw, int16_t *myraw, int16_t *mzraw) {
     424:	0f 93       	push	r16
     426:	1f 93       	push	r17
     428:	df 93       	push	r29
     42a:	cf 93       	push	r28
     42c:	cd b7       	in	r28, 0x3d	; 61
     42e:	de b7       	in	r29, 0x3e	; 62
     430:	2d 97       	sbiw	r28, 0x0d	; 13
     432:	0f b6       	in	r0, 0x3f	; 63
     434:	f8 94       	cli
     436:	de bf       	out	0x3e, r29	; 62
     438:	0f be       	out	0x3f, r0	; 63
     43a:	cd bf       	out	0x3d, r28	; 61
     43c:	99 87       	std	Y+9, r25	; 0x09
     43e:	88 87       	std	Y+8, r24	; 0x08
     440:	7b 87       	std	Y+11, r23	; 0x0b
     442:	6a 87       	std	Y+10, r22	; 0x0a
     444:	5d 87       	std	Y+13, r21	; 0x0d
     446:	4c 87       	std	Y+12, r20	; 0x0c
	uint8_t i = 0;
     448:	19 82       	std	Y+1, r1	; 0x01
	uint8_t buff[6];

	i2c_start_wait(HMC5883L_ADDR | I2C_WRITE);
     44a:	8c e3       	ldi	r24, 0x3C	; 60
     44c:	0e 94 a7 05 	call	0xb4e	; 0xb4e <i2c_start_wait>
	i2c_write(HMC5883L_DATAREGBEGIN);
     450:	83 e0       	ldi	r24, 0x03	; 3
     452:	0e 94 0d 06 	call	0xc1a	; 0xc1a <i2c_write>
	i2c_stop();
     456:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <i2c_stop>
	i2c_start_wait(HMC5883L_ADDR | I2C_READ);
     45a:	8d e3       	ldi	r24, 0x3D	; 61
     45c:	0e 94 a7 05 	call	0xb4e	; 0xb4e <i2c_start_wait>
	for(i=0; i<6; i++) {
     460:	19 82       	std	Y+1, r1	; 0x01
     462:	1f c0       	rjmp	.+62     	; 0x4a2 <hmc5883l_getrawdata+0x7e>
		if(i==6-1)
     464:	89 81       	ldd	r24, Y+1	; 0x01
     466:	85 30       	cpi	r24, 0x05	; 5
     468:	69 f4       	brne	.+26     	; 0x484 <hmc5883l_getrawdata+0x60>
			buff[i] = i2c_readNak();
     46a:	89 81       	ldd	r24, Y+1	; 0x01
     46c:	08 2f       	mov	r16, r24
     46e:	10 e0       	ldi	r17, 0x00	; 0
     470:	0e 94 47 06 	call	0xc8e	; 0xc8e <i2c_readNak>
     474:	28 2f       	mov	r18, r24
     476:	ce 01       	movw	r24, r28
     478:	02 96       	adiw	r24, 0x02	; 2
     47a:	fc 01       	movw	r30, r24
     47c:	e0 0f       	add	r30, r16
     47e:	f1 1f       	adc	r31, r17
     480:	20 83       	st	Z, r18
     482:	0c c0       	rjmp	.+24     	; 0x49c <hmc5883l_getrawdata+0x78>
		else
			buff[i] = i2c_readAck();
     484:	89 81       	ldd	r24, Y+1	; 0x01
     486:	08 2f       	mov	r16, r24
     488:	10 e0       	ldi	r17, 0x00	; 0
     48a:	0e 94 34 06 	call	0xc68	; 0xc68 <i2c_readAck>
     48e:	28 2f       	mov	r18, r24
     490:	ce 01       	movw	r24, r28
     492:	02 96       	adiw	r24, 0x02	; 2
     494:	fc 01       	movw	r30, r24
     496:	e0 0f       	add	r30, r16
     498:	f1 1f       	adc	r31, r17
     49a:	20 83       	st	Z, r18

	i2c_start_wait(HMC5883L_ADDR | I2C_WRITE);
	i2c_write(HMC5883L_DATAREGBEGIN);
	i2c_stop();
	i2c_start_wait(HMC5883L_ADDR | I2C_READ);
	for(i=0; i<6; i++) {
     49c:	89 81       	ldd	r24, Y+1	; 0x01
     49e:	8f 5f       	subi	r24, 0xFF	; 255
     4a0:	89 83       	std	Y+1, r24	; 0x01
     4a2:	89 81       	ldd	r24, Y+1	; 0x01
     4a4:	86 30       	cpi	r24, 0x06	; 6
     4a6:	f0 f2       	brcs	.-68     	; 0x464 <hmc5883l_getrawdata+0x40>
		if(i==6-1)
			buff[i] = i2c_readNak();
		else
			buff[i] = i2c_readAck();
	}
	i2c_stop();
     4a8:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <i2c_stop>

	*mxraw = (int16_t)((buff[0] << 8) | buff[1]);
     4ac:	8a 81       	ldd	r24, Y+2	; 0x02
     4ae:	88 2f       	mov	r24, r24
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	38 2f       	mov	r19, r24
     4b4:	22 27       	eor	r18, r18
     4b6:	8b 81       	ldd	r24, Y+3	; 0x03
     4b8:	88 2f       	mov	r24, r24
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	82 2b       	or	r24, r18
     4be:	93 2b       	or	r25, r19
     4c0:	e8 85       	ldd	r30, Y+8	; 0x08
     4c2:	f9 85       	ldd	r31, Y+9	; 0x09
     4c4:	91 83       	std	Z+1, r25	; 0x01
     4c6:	80 83       	st	Z, r24
	*mzraw = (int16_t)((buff[2] << 8) | buff[3]);
     4c8:	8c 81       	ldd	r24, Y+4	; 0x04
     4ca:	88 2f       	mov	r24, r24
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	38 2f       	mov	r19, r24
     4d0:	22 27       	eor	r18, r18
     4d2:	8d 81       	ldd	r24, Y+5	; 0x05
     4d4:	88 2f       	mov	r24, r24
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	82 2b       	or	r24, r18
     4da:	93 2b       	or	r25, r19
     4dc:	ec 85       	ldd	r30, Y+12	; 0x0c
     4de:	fd 85       	ldd	r31, Y+13	; 0x0d
     4e0:	91 83       	std	Z+1, r25	; 0x01
     4e2:	80 83       	st	Z, r24
	*myraw = (int16_t)((buff[4] << 8) | buff[5]);
     4e4:	8e 81       	ldd	r24, Y+6	; 0x06
     4e6:	88 2f       	mov	r24, r24
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	38 2f       	mov	r19, r24
     4ec:	22 27       	eor	r18, r18
     4ee:	8f 81       	ldd	r24, Y+7	; 0x07
     4f0:	88 2f       	mov	r24, r24
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	82 2b       	or	r24, r18
     4f6:	93 2b       	or	r25, r19
     4f8:	ea 85       	ldd	r30, Y+10	; 0x0a
     4fa:	fb 85       	ldd	r31, Y+11	; 0x0b
     4fc:	91 83       	std	Z+1, r25	; 0x01
     4fe:	80 83       	st	Z, r24
}
     500:	2d 96       	adiw	r28, 0x0d	; 13
     502:	0f b6       	in	r0, 0x3f	; 63
     504:	f8 94       	cli
     506:	de bf       	out	0x3e, r29	; 62
     508:	0f be       	out	0x3f, r0	; 63
     50a:	cd bf       	out	0x3d, r28	; 61
     50c:	cf 91       	pop	r28
     50e:	df 91       	pop	r29
     510:	1f 91       	pop	r17
     512:	0f 91       	pop	r16
     514:	08 95       	ret

00000516 <hmc5883l_getdata>:

/*
 * get scaled data
 */
void hmc5883l_getdata(double *mx, double *my, double *mz) {
     516:	ef 92       	push	r14
     518:	ff 92       	push	r15
     51a:	0f 93       	push	r16
     51c:	1f 93       	push	r17
     51e:	df 93       	push	r29
     520:	cf 93       	push	r28
     522:	cd b7       	in	r28, 0x3d	; 61
     524:	de b7       	in	r29, 0x3e	; 62
     526:	68 97       	sbiw	r28, 0x18	; 24
     528:	0f b6       	in	r0, 0x3f	; 63
     52a:	f8 94       	cli
     52c:	de bf       	out	0x3e, r29	; 62
     52e:	0f be       	out	0x3f, r0	; 63
     530:	cd bf       	out	0x3d, r28	; 61
     532:	9c 8b       	std	Y+20, r25	; 0x14
     534:	8b 8b       	std	Y+19, r24	; 0x13
     536:	7e 8b       	std	Y+22, r23	; 0x16
     538:	6d 8b       	std	Y+21, r22	; 0x15
     53a:	58 8f       	std	Y+24, r21	; 0x18
     53c:	4f 8b       	std	Y+23, r20	; 0x17
	int16_t mxraw = 0;
     53e:	1e 86       	std	Y+14, r1	; 0x0e
     540:	1d 86       	std	Y+13, r1	; 0x0d
	int16_t myraw = 0;
     542:	18 8a       	std	Y+16, r1	; 0x10
     544:	1f 86       	std	Y+15, r1	; 0x0f
	int16_t mzraw = 0;
     546:	1a 8a       	std	Y+18, r1	; 0x12
     548:	19 8a       	std	Y+17, r1	; 0x11
	hmc5883l_getrawdata(&mxraw, &myraw, &mzraw);
     54a:	ce 01       	movw	r24, r28
     54c:	0d 96       	adiw	r24, 0x0d	; 13
     54e:	9e 01       	movw	r18, r28
     550:	21 5f       	subi	r18, 0xF1	; 241
     552:	3f 4f       	sbci	r19, 0xFF	; 255
     554:	ae 01       	movw	r20, r28
     556:	4f 5e       	subi	r20, 0xEF	; 239
     558:	5f 4f       	sbci	r21, 0xFF	; 255
     55a:	b9 01       	movw	r22, r18
     55c:	0e 94 12 02 	call	0x424	; 0x424 <hmc5883l_getrawdata>

	#if HMC5883L_CALIBRATED == 1
	float mxt = mxraw - HMC5883L_OFFSETX;
     560:	8d 85       	ldd	r24, Y+13	; 0x0d
     562:	9e 85       	ldd	r25, Y+14	; 0x0e
     564:	aa 27       	eor	r26, r26
     566:	97 fd       	sbrc	r25, 7
     568:	a0 95       	com	r26
     56a:	ba 2f       	mov	r27, r26
     56c:	bc 01       	movw	r22, r24
     56e:	cd 01       	movw	r24, r26
     570:	0e 94 9d 0b 	call	0x173a	; 0x173a <__floatsisf>
     574:	dc 01       	movw	r26, r24
     576:	cb 01       	movw	r24, r22
     578:	bc 01       	movw	r22, r24
     57a:	cd 01       	movw	r24, r26
     57c:	26 e6       	ldi	r18, 0x66	; 102
     57e:	36 e6       	ldi	r19, 0x66	; 102
     580:	47 ec       	ldi	r20, 0xC7	; 199
     582:	52 e4       	ldi	r21, 0x42	; 66
     584:	0e 94 3a 09 	call	0x1274	; 0x1274 <__addsf3>
     588:	dc 01       	movw	r26, r24
     58a:	cb 01       	movw	r24, r22
     58c:	89 87       	std	Y+9, r24	; 0x09
     58e:	9a 87       	std	Y+10, r25	; 0x0a
     590:	ab 87       	std	Y+11, r26	; 0x0b
     592:	bc 87       	std	Y+12, r27	; 0x0c
	float myt = myraw - HMC5883L_OFFSETY;
     594:	8f 85       	ldd	r24, Y+15	; 0x0f
     596:	98 89       	ldd	r25, Y+16	; 0x10
     598:	aa 27       	eor	r26, r26
     59a:	97 fd       	sbrc	r25, 7
     59c:	a0 95       	com	r26
     59e:	ba 2f       	mov	r27, r26
     5a0:	bc 01       	movw	r22, r24
     5a2:	cd 01       	movw	r24, r26
     5a4:	0e 94 9d 0b 	call	0x173a	; 0x173a <__floatsisf>
     5a8:	dc 01       	movw	r26, r24
     5aa:	cb 01       	movw	r24, r22
     5ac:	bc 01       	movw	r22, r24
     5ae:	cd 01       	movw	r24, r26
     5b0:	20 e0       	ldi	r18, 0x00	; 0
     5b2:	30 e0       	ldi	r19, 0x00	; 0
     5b4:	4a e1       	ldi	r20, 0x1A	; 26
     5b6:	53 e4       	ldi	r21, 0x43	; 67
     5b8:	0e 94 3a 09 	call	0x1274	; 0x1274 <__addsf3>
     5bc:	dc 01       	movw	r26, r24
     5be:	cb 01       	movw	r24, r22
     5c0:	8d 83       	std	Y+5, r24	; 0x05
     5c2:	9e 83       	std	Y+6, r25	; 0x06
     5c4:	af 83       	std	Y+7, r26	; 0x07
     5c6:	b8 87       	std	Y+8, r27	; 0x08
	float mzt = mzraw - HMC5883L_OFFSETZ;
     5c8:	89 89       	ldd	r24, Y+17	; 0x11
     5ca:	9a 89       	ldd	r25, Y+18	; 0x12
     5cc:	aa 27       	eor	r26, r26
     5ce:	97 fd       	sbrc	r25, 7
     5d0:	a0 95       	com	r26
     5d2:	ba 2f       	mov	r27, r26
     5d4:	bc 01       	movw	r22, r24
     5d6:	cd 01       	movw	r24, r26
     5d8:	0e 94 9d 0b 	call	0x173a	; 0x173a <__floatsisf>
     5dc:	dc 01       	movw	r26, r24
     5de:	cb 01       	movw	r24, r22
     5e0:	bc 01       	movw	r22, r24
     5e2:	cd 01       	movw	r24, r26
     5e4:	2a e9       	ldi	r18, 0x9A	; 154
     5e6:	39 e9       	ldi	r19, 0x99	; 153
     5e8:	45 eb       	ldi	r20, 0xB5	; 181
     5ea:	51 e4       	ldi	r21, 0x41	; 65
     5ec:	0e 94 3a 09 	call	0x1274	; 0x1274 <__addsf3>
     5f0:	dc 01       	movw	r26, r24
     5f2:	cb 01       	movw	r24, r22
     5f4:	89 83       	std	Y+1, r24	; 0x01
     5f6:	9a 83       	std	Y+2, r25	; 0x02
     5f8:	ab 83       	std	Y+3, r26	; 0x03
     5fa:	bc 83       	std	Y+4, r27	; 0x04
	*mx = HMC5883L_GAINX1 * mxt + HMC5883L_GAINX2 * myt + HMC5883L_GAINX3 * mzt;
     5fc:	69 85       	ldd	r22, Y+9	; 0x09
     5fe:	7a 85       	ldd	r23, Y+10	; 0x0a
     600:	8b 85       	ldd	r24, Y+11	; 0x0b
     602:	9c 85       	ldd	r25, Y+12	; 0x0c
     604:	23 e6       	ldi	r18, 0x63	; 99
     606:	37 eb       	ldi	r19, 0xB7	; 183
     608:	43 e7       	ldi	r20, 0x73	; 115
     60a:	5f e3       	ldi	r21, 0x3F	; 63
     60c:	0e 94 67 09 	call	0x12ce	; 0x12ce <__mulsf3>
     610:	dc 01       	movw	r26, r24
     612:	cb 01       	movw	r24, r22
     614:	7c 01       	movw	r14, r24
     616:	8d 01       	movw	r16, r26
     618:	6d 81       	ldd	r22, Y+5	; 0x05
     61a:	7e 81       	ldd	r23, Y+6	; 0x06
     61c:	8f 81       	ldd	r24, Y+7	; 0x07
     61e:	98 85       	ldd	r25, Y+8	; 0x08
     620:	2a eb       	ldi	r18, 0xBA	; 186
     622:	31 e6       	ldi	r19, 0x61	; 97
     624:	40 e0       	ldi	r20, 0x00	; 0
     626:	5b e3       	ldi	r21, 0x3B	; 59
     628:	0e 94 67 09 	call	0x12ce	; 0x12ce <__mulsf3>
     62c:	dc 01       	movw	r26, r24
     62e:	cb 01       	movw	r24, r22
     630:	9c 01       	movw	r18, r24
     632:	ad 01       	movw	r20, r26
     634:	c8 01       	movw	r24, r16
     636:	b7 01       	movw	r22, r14
     638:	0e 94 3a 09 	call	0x1274	; 0x1274 <__addsf3>
     63c:	dc 01       	movw	r26, r24
     63e:	cb 01       	movw	r24, r22
     640:	7c 01       	movw	r14, r24
     642:	8d 01       	movw	r16, r26
     644:	69 81       	ldd	r22, Y+1	; 0x01
     646:	7a 81       	ldd	r23, Y+2	; 0x02
     648:	8b 81       	ldd	r24, Y+3	; 0x03
     64a:	9c 81       	ldd	r25, Y+4	; 0x04
     64c:	22 e1       	ldi	r18, 0x12	; 18
     64e:	32 ed       	ldi	r19, 0xD2	; 210
     650:	44 e6       	ldi	r20, 0x64	; 100
     652:	5c e3       	ldi	r21, 0x3C	; 60
     654:	0e 94 67 09 	call	0x12ce	; 0x12ce <__mulsf3>
     658:	dc 01       	movw	r26, r24
     65a:	cb 01       	movw	r24, r22
     65c:	9c 01       	movw	r18, r24
     65e:	ad 01       	movw	r20, r26
     660:	c8 01       	movw	r24, r16
     662:	b7 01       	movw	r22, r14
     664:	0e 94 3a 09 	call	0x1274	; 0x1274 <__addsf3>
     668:	dc 01       	movw	r26, r24
     66a:	cb 01       	movw	r24, r22
     66c:	eb 89       	ldd	r30, Y+19	; 0x13
     66e:	fc 89       	ldd	r31, Y+20	; 0x14
     670:	80 83       	st	Z, r24
     672:	91 83       	std	Z+1, r25	; 0x01
     674:	a2 83       	std	Z+2, r26	; 0x02
     676:	b3 83       	std	Z+3, r27	; 0x03
	*my = HMC5883L_GAINY1 * mxt + HMC5883L_GAINY2 * myt + HMC5883L_GAINY3 * mzt;
     678:	69 85       	ldd	r22, Y+9	; 0x09
     67a:	7a 85       	ldd	r23, Y+10	; 0x0a
     67c:	8b 85       	ldd	r24, Y+11	; 0x0b
     67e:	9c 85       	ldd	r25, Y+12	; 0x0c
     680:	2a eb       	ldi	r18, 0xBA	; 186
     682:	31 e6       	ldi	r19, 0x61	; 97
     684:	40 e0       	ldi	r20, 0x00	; 0
     686:	5b e3       	ldi	r21, 0x3B	; 59
     688:	0e 94 67 09 	call	0x12ce	; 0x12ce <__mulsf3>
     68c:	dc 01       	movw	r26, r24
     68e:	cb 01       	movw	r24, r22
     690:	7c 01       	movw	r14, r24
     692:	8d 01       	movw	r16, r26
     694:	6d 81       	ldd	r22, Y+5	; 0x05
     696:	7e 81       	ldd	r23, Y+6	; 0x06
     698:	8f 81       	ldd	r24, Y+7	; 0x07
     69a:	98 85       	ldd	r25, Y+8	; 0x08
     69c:	21 ec       	ldi	r18, 0xC1	; 193
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	42 e6       	ldi	r20, 0x62	; 98
     6a2:	5f e3       	ldi	r21, 0x3F	; 63
     6a4:	0e 94 67 09 	call	0x12ce	; 0x12ce <__mulsf3>
     6a8:	dc 01       	movw	r26, r24
     6aa:	cb 01       	movw	r24, r22
     6ac:	9c 01       	movw	r18, r24
     6ae:	ad 01       	movw	r20, r26
     6b0:	c8 01       	movw	r24, r16
     6b2:	b7 01       	movw	r22, r14
     6b4:	0e 94 3a 09 	call	0x1274	; 0x1274 <__addsf3>
     6b8:	dc 01       	movw	r26, r24
     6ba:	cb 01       	movw	r24, r22
     6bc:	7c 01       	movw	r14, r24
     6be:	8d 01       	movw	r16, r26
     6c0:	69 81       	ldd	r22, Y+1	; 0x01
     6c2:	7a 81       	ldd	r23, Y+2	; 0x02
     6c4:	8b 81       	ldd	r24, Y+3	; 0x03
     6c6:	9c 81       	ldd	r25, Y+4	; 0x04
     6c8:	2e ec       	ldi	r18, 0xCE	; 206
     6ca:	3d e1       	ldi	r19, 0x1D	; 29
     6cc:	49 ef       	ldi	r20, 0xF9	; 249
     6ce:	5b e3       	ldi	r21, 0x3B	; 59
     6d0:	0e 94 67 09 	call	0x12ce	; 0x12ce <__mulsf3>
     6d4:	dc 01       	movw	r26, r24
     6d6:	cb 01       	movw	r24, r22
     6d8:	9c 01       	movw	r18, r24
     6da:	ad 01       	movw	r20, r26
     6dc:	c8 01       	movw	r24, r16
     6de:	b7 01       	movw	r22, r14
     6e0:	0e 94 3a 09 	call	0x1274	; 0x1274 <__addsf3>
     6e4:	dc 01       	movw	r26, r24
     6e6:	cb 01       	movw	r24, r22
     6e8:	ed 89       	ldd	r30, Y+21	; 0x15
     6ea:	fe 89       	ldd	r31, Y+22	; 0x16
     6ec:	80 83       	st	Z, r24
     6ee:	91 83       	std	Z+1, r25	; 0x01
     6f0:	a2 83       	std	Z+2, r26	; 0x02
     6f2:	b3 83       	std	Z+3, r27	; 0x03
	*mz = HMC5883L_GAINZ1 * mxt + HMC5883L_GAINZ2 * myt + HMC5883L_GAINZ3 * mzt;
     6f4:	69 85       	ldd	r22, Y+9	; 0x09
     6f6:	7a 85       	ldd	r23, Y+10	; 0x0a
     6f8:	8b 85       	ldd	r24, Y+11	; 0x0b
     6fa:	9c 85       	ldd	r25, Y+12	; 0x0c
     6fc:	22 e1       	ldi	r18, 0x12	; 18
     6fe:	32 ed       	ldi	r19, 0xD2	; 210
     700:	44 e6       	ldi	r20, 0x64	; 100
     702:	5c e3       	ldi	r21, 0x3C	; 60
     704:	0e 94 67 09 	call	0x12ce	; 0x12ce <__mulsf3>
     708:	dc 01       	movw	r26, r24
     70a:	cb 01       	movw	r24, r22
     70c:	7c 01       	movw	r14, r24
     70e:	8d 01       	movw	r16, r26
     710:	6d 81       	ldd	r22, Y+5	; 0x05
     712:	7e 81       	ldd	r23, Y+6	; 0x06
     714:	8f 81       	ldd	r24, Y+7	; 0x07
     716:	98 85       	ldd	r25, Y+8	; 0x08
     718:	2e ec       	ldi	r18, 0xCE	; 206
     71a:	3d e1       	ldi	r19, 0x1D	; 29
     71c:	49 ef       	ldi	r20, 0xF9	; 249
     71e:	5b e3       	ldi	r21, 0x3B	; 59
     720:	0e 94 67 09 	call	0x12ce	; 0x12ce <__mulsf3>
     724:	dc 01       	movw	r26, r24
     726:	cb 01       	movw	r24, r22
     728:	9c 01       	movw	r18, r24
     72a:	ad 01       	movw	r20, r26
     72c:	c8 01       	movw	r24, r16
     72e:	b7 01       	movw	r22, r14
     730:	0e 94 3a 09 	call	0x1274	; 0x1274 <__addsf3>
     734:	dc 01       	movw	r26, r24
     736:	cb 01       	movw	r24, r22
     738:	7c 01       	movw	r14, r24
     73a:	8d 01       	movw	r16, r26
     73c:	69 81       	ldd	r22, Y+1	; 0x01
     73e:	7a 81       	ldd	r23, Y+2	; 0x02
     740:	8b 81       	ldd	r24, Y+3	; 0x03
     742:	9c 81       	ldd	r25, Y+4	; 0x04
     744:	2e e3       	ldi	r18, 0x3E	; 62
     746:	30 ed       	ldi	r19, 0xD0	; 208
     748:	4e e7       	ldi	r20, 0x7E	; 126
     74a:	5f e3       	ldi	r21, 0x3F	; 63
     74c:	0e 94 67 09 	call	0x12ce	; 0x12ce <__mulsf3>
     750:	dc 01       	movw	r26, r24
     752:	cb 01       	movw	r24, r22
     754:	9c 01       	movw	r18, r24
     756:	ad 01       	movw	r20, r26
     758:	c8 01       	movw	r24, r16
     75a:	b7 01       	movw	r22, r14
     75c:	0e 94 3a 09 	call	0x1274	; 0x1274 <__addsf3>
     760:	dc 01       	movw	r26, r24
     762:	cb 01       	movw	r24, r22
     764:	ef 89       	ldd	r30, Y+23	; 0x17
     766:	f8 8d       	ldd	r31, Y+24	; 0x18
     768:	80 83       	st	Z, r24
     76a:	91 83       	std	Z+1, r25	; 0x01
     76c:	a2 83       	std	Z+2, r26	; 0x02
     76e:	b3 83       	std	Z+3, r27	; 0x03
	*mz = mzraw * hmc5883l_scale;
	#endif



}
     770:	68 96       	adiw	r28, 0x18	; 24
     772:	0f b6       	in	r0, 0x3f	; 63
     774:	f8 94       	cli
     776:	de bf       	out	0x3e, r29	; 62
     778:	0f be       	out	0x3f, r0	; 63
     77a:	cd bf       	out	0x3d, r28	; 61
     77c:	cf 91       	pop	r28
     77e:	df 91       	pop	r29
     780:	1f 91       	pop	r17
     782:	0f 91       	pop	r16
     784:	ff 90       	pop	r15
     786:	ef 90       	pop	r14
     788:	08 95       	ret

0000078a <main>:
#include "Includes/magn_docalibration.h"

#define UART_BAUD_RATE 57600
#include "Includes/uart.h"

int main(void) {
     78a:	ef 92       	push	r14
     78c:	ff 92       	push	r15
     78e:	0f 93       	push	r16
     790:	1f 93       	push	r17
     792:	df 93       	push	r29
     794:	cf 93       	push	r28
     796:	cd b7       	in	r28, 0x3d	; 61
     798:	de b7       	in	r29, 0x3e	; 62
     79a:	ae 97       	sbiw	r28, 0x2e	; 46
     79c:	0f b6       	in	r0, 0x3f	; 63
     79e:	f8 94       	cli
     7a0:	de bf       	out	0x3e, r29	; 62
     7a2:	0f be       	out	0x3f, r0	; 63
     7a4:	cd bf       	out	0x3d, r28	; 61
    int16_t mxraw = 0;
     7a6:	1c 8a       	std	Y+20, r1	; 0x14
     7a8:	1b 8a       	std	Y+19, r1	; 0x13
    int16_t myraw = 0;
     7aa:	1e 8a       	std	Y+22, r1	; 0x16
     7ac:	1d 8a       	std	Y+21, r1	; 0x15
    int16_t mzraw = 0;
     7ae:	18 8e       	std	Y+24, r1	; 0x18
     7b0:	1f 8a       	std	Y+23, r1	; 0x17
    double mx = 0;
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	a0 e0       	ldi	r26, 0x00	; 0
     7b8:	b0 e0       	ldi	r27, 0x00	; 0
     7ba:	89 8f       	std	Y+25, r24	; 0x19
     7bc:	9a 8f       	std	Y+26, r25	; 0x1a
     7be:	ab 8f       	std	Y+27, r26	; 0x1b
     7c0:	bc 8f       	std	Y+28, r27	; 0x1c
    double my = 0;
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	a0 e0       	ldi	r26, 0x00	; 0
     7c8:	b0 e0       	ldi	r27, 0x00	; 0
     7ca:	8d 8f       	std	Y+29, r24	; 0x1d
     7cc:	9e 8f       	std	Y+30, r25	; 0x1e
     7ce:	af 8f       	std	Y+31, r26	; 0x1f
     7d0:	b8 a3       	std	Y+32, r27	; 0x20
    double mz = 0;
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	a0 e0       	ldi	r26, 0x00	; 0
     7d8:	b0 e0       	ldi	r27, 0x00	; 0
     7da:	89 a3       	std	Y+33, r24	; 0x21
     7dc:	9a a3       	std	Y+34, r25	; 0x22
     7de:	ab a3       	std	Y+35, r26	; 0x23
     7e0:	bc a3       	std	Y+36, r27	; 0x24

	char itmp[10];

    //init uart
	uart_init(UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));
     7e2:	88 e0       	ldi	r24, 0x08	; 8
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <uart_init>

	//init interrupt
	sei();
     7ea:	78 94       	sei

	//init hmc5883l
	hmc5883l_init();
     7ec:	0e 94 09 01 	call	0x212	; 0x212 <hmc5883l_init>
	#if MAGN_DOCALIBRATION  == 1
	magncal_docalibrationclient(uart_putc, uart_getc);
	#endif

	for(;;) {
		hmc5883l_getrawdata(&mxraw, &myraw, &mzraw);
     7f0:	ce 01       	movw	r24, r28
     7f2:	43 96       	adiw	r24, 0x13	; 19
     7f4:	9e 01       	movw	r18, r28
     7f6:	2b 5e       	subi	r18, 0xEB	; 235
     7f8:	3f 4f       	sbci	r19, 0xFF	; 255
     7fa:	ae 01       	movw	r20, r28
     7fc:	49 5e       	subi	r20, 0xE9	; 233
     7fe:	5f 4f       	sbci	r21, 0xFF	; 255
     800:	b9 01       	movw	r22, r18
     802:	0e 94 12 02 	call	0x424	; 0x424 <hmc5883l_getrawdata>
		hmc5883l_getdata(&mx, &my, &mz);
     806:	ce 01       	movw	r24, r28
     808:	49 96       	adiw	r24, 0x19	; 25
     80a:	9e 01       	movw	r18, r28
     80c:	23 5e       	subi	r18, 0xE3	; 227
     80e:	3f 4f       	sbci	r19, 0xFF	; 255
     810:	ae 01       	movw	r20, r28
     812:	4f 5d       	subi	r20, 0xDF	; 223
     814:	5f 4f       	sbci	r21, 0xFF	; 255
     816:	b9 01       	movw	r22, r18
     818:	0e 94 8b 02 	call	0x516	; 0x516 <hmc5883l_getdata>

		//get magnetic heading (in degrees)
		float heading = 0;
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	a0 e0       	ldi	r26, 0x00	; 0
     822:	b0 e0       	ldi	r27, 0x00	; 0
     824:	8f 87       	std	Y+15, r24	; 0x0f
     826:	98 8b       	std	Y+16, r25	; 0x10
     828:	a9 8b       	std	Y+17, r26	; 0x11
     82a:	ba 8b       	std	Y+18, r27	; 0x12
		heading = atan2((double)myraw,(double)mxraw)*57.29578;
     82c:	8d 89       	ldd	r24, Y+21	; 0x15
     82e:	9e 89       	ldd	r25, Y+22	; 0x16
     830:	aa 27       	eor	r26, r26
     832:	97 fd       	sbrc	r25, 7
     834:	a0 95       	com	r26
     836:	ba 2f       	mov	r27, r26
     838:	bc 01       	movw	r22, r24
     83a:	cd 01       	movw	r24, r26
     83c:	0e 94 9d 0b 	call	0x173a	; 0x173a <__floatsisf>
     840:	7b 01       	movw	r14, r22
     842:	8c 01       	movw	r16, r24
     844:	8b 89       	ldd	r24, Y+19	; 0x13
     846:	9c 89       	ldd	r25, Y+20	; 0x14
     848:	aa 27       	eor	r26, r26
     84a:	97 fd       	sbrc	r25, 7
     84c:	a0 95       	com	r26
     84e:	ba 2f       	mov	r27, r26
     850:	bc 01       	movw	r22, r24
     852:	cd 01       	movw	r24, r26
     854:	0e 94 9d 0b 	call	0x173a	; 0x173a <__floatsisf>
     858:	9b 01       	movw	r18, r22
     85a:	ac 01       	movw	r20, r24
     85c:	c8 01       	movw	r24, r16
     85e:	b7 01       	movw	r22, r14
     860:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <atan2>
     864:	dc 01       	movw	r26, r24
     866:	cb 01       	movw	r24, r22
     868:	bc 01       	movw	r22, r24
     86a:	cd 01       	movw	r24, r26
     86c:	21 ee       	ldi	r18, 0xE1	; 225
     86e:	3e e2       	ldi	r19, 0x2E	; 46
     870:	45 e6       	ldi	r20, 0x65	; 101
     872:	52 e4       	ldi	r21, 0x42	; 66
     874:	0e 94 67 09 	call	0x12ce	; 0x12ce <__mulsf3>
     878:	dc 01       	movw	r26, r24
     87a:	cb 01       	movw	r24, r22
     87c:	8f 87       	std	Y+15, r24	; 0x0f
     87e:	98 8b       	std	Y+16, r25	; 0x10
     880:	a9 8b       	std	Y+17, r26	; 0x11
     882:	ba 8b       	std	Y+18, r27	; 0x12
		//if you have an EAST declination use +, if you have a WEST declination use -
		//es, my declination is 1.73 positive
		//float declination = 1.73;
		//heading += declination;
		//check 360degree heading
		if(heading < 0)
     884:	6f 85       	ldd	r22, Y+15	; 0x0f
     886:	78 89       	ldd	r23, Y+16	; 0x10
     888:	89 89       	ldd	r24, Y+17	; 0x11
     88a:	9a 89       	ldd	r25, Y+18	; 0x12
     88c:	20 e0       	ldi	r18, 0x00	; 0
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	40 e0       	ldi	r20, 0x00	; 0
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	0e 94 6d 0b 	call	0x16da	; 0x16da <__ltsf2>
     898:	88 23       	and	r24, r24
     89a:	84 f4       	brge	.+32     	; 0x8bc <main+0x132>
			heading = 360 + heading;
     89c:	6f 85       	ldd	r22, Y+15	; 0x0f
     89e:	78 89       	ldd	r23, Y+16	; 0x10
     8a0:	89 89       	ldd	r24, Y+17	; 0x11
     8a2:	9a 89       	ldd	r25, Y+18	; 0x12
     8a4:	20 e0       	ldi	r18, 0x00	; 0
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	44 eb       	ldi	r20, 0xB4	; 180
     8aa:	53 e4       	ldi	r21, 0x43	; 67
     8ac:	0e 94 3a 09 	call	0x1274	; 0x1274 <__addsf3>
     8b0:	dc 01       	movw	r26, r24
     8b2:	cb 01       	movw	r24, r22
     8b4:	8f 87       	std	Y+15, r24	; 0x0f
     8b6:	98 8b       	std	Y+16, r25	; 0x10
     8b8:	a9 8b       	std	Y+17, r26	; 0x11
     8ba:	ba 8b       	std	Y+18, r27	; 0x12

		itoa(mxraw, itmp, 10); uart_puts(itmp); uart_putc(' ');
     8bc:	8b 89       	ldd	r24, Y+19	; 0x13
     8be:	9c 89       	ldd	r25, Y+20	; 0x14
     8c0:	9e 01       	movw	r18, r28
     8c2:	2b 5d       	subi	r18, 0xDB	; 219
     8c4:	3f 4f       	sbci	r19, 0xFF	; 255
     8c6:	b9 01       	movw	r22, r18
     8c8:	4a e0       	ldi	r20, 0x0A	; 10
     8ca:	50 e0       	ldi	r21, 0x00	; 0
     8cc:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <itoa>
     8d0:	ce 01       	movw	r24, r28
     8d2:	85 96       	adiw	r24, 0x25	; 37
     8d4:	0e 94 4c 07 	call	0xe98	; 0xe98 <uart_puts>
     8d8:	80 e2       	ldi	r24, 0x20	; 32
     8da:	0e 94 25 07 	call	0xe4a	; 0xe4a <uart_putc>
		itoa(myraw, itmp, 10); uart_puts(itmp); uart_putc(' ');
     8de:	8d 89       	ldd	r24, Y+21	; 0x15
     8e0:	9e 89       	ldd	r25, Y+22	; 0x16
     8e2:	9e 01       	movw	r18, r28
     8e4:	2b 5d       	subi	r18, 0xDB	; 219
     8e6:	3f 4f       	sbci	r19, 0xFF	; 255
     8e8:	b9 01       	movw	r22, r18
     8ea:	4a e0       	ldi	r20, 0x0A	; 10
     8ec:	50 e0       	ldi	r21, 0x00	; 0
     8ee:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <itoa>
     8f2:	ce 01       	movw	r24, r28
     8f4:	85 96       	adiw	r24, 0x25	; 37
     8f6:	0e 94 4c 07 	call	0xe98	; 0xe98 <uart_puts>
     8fa:	80 e2       	ldi	r24, 0x20	; 32
     8fc:	0e 94 25 07 	call	0xe4a	; 0xe4a <uart_putc>
		itoa(mzraw, itmp, 10); uart_puts(itmp); uart_putc(' ');
     900:	8f 89       	ldd	r24, Y+23	; 0x17
     902:	98 8d       	ldd	r25, Y+24	; 0x18
     904:	9e 01       	movw	r18, r28
     906:	2b 5d       	subi	r18, 0xDB	; 219
     908:	3f 4f       	sbci	r19, 0xFF	; 255
     90a:	b9 01       	movw	r22, r18
     90c:	4a e0       	ldi	r20, 0x0A	; 10
     90e:	50 e0       	ldi	r21, 0x00	; 0
     910:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <itoa>
     914:	ce 01       	movw	r24, r28
     916:	85 96       	adiw	r24, 0x25	; 37
     918:	0e 94 4c 07 	call	0xe98	; 0xe98 <uart_puts>
     91c:	80 e2       	ldi	r24, 0x20	; 32
     91e:	0e 94 25 07 	call	0xe4a	; 0xe4a <uart_putc>
		dtostrf(mx, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     922:	89 8d       	ldd	r24, Y+25	; 0x19
     924:	9a 8d       	ldd	r25, Y+26	; 0x1a
     926:	ab 8d       	ldd	r26, Y+27	; 0x1b
     928:	bc 8d       	ldd	r27, Y+28	; 0x1c
     92a:	fe 01       	movw	r30, r28
     92c:	b5 96       	adiw	r30, 0x25	; 37
     92e:	bc 01       	movw	r22, r24
     930:	cd 01       	movw	r24, r26
     932:	43 e0       	ldi	r20, 0x03	; 3
     934:	25 e0       	ldi	r18, 0x05	; 5
     936:	8f 01       	movw	r16, r30
     938:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <dtostrf>
     93c:	ce 01       	movw	r24, r28
     93e:	85 96       	adiw	r24, 0x25	; 37
     940:	0e 94 4c 07 	call	0xe98	; 0xe98 <uart_puts>
     944:	80 e2       	ldi	r24, 0x20	; 32
     946:	0e 94 25 07 	call	0xe4a	; 0xe4a <uart_putc>
		dtostrf(my, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     94a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     94c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     94e:	af 8d       	ldd	r26, Y+31	; 0x1f
     950:	b8 a1       	ldd	r27, Y+32	; 0x20
     952:	fe 01       	movw	r30, r28
     954:	b5 96       	adiw	r30, 0x25	; 37
     956:	bc 01       	movw	r22, r24
     958:	cd 01       	movw	r24, r26
     95a:	43 e0       	ldi	r20, 0x03	; 3
     95c:	25 e0       	ldi	r18, 0x05	; 5
     95e:	8f 01       	movw	r16, r30
     960:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <dtostrf>
     964:	ce 01       	movw	r24, r28
     966:	85 96       	adiw	r24, 0x25	; 37
     968:	0e 94 4c 07 	call	0xe98	; 0xe98 <uart_puts>
     96c:	80 e2       	ldi	r24, 0x20	; 32
     96e:	0e 94 25 07 	call	0xe4a	; 0xe4a <uart_putc>
		dtostrf(mz, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     972:	89 a1       	ldd	r24, Y+33	; 0x21
     974:	9a a1       	ldd	r25, Y+34	; 0x22
     976:	ab a1       	ldd	r26, Y+35	; 0x23
     978:	bc a1       	ldd	r27, Y+36	; 0x24
     97a:	fe 01       	movw	r30, r28
     97c:	b5 96       	adiw	r30, 0x25	; 37
     97e:	bc 01       	movw	r22, r24
     980:	cd 01       	movw	r24, r26
     982:	43 e0       	ldi	r20, 0x03	; 3
     984:	25 e0       	ldi	r18, 0x05	; 5
     986:	8f 01       	movw	r16, r30
     988:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <dtostrf>
     98c:	ce 01       	movw	r24, r28
     98e:	85 96       	adiw	r24, 0x25	; 37
     990:	0e 94 4c 07 	call	0xe98	; 0xe98 <uart_puts>
     994:	80 e2       	ldi	r24, 0x20	; 32
     996:	0e 94 25 07 	call	0xe4a	; 0xe4a <uart_putc>
		dtostrf(heading, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     99a:	8f 85       	ldd	r24, Y+15	; 0x0f
     99c:	98 89       	ldd	r25, Y+16	; 0x10
     99e:	a9 89       	ldd	r26, Y+17	; 0x11
     9a0:	ba 89       	ldd	r27, Y+18	; 0x12
     9a2:	fe 01       	movw	r30, r28
     9a4:	b5 96       	adiw	r30, 0x25	; 37
     9a6:	bc 01       	movw	r22, r24
     9a8:	cd 01       	movw	r24, r26
     9aa:	43 e0       	ldi	r20, 0x03	; 3
     9ac:	25 e0       	ldi	r18, 0x05	; 5
     9ae:	8f 01       	movw	r16, r30
     9b0:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <dtostrf>
     9b4:	ce 01       	movw	r24, r28
     9b6:	85 96       	adiw	r24, 0x25	; 37
     9b8:	0e 94 4c 07 	call	0xe98	; 0xe98 <uart_puts>
     9bc:	80 e2       	ldi	r24, 0x20	; 32
     9be:	0e 94 25 07 	call	0xe4a	; 0xe4a <uart_putc>
		uart_puts("\r\n");
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	91 e0       	ldi	r25, 0x01	; 1
     9c6:	0e 94 4c 07 	call	0xe98	; 0xe98 <uart_puts>
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	aa ef       	ldi	r26, 0xFA	; 250
     9d0:	b3 e4       	ldi	r27, 0x43	; 67
     9d2:	8b 87       	std	Y+11, r24	; 0x0b
     9d4:	9c 87       	std	Y+12, r25	; 0x0c
     9d6:	ad 87       	std	Y+13, r26	; 0x0d
     9d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     9da:	6b 85       	ldd	r22, Y+11	; 0x0b
     9dc:	7c 85       	ldd	r23, Y+12	; 0x0c
     9de:	8d 85       	ldd	r24, Y+13	; 0x0d
     9e0:	9e 85       	ldd	r25, Y+14	; 0x0e
     9e2:	20 e0       	ldi	r18, 0x00	; 0
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	4a ef       	ldi	r20, 0xFA	; 250
     9e8:	54 e4       	ldi	r21, 0x44	; 68
     9ea:	0e 94 67 09 	call	0x12ce	; 0x12ce <__mulsf3>
     9ee:	dc 01       	movw	r26, r24
     9f0:	cb 01       	movw	r24, r22
     9f2:	8f 83       	std	Y+7, r24	; 0x07
     9f4:	98 87       	std	Y+8, r25	; 0x08
     9f6:	a9 87       	std	Y+9, r26	; 0x09
     9f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     9fa:	6f 81       	ldd	r22, Y+7	; 0x07
     9fc:	78 85       	ldd	r23, Y+8	; 0x08
     9fe:	89 85       	ldd	r24, Y+9	; 0x09
     a00:	9a 85       	ldd	r25, Y+10	; 0x0a
     a02:	20 e0       	ldi	r18, 0x00	; 0
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	40 e8       	ldi	r20, 0x80	; 128
     a08:	5f e3       	ldi	r21, 0x3F	; 63
     a0a:	0e 94 6d 0b 	call	0x16da	; 0x16da <__ltsf2>
     a0e:	88 23       	and	r24, r24
     a10:	2c f4       	brge	.+10     	; 0xa1c <main+0x292>
		__ticks = 1;
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	9e 83       	std	Y+6, r25	; 0x06
     a18:	8d 83       	std	Y+5, r24	; 0x05
     a1a:	3f c0       	rjmp	.+126    	; 0xa9a <main+0x310>
	else if (__tmp > 65535)
     a1c:	6f 81       	ldd	r22, Y+7	; 0x07
     a1e:	78 85       	ldd	r23, Y+8	; 0x08
     a20:	89 85       	ldd	r24, Y+9	; 0x09
     a22:	9a 85       	ldd	r25, Y+10	; 0x0a
     a24:	20 e0       	ldi	r18, 0x00	; 0
     a26:	3f ef       	ldi	r19, 0xFF	; 255
     a28:	4f e7       	ldi	r20, 0x7F	; 127
     a2a:	57 e4       	ldi	r21, 0x47	; 71
     a2c:	0e 94 0d 0b 	call	0x161a	; 0x161a <__gtsf2>
     a30:	18 16       	cp	r1, r24
     a32:	4c f5       	brge	.+82     	; 0xa86 <main+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a34:	6b 85       	ldd	r22, Y+11	; 0x0b
     a36:	7c 85       	ldd	r23, Y+12	; 0x0c
     a38:	8d 85       	ldd	r24, Y+13	; 0x0d
     a3a:	9e 85       	ldd	r25, Y+14	; 0x0e
     a3c:	20 e0       	ldi	r18, 0x00	; 0
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	40 e2       	ldi	r20, 0x20	; 32
     a42:	51 e4       	ldi	r21, 0x41	; 65
     a44:	0e 94 67 09 	call	0x12ce	; 0x12ce <__mulsf3>
     a48:	dc 01       	movw	r26, r24
     a4a:	cb 01       	movw	r24, r22
     a4c:	bc 01       	movw	r22, r24
     a4e:	cd 01       	movw	r24, r26
     a50:	0e 94 91 07 	call	0xf22	; 0xf22 <__fixunssfsi>
     a54:	dc 01       	movw	r26, r24
     a56:	cb 01       	movw	r24, r22
     a58:	9e 83       	std	Y+6, r25	; 0x06
     a5a:	8d 83       	std	Y+5, r24	; 0x05
     a5c:	0f c0       	rjmp	.+30     	; 0xa7c <main+0x2f2>
     a5e:	88 ec       	ldi	r24, 0xC8	; 200
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	9c 83       	std	Y+4, r25	; 0x04
     a64:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a66:	8b 81       	ldd	r24, Y+3	; 0x03
     a68:	9c 81       	ldd	r25, Y+4	; 0x04
     a6a:	01 97       	sbiw	r24, 0x01	; 1
     a6c:	f1 f7       	brne	.-4      	; 0xa6a <main+0x2e0>
     a6e:	9c 83       	std	Y+4, r25	; 0x04
     a70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a72:	8d 81       	ldd	r24, Y+5	; 0x05
     a74:	9e 81       	ldd	r25, Y+6	; 0x06
     a76:	01 97       	sbiw	r24, 0x01	; 1
     a78:	9e 83       	std	Y+6, r25	; 0x06
     a7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a7c:	8d 81       	ldd	r24, Y+5	; 0x05
     a7e:	9e 81       	ldd	r25, Y+6	; 0x06
     a80:	00 97       	sbiw	r24, 0x00	; 0
     a82:	69 f7       	brne	.-38     	; 0xa5e <main+0x2d4>
     a84:	b5 ce       	rjmp	.-662    	; 0x7f0 <main+0x66>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a86:	6f 81       	ldd	r22, Y+7	; 0x07
     a88:	78 85       	ldd	r23, Y+8	; 0x08
     a8a:	89 85       	ldd	r24, Y+9	; 0x09
     a8c:	9a 85       	ldd	r25, Y+10	; 0x0a
     a8e:	0e 94 91 07 	call	0xf22	; 0xf22 <__fixunssfsi>
     a92:	dc 01       	movw	r26, r24
     a94:	cb 01       	movw	r24, r22
     a96:	9e 83       	std	Y+6, r25	; 0x06
     a98:	8d 83       	std	Y+5, r24	; 0x05
     a9a:	8d 81       	ldd	r24, Y+5	; 0x05
     a9c:	9e 81       	ldd	r25, Y+6	; 0x06
     a9e:	9a 83       	std	Y+2, r25	; 0x02
     aa0:	89 83       	std	Y+1, r24	; 0x01
     aa2:	89 81       	ldd	r24, Y+1	; 0x01
     aa4:	9a 81       	ldd	r25, Y+2	; 0x02
     aa6:	01 97       	sbiw	r24, 0x01	; 1
     aa8:	f1 f7       	brne	.-4      	; 0xaa6 <main+0x31c>
     aaa:	9a 83       	std	Y+2, r25	; 0x02
     aac:	89 83       	std	Y+1, r24	; 0x01
     aae:	a0 ce       	rjmp	.-704    	; 0x7f0 <main+0x66>

00000ab0 <i2c_init>:

/*************************************************************************
 Initialization of the I2C bus interface. Need to be called only once
*************************************************************************/
void i2c_init(void)
{
     ab0:	df 93       	push	r29
     ab2:	cf 93       	push	r28
     ab4:	cd b7       	in	r28, 0x3d	; 61
     ab6:	de b7       	in	r29, 0x3e	; 62
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
     ab8:	e9 eb       	ldi	r30, 0xB9	; 185
     aba:	f0 e0       	ldi	r31, 0x00	; 0
     abc:	10 82       	st	Z, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
     abe:	e8 eb       	ldi	r30, 0xB8	; 184
     ac0:	f0 e0       	ldi	r31, 0x00	; 0
     ac2:	88 e8       	ldi	r24, 0x88	; 136
     ac4:	80 83       	st	Z, r24

}/* i2c_init */
     ac6:	cf 91       	pop	r28
     ac8:	df 91       	pop	r29
     aca:	08 95       	ret

00000acc <i2c_start>:
/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
{
     acc:	df 93       	push	r29
     ace:	cf 93       	push	r28
     ad0:	00 d0       	rcall	.+0      	; 0xad2 <i2c_start+0x6>
     ad2:	0f 92       	push	r0
     ad4:	cd b7       	in	r28, 0x3d	; 61
     ad6:	de b7       	in	r29, 0x3e	; 62
     ad8:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     ada:	ec eb       	ldi	r30, 0xBC	; 188
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	84 ea       	ldi	r24, 0xA4	; 164
     ae0:	80 83       	st	Z, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     ae2:	ec eb       	ldi	r30, 0xBC	; 188
     ae4:	f0 e0       	ldi	r31, 0x00	; 0
     ae6:	80 81       	ld	r24, Z
     ae8:	88 23       	and	r24, r24
     aea:	dc f7       	brge	.-10     	; 0xae2 <i2c_start+0x16>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     aec:	e9 eb       	ldi	r30, 0xB9	; 185
     aee:	f0 e0       	ldi	r31, 0x00	; 0
     af0:	80 81       	ld	r24, Z
     af2:	88 7f       	andi	r24, 0xF8	; 248
     af4:	89 83       	std	Y+1, r24	; 0x01
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     af6:	89 81       	ldd	r24, Y+1	; 0x01
     af8:	88 30       	cpi	r24, 0x08	; 8
     afa:	31 f0       	breq	.+12     	; 0xb08 <__stack+0x9>
     afc:	89 81       	ldd	r24, Y+1	; 0x01
     afe:	80 31       	cpi	r24, 0x10	; 16
     b00:	19 f0       	breq	.+6      	; 0xb08 <__stack+0x9>
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	8b 83       	std	Y+3, r24	; 0x03
     b06:	1c c0       	rjmp	.+56     	; 0xb40 <__stack+0x41>

	// send device address
	TWDR = address;
     b08:	eb eb       	ldi	r30, 0xBB	; 187
     b0a:	f0 e0       	ldi	r31, 0x00	; 0
     b0c:	8a 81       	ldd	r24, Y+2	; 0x02
     b0e:	80 83       	st	Z, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     b10:	ec eb       	ldi	r30, 0xBC	; 188
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	84 e8       	ldi	r24, 0x84	; 132
     b16:	80 83       	st	Z, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     b18:	ec eb       	ldi	r30, 0xBC	; 188
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	80 81       	ld	r24, Z
     b1e:	88 23       	and	r24, r24
     b20:	dc f7       	brge	.-10     	; 0xb18 <__stack+0x19>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     b22:	e9 eb       	ldi	r30, 0xB9	; 185
     b24:	f0 e0       	ldi	r31, 0x00	; 0
     b26:	80 81       	ld	r24, Z
     b28:	88 7f       	andi	r24, 0xF8	; 248
     b2a:	89 83       	std	Y+1, r24	; 0x01
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     b2c:	89 81       	ldd	r24, Y+1	; 0x01
     b2e:	88 31       	cpi	r24, 0x18	; 24
     b30:	31 f0       	breq	.+12     	; 0xb3e <__stack+0x3f>
     b32:	89 81       	ldd	r24, Y+1	; 0x01
     b34:	80 34       	cpi	r24, 0x40	; 64
     b36:	19 f0       	breq	.+6      	; 0xb3e <__stack+0x3f>
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	8b 83       	std	Y+3, r24	; 0x03
     b3c:	01 c0       	rjmp	.+2      	; 0xb40 <__stack+0x41>

	return 0;
     b3e:	1b 82       	std	Y+3, r1	; 0x03
     b40:	8b 81       	ldd	r24, Y+3	; 0x03

}/* i2c_start */
     b42:	0f 90       	pop	r0
     b44:	0f 90       	pop	r0
     b46:	0f 90       	pop	r0
     b48:	cf 91       	pop	r28
     b4a:	df 91       	pop	r29
     b4c:	08 95       	ret

00000b4e <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
     b4e:	df 93       	push	r29
     b50:	cf 93       	push	r28
     b52:	00 d0       	rcall	.+0      	; 0xb54 <i2c_start_wait+0x6>
     b54:	cd b7       	in	r28, 0x3d	; 61
     b56:	de b7       	in	r29, 0x3e	; 62
     b58:	8a 83       	std	Y+2, r24	; 0x02


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     b5a:	ec eb       	ldi	r30, 0xBC	; 188
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	84 ea       	ldi	r24, 0xA4	; 164
     b60:	80 83       	st	Z, r24
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     b62:	ec eb       	ldi	r30, 0xBC	; 188
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	80 81       	ld	r24, Z
     b68:	88 23       	and	r24, r24
     b6a:	dc f7       	brge	.-10     	; 0xb62 <i2c_start_wait+0x14>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     b6c:	e9 eb       	ldi	r30, 0xB9	; 185
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	80 81       	ld	r24, Z
     b72:	88 7f       	andi	r24, 0xF8	; 248
     b74:	89 83       	std	Y+1, r24	; 0x01
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
     b76:	89 81       	ldd	r24, Y+1	; 0x01
     b78:	88 30       	cpi	r24, 0x08	; 8
     b7a:	19 f0       	breq	.+6      	; 0xb82 <i2c_start_wait+0x34>
     b7c:	89 81       	ldd	r24, Y+1	; 0x01
     b7e:	80 31       	cpi	r24, 0x10	; 16
     b80:	61 f7       	brne	.-40     	; 0xb5a <i2c_start_wait+0xc>
    
    	// send device address
    	TWDR = address;
     b82:	eb eb       	ldi	r30, 0xBB	; 187
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	8a 81       	ldd	r24, Y+2	; 0x02
     b88:	80 83       	st	Z, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
     b8a:	ec eb       	ldi	r30, 0xBC	; 188
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	84 e8       	ldi	r24, 0x84	; 132
     b90:	80 83       	st	Z, r24
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     b92:	ec eb       	ldi	r30, 0xBC	; 188
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	88 23       	and	r24, r24
     b9a:	dc f7       	brge	.-10     	; 0xb92 <i2c_start_wait+0x44>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     b9c:	e9 eb       	ldi	r30, 0xB9	; 185
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	80 81       	ld	r24, Z
     ba2:	88 7f       	andi	r24, 0xF8	; 248
     ba4:	89 83       	std	Y+1, r24	; 0x01
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
     ba6:	89 81       	ldd	r24, Y+1	; 0x01
     ba8:	80 32       	cpi	r24, 0x20	; 32
     baa:	19 f0       	breq	.+6      	; 0xbb2 <i2c_start_wait+0x64>
     bac:	89 81       	ldd	r24, Y+1	; 0x01
     bae:	88 35       	cpi	r24, 0x58	; 88
     bb0:	71 f4       	brne	.+28     	; 0xbce <i2c_start_wait+0x80>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     bb2:	ec eb       	ldi	r30, 0xBC	; 188
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	84 e9       	ldi	r24, 0x94	; 148
     bb8:	80 83       	st	Z, r24
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
     bba:	ec eb       	ldi	r30, 0xBC	; 188
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	80 81       	ld	r24, Z
     bc0:	88 2f       	mov	r24, r24
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	80 71       	andi	r24, 0x10	; 16
     bc6:	90 70       	andi	r25, 0x00	; 0
     bc8:	00 97       	sbiw	r24, 0x00	; 0
     bca:	b9 f7       	brne	.-18     	; 0xbba <i2c_start_wait+0x6c>
     bcc:	c6 cf       	rjmp	.-116    	; 0xb5a <i2c_start_wait+0xc>
	        
    	    continue;
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
     }
     bce:	0f 90       	pop	r0
     bd0:	0f 90       	pop	r0
     bd2:	cf 91       	pop	r28
     bd4:	df 91       	pop	r29
     bd6:	08 95       	ret

00000bd8 <i2c_rep_start>:
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
     bd8:	df 93       	push	r29
     bda:	cf 93       	push	r28
     bdc:	0f 92       	push	r0
     bde:	cd b7       	in	r28, 0x3d	; 61
     be0:	de b7       	in	r29, 0x3e	; 62
     be2:	89 83       	std	Y+1, r24	; 0x01
    return i2c_start( address );
     be4:	89 81       	ldd	r24, Y+1	; 0x01
     be6:	0e 94 66 05 	call	0xacc	; 0xacc <i2c_start>

}/* i2c_rep_start */
     bea:	0f 90       	pop	r0
     bec:	cf 91       	pop	r28
     bee:	df 91       	pop	r29
     bf0:	08 95       	ret

00000bf2 <i2c_stop>:

/*************************************************************************
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
     bf2:	df 93       	push	r29
     bf4:	cf 93       	push	r28
     bf6:	cd b7       	in	r28, 0x3d	; 61
     bf8:	de b7       	in	r29, 0x3e	; 62
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     bfa:	ec eb       	ldi	r30, 0xBC	; 188
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	84 e9       	ldi	r24, 0x94	; 148
     c00:	80 83       	st	Z, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     c02:	ec eb       	ldi	r30, 0xBC	; 188
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	88 2f       	mov	r24, r24
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	80 71       	andi	r24, 0x10	; 16
     c0e:	90 70       	andi	r25, 0x00	; 0
     c10:	00 97       	sbiw	r24, 0x00	; 0
     c12:	b9 f7       	brne	.-18     	; 0xc02 <i2c_stop+0x10>

}/* i2c_stop */
     c14:	cf 91       	pop	r28
     c16:	df 91       	pop	r29
     c18:	08 95       	ret

00000c1a <i2c_write>:
  Input:    byte to be transfered
  Return:   0 write successful 
            1 write failed
*************************************************************************/
unsigned char i2c_write( unsigned char data )
{	
     c1a:	df 93       	push	r29
     c1c:	cf 93       	push	r28
     c1e:	00 d0       	rcall	.+0      	; 0xc20 <i2c_write+0x6>
     c20:	0f 92       	push	r0
     c22:	cd b7       	in	r28, 0x3d	; 61
     c24:	de b7       	in	r29, 0x3e	; 62
     c26:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     c28:	eb eb       	ldi	r30, 0xBB	; 187
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	8a 81       	ldd	r24, Y+2	; 0x02
     c2e:	80 83       	st	Z, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     c30:	ec eb       	ldi	r30, 0xBC	; 188
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	84 e8       	ldi	r24, 0x84	; 132
     c36:	80 83       	st	Z, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     c38:	ec eb       	ldi	r30, 0xBC	; 188
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	88 23       	and	r24, r24
     c40:	dc f7       	brge	.-10     	; 0xc38 <i2c_write+0x1e>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     c42:	e9 eb       	ldi	r30, 0xB9	; 185
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	80 81       	ld	r24, Z
     c48:	88 7f       	andi	r24, 0xF8	; 248
     c4a:	89 83       	std	Y+1, r24	; 0x01
	if( twst != TW_MT_DATA_ACK) return 1;
     c4c:	89 81       	ldd	r24, Y+1	; 0x01
     c4e:	88 32       	cpi	r24, 0x28	; 40
     c50:	19 f0       	breq	.+6      	; 0xc58 <i2c_write+0x3e>
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	8b 83       	std	Y+3, r24	; 0x03
     c56:	01 c0       	rjmp	.+2      	; 0xc5a <i2c_write+0x40>
	return 0;
     c58:	1b 82       	std	Y+3, r1	; 0x03
     c5a:	8b 81       	ldd	r24, Y+3	; 0x03

}/* i2c_write */
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	cf 91       	pop	r28
     c64:	df 91       	pop	r29
     c66:	08 95       	ret

00000c68 <i2c_readAck>:
 Read one byte from the I2C device, request more data from device 
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
     c68:	df 93       	push	r29
     c6a:	cf 93       	push	r28
     c6c:	cd b7       	in	r28, 0x3d	; 61
     c6e:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     c70:	ec eb       	ldi	r30, 0xBC	; 188
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	84 ec       	ldi	r24, 0xC4	; 196
     c76:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));    
     c78:	ec eb       	ldi	r30, 0xBC	; 188
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	88 23       	and	r24, r24
     c80:	dc f7       	brge	.-10     	; 0xc78 <i2c_readAck+0x10>

    return TWDR;
     c82:	eb eb       	ldi	r30, 0xBB	; 187
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z

}/* i2c_readAck */
     c88:	cf 91       	pop	r28
     c8a:	df 91       	pop	r29
     c8c:	08 95       	ret

00000c8e <i2c_readNak>:
 Read one byte from the I2C device, read is followed by a stop condition 
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN);
     c96:	ec eb       	ldi	r30, 0xBC	; 188
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	84 e8       	ldi	r24, 0x84	; 132
     c9c:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));
     c9e:	ec eb       	ldi	r30, 0xBC	; 188
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	88 23       	and	r24, r24
     ca6:	dc f7       	brge	.-10     	; 0xc9e <i2c_readNak+0x10>
	
    return TWDR;
     ca8:	eb eb       	ldi	r30, 0xBB	; 187
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z

}/* i2c_readNak */
     cae:	cf 91       	pop	r28
     cb0:	df 91       	pop	r29
     cb2:	08 95       	ret

00000cb4 <__vector_25>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
     cb4:	1f 92       	push	r1
     cb6:	0f 92       	push	r0
     cb8:	0f b6       	in	r0, 0x3f	; 63
     cba:	0f 92       	push	r0
     cbc:	11 24       	eor	r1, r1
     cbe:	8f 93       	push	r24
     cc0:	9f 93       	push	r25
     cc2:	ef 93       	push	r30
     cc4:	ff 93       	push	r31
     cc6:	df 93       	push	r29
     cc8:	cf 93       	push	r28
     cca:	00 d0       	rcall	.+0      	; 0xccc <__vector_25+0x18>
     ccc:	00 d0       	rcall	.+0      	; 0xcce <__vector_25+0x1a>
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
     cd2:	e8 ec       	ldi	r30, 0xC8	; 200
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	8a 83       	std	Y+2, r24	; 0x02
    data = UART0_DATA;
     cda:	ee ec       	ldi	r30, 0xCE	; 206
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	8b 83       	std	Y+3, r24	; 0x03
#elif defined( AT90USB_USART )
    lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
     ce2:	80 91 52 02 	lds	r24, 0x0252
     ce6:	8f 5f       	subi	r24, 0xFF	; 255
     ce8:	8f 71       	andi	r24, 0x1F	; 31
     cea:	8c 83       	std	Y+4, r24	; 0x04
    
    if ( tmphead == UART_RxTail ) {
     cec:	90 91 53 02 	lds	r25, 0x0253
     cf0:	8c 81       	ldd	r24, Y+4	; 0x04
     cf2:	89 17       	cp	r24, r25
     cf4:	19 f4       	brne	.+6      	; 0xcfc <__vector_25+0x48>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
     cf6:	82 e0       	ldi	r24, 0x02	; 2
     cf8:	89 83       	std	Y+1, r24	; 0x01
     cfa:	0b c0       	rjmp	.+22     	; 0xd12 <__vector_25+0x5e>
    }else{
        /* store new index */
        UART_RxHead = tmphead;
     cfc:	8c 81       	ldd	r24, Y+4	; 0x04
     cfe:	80 93 52 02 	sts	0x0252, r24
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
     d02:	8c 81       	ldd	r24, Y+4	; 0x04
     d04:	88 2f       	mov	r24, r24
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	fc 01       	movw	r30, r24
     d0a:	e0 5d       	subi	r30, 0xD0	; 208
     d0c:	fd 4f       	sbci	r31, 0xFD	; 253
     d0e:	8b 81       	ldd	r24, Y+3	; 0x03
     d10:	80 83       	st	Z, r24
    }
    UART_LastRxError |= lastRxError;   
     d12:	80 91 54 02 	lds	r24, 0x0254
     d16:	99 81       	ldd	r25, Y+1	; 0x01
     d18:	89 2b       	or	r24, r25
     d1a:	80 93 54 02 	sts	0x0254, r24
}
     d1e:	0f 90       	pop	r0
     d20:	0f 90       	pop	r0
     d22:	0f 90       	pop	r0
     d24:	0f 90       	pop	r0
     d26:	cf 91       	pop	r28
     d28:	df 91       	pop	r29
     d2a:	ff 91       	pop	r31
     d2c:	ef 91       	pop	r30
     d2e:	9f 91       	pop	r25
     d30:	8f 91       	pop	r24
     d32:	0f 90       	pop	r0
     d34:	0f be       	out	0x3f, r0	; 63
     d36:	0f 90       	pop	r0
     d38:	1f 90       	pop	r1
     d3a:	18 95       	reti

00000d3c <__vector_26>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
     d3c:	1f 92       	push	r1
     d3e:	0f 92       	push	r0
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	0f 92       	push	r0
     d44:	11 24       	eor	r1, r1
     d46:	8f 93       	push	r24
     d48:	9f 93       	push	r25
     d4a:	af 93       	push	r26
     d4c:	bf 93       	push	r27
     d4e:	ef 93       	push	r30
     d50:	ff 93       	push	r31
     d52:	df 93       	push	r29
     d54:	cf 93       	push	r28
     d56:	0f 92       	push	r0
     d58:	cd b7       	in	r28, 0x3d	; 61
     d5a:	de b7       	in	r29, 0x3e	; 62
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
     d5c:	90 91 50 02 	lds	r25, 0x0250
     d60:	80 91 51 02 	lds	r24, 0x0251
     d64:	98 17       	cp	r25, r24
     d66:	99 f0       	breq	.+38     	; 0xd8e <__vector_26+0x52>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
     d68:	80 91 51 02 	lds	r24, 0x0251
     d6c:	8f 5f       	subi	r24, 0xFF	; 255
     d6e:	8f 71       	andi	r24, 0x1F	; 31
     d70:	89 83       	std	Y+1, r24	; 0x01
        UART_TxTail = tmptail;
     d72:	89 81       	ldd	r24, Y+1	; 0x01
     d74:	80 93 51 02 	sts	0x0251, r24
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
     d78:	ae ec       	ldi	r26, 0xCE	; 206
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	89 81       	ldd	r24, Y+1	; 0x01
     d7e:	88 2f       	mov	r24, r24
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	fc 01       	movw	r30, r24
     d84:	e0 5f       	subi	r30, 0xF0	; 240
     d86:	fd 4f       	sbci	r31, 0xFD	; 253
     d88:	80 81       	ld	r24, Z
     d8a:	8c 93       	st	X, r24
     d8c:	07 c0       	rjmp	.+14     	; 0xd9c <__vector_26+0x60>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
     d8e:	a9 ec       	ldi	r26, 0xC9	; 201
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e9 ec       	ldi	r30, 0xC9	; 201
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	8f 7d       	andi	r24, 0xDF	; 223
     d9a:	8c 93       	st	X, r24
    }
}
     d9c:	0f 90       	pop	r0
     d9e:	cf 91       	pop	r28
     da0:	df 91       	pop	r29
     da2:	ff 91       	pop	r31
     da4:	ef 91       	pop	r30
     da6:	bf 91       	pop	r27
     da8:	af 91       	pop	r26
     daa:	9f 91       	pop	r25
     dac:	8f 91       	pop	r24
     dae:	0f 90       	pop	r0
     db0:	0f be       	out	0x3f, r0	; 63
     db2:	0f 90       	pop	r0
     db4:	1f 90       	pop	r1
     db6:	18 95       	reti

00000db8 <uart_init>:
Purpose:  initialize UART and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
     db8:	df 93       	push	r29
     dba:	cf 93       	push	r28
     dbc:	00 d0       	rcall	.+0      	; 0xdbe <uart_init+0x6>
     dbe:	cd b7       	in	r28, 0x3d	; 61
     dc0:	de b7       	in	r29, 0x3e	; 62
     dc2:	9a 83       	std	Y+2, r25	; 0x02
     dc4:	89 83       	std	Y+1, r24	; 0x01
    UART_TxHead = 0;
     dc6:	10 92 50 02 	sts	0x0250, r1
    UART_TxTail = 0;
     dca:	10 92 51 02 	sts	0x0251, r1
    UART_RxHead = 0;
     dce:	10 92 52 02 	sts	0x0252, r1
    UART_RxTail = 0;
     dd2:	10 92 53 02 	sts	0x0253, r1
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);
#endif

}/* uart_init */
     dd6:	0f 90       	pop	r0
     dd8:	0f 90       	pop	r0
     dda:	cf 91       	pop	r28
     ddc:	df 91       	pop	r29
     dde:	08 95       	ret

00000de0 <uart_getc>:
Purpose:  return byte from ringbuffer  
Returns:  lower byte:  received byte from ringbuffer
          higher byte: last receive error
**************************************************************************/
unsigned int uart_getc(void)
{    
     de0:	df 93       	push	r29
     de2:	cf 93       	push	r28
     de4:	00 d0       	rcall	.+0      	; 0xde6 <uart_getc+0x6>
     de6:	00 d0       	rcall	.+0      	; 0xde8 <uart_getc+0x8>
     de8:	0f 92       	push	r0
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
     dee:	90 91 52 02 	lds	r25, 0x0252
     df2:	80 91 53 02 	lds	r24, 0x0253
     df6:	98 17       	cp	r25, r24
     df8:	29 f4       	brne	.+10     	; 0xe04 <uart_getc+0x24>
        return UART_NO_DATA;   /* no data available */
     dfa:	20 e0       	ldi	r18, 0x00	; 0
     dfc:	31 e0       	ldi	r19, 0x01	; 1
     dfe:	3d 83       	std	Y+5, r19	; 0x05
     e00:	2c 83       	std	Y+4, r18	; 0x04
     e02:	19 c0       	rjmp	.+50     	; 0xe36 <uart_getc+0x56>
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
     e04:	80 91 53 02 	lds	r24, 0x0253
     e08:	8f 5f       	subi	r24, 0xFF	; 255
     e0a:	8f 71       	andi	r24, 0x1F	; 31
     e0c:	8a 83       	std	Y+2, r24	; 0x02
    UART_RxTail = tmptail; 
     e0e:	8a 81       	ldd	r24, Y+2	; 0x02
     e10:	80 93 53 02 	sts	0x0253, r24
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
     e14:	8a 81       	ldd	r24, Y+2	; 0x02
     e16:	88 2f       	mov	r24, r24
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	fc 01       	movw	r30, r24
     e1c:	e0 5d       	subi	r30, 0xD0	; 208
     e1e:	fd 4f       	sbci	r31, 0xFD	; 253
     e20:	80 81       	ld	r24, Z
     e22:	89 83       	std	Y+1, r24	; 0x01
    
    data = (UART_LastRxError << 8) + data;
     e24:	30 91 54 02 	lds	r19, 0x0254
    UART_LastRxError = 0;
     e28:	10 92 54 02 	sts	0x0254, r1
    return data;
     e2c:	89 81       	ldd	r24, Y+1	; 0x01
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	3d 83       	std	Y+5, r19	; 0x05
     e34:	2c 83       	std	Y+4, r18	; 0x04
     e36:	8c 81       	ldd	r24, Y+4	; 0x04
     e38:	9d 81       	ldd	r25, Y+5	; 0x05

}/* uart_getc */
     e3a:	0f 90       	pop	r0
     e3c:	0f 90       	pop	r0
     e3e:	0f 90       	pop	r0
     e40:	0f 90       	pop	r0
     e42:	0f 90       	pop	r0
     e44:	cf 91       	pop	r28
     e46:	df 91       	pop	r29
     e48:	08 95       	ret

00000e4a <uart_putc>:
Purpose:  write byte to ringbuffer for transmitting via UART
Input:    byte to be transmitted
Returns:  none          
**************************************************************************/
void uart_putc(unsigned char data)
{
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	00 d0       	rcall	.+0      	; 0xe50 <uart_putc+0x6>
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
     e54:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
     e56:	80 91 50 02 	lds	r24, 0x0250
     e5a:	8f 5f       	subi	r24, 0xFF	; 255
     e5c:	8f 71       	andi	r24, 0x1F	; 31
     e5e:	89 83       	std	Y+1, r24	; 0x01
    
    while ( tmphead == UART_TxTail ){
     e60:	90 91 51 02 	lds	r25, 0x0251
     e64:	89 81       	ldd	r24, Y+1	; 0x01
     e66:	89 17       	cp	r24, r25
     e68:	d9 f3       	breq	.-10     	; 0xe60 <uart_putc+0x16>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
     e6a:	89 81       	ldd	r24, Y+1	; 0x01
     e6c:	88 2f       	mov	r24, r24
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	fc 01       	movw	r30, r24
     e72:	e0 5f       	subi	r30, 0xF0	; 240
     e74:	fd 4f       	sbci	r31, 0xFD	; 253
     e76:	8a 81       	ldd	r24, Y+2	; 0x02
     e78:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	80 93 50 02 	sts	0x0250, r24

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
     e80:	a9 ec       	ldi	r26, 0xC9	; 201
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	e9 ec       	ldi	r30, 0xC9	; 201
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	80 62       	ori	r24, 0x20	; 32
     e8c:	8c 93       	st	X, r24

}/* uart_putc */
     e8e:	0f 90       	pop	r0
     e90:	0f 90       	pop	r0
     e92:	cf 91       	pop	r28
     e94:	df 91       	pop	r29
     e96:	08 95       	ret

00000e98 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
     e98:	df 93       	push	r29
     e9a:	cf 93       	push	r28
     e9c:	00 d0       	rcall	.+0      	; 0xe9e <uart_puts+0x6>
     e9e:	cd b7       	in	r28, 0x3d	; 61
     ea0:	de b7       	in	r29, 0x3e	; 62
     ea2:	9a 83       	std	Y+2, r25	; 0x02
     ea4:	89 83       	std	Y+1, r24	; 0x01
     ea6:	0b c0       	rjmp	.+22     	; 0xebe <uart_puts+0x26>
    while (*s) 
      uart_putc(*s++);
     ea8:	e9 81       	ldd	r30, Y+1	; 0x01
     eaa:	fa 81       	ldd	r31, Y+2	; 0x02
     eac:	20 81       	ld	r18, Z
     eae:	89 81       	ldd	r24, Y+1	; 0x01
     eb0:	9a 81       	ldd	r25, Y+2	; 0x02
     eb2:	01 96       	adiw	r24, 0x01	; 1
     eb4:	9a 83       	std	Y+2, r25	; 0x02
     eb6:	89 83       	std	Y+1, r24	; 0x01
     eb8:	82 2f       	mov	r24, r18
     eba:	0e 94 25 07 	call	0xe4a	; 0xe4a <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
     ebe:	e9 81       	ldd	r30, Y+1	; 0x01
     ec0:	fa 81       	ldd	r31, Y+2	; 0x02
     ec2:	80 81       	ld	r24, Z
     ec4:	88 23       	and	r24, r24
     ec6:	81 f7       	brne	.-32     	; 0xea8 <uart_puts+0x10>
      uart_putc(*s++);

}/* uart_puts */
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	cf 91       	pop	r28
     ece:	df 91       	pop	r29
     ed0:	08 95       	ret

00000ed2 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
     ed2:	df 93       	push	r29
     ed4:	cf 93       	push	r28
     ed6:	00 d0       	rcall	.+0      	; 0xed8 <uart_puts_p+0x6>
     ed8:	00 d0       	rcall	.+0      	; 0xeda <uart_puts_p+0x8>
     eda:	00 d0       	rcall	.+0      	; 0xedc <uart_puts_p+0xa>
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
     ee0:	9d 83       	std	Y+5, r25	; 0x05
     ee2:	8c 83       	std	Y+4, r24	; 0x04
     ee4:	03 c0       	rjmp	.+6      	; 0xeec <uart_puts_p+0x1a>
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart_putc(c);
     ee6:	8e 81       	ldd	r24, Y+6	; 0x06
     ee8:	0e 94 25 07 	call	0xe4a	; 0xe4a <uart_putc>
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
     eec:	8c 81       	ldd	r24, Y+4	; 0x04
     eee:	9d 81       	ldd	r25, Y+5	; 0x05
     ef0:	9b 83       	std	Y+3, r25	; 0x03
     ef2:	8a 83       	std	Y+2, r24	; 0x02
     ef4:	8c 81       	ldd	r24, Y+4	; 0x04
     ef6:	9d 81       	ldd	r25, Y+5	; 0x05
     ef8:	01 96       	adiw	r24, 0x01	; 1
     efa:	9d 83       	std	Y+5, r25	; 0x05
     efc:	8c 83       	std	Y+4, r24	; 0x04
     efe:	ea 81       	ldd	r30, Y+2	; 0x02
     f00:	fb 81       	ldd	r31, Y+3	; 0x03
     f02:	84 91       	lpm	r24, Z+
     f04:	89 83       	std	Y+1, r24	; 0x01
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	8e 83       	std	Y+6, r24	; 0x06
     f0a:	8e 81       	ldd	r24, Y+6	; 0x06
     f0c:	88 23       	and	r24, r24
     f0e:	59 f7       	brne	.-42     	; 0xee6 <uart_puts_p+0x14>
      uart_putc(c);

}/* uart_puts_p */
     f10:	26 96       	adiw	r28, 0x06	; 6
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	de bf       	out	0x3e, r29	; 62
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	cd bf       	out	0x3d, r28	; 61
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	08 95       	ret

00000f22 <__fixunssfsi>:
     f22:	ef 92       	push	r14
     f24:	ff 92       	push	r15
     f26:	0f 93       	push	r16
     f28:	1f 93       	push	r17
     f2a:	7b 01       	movw	r14, r22
     f2c:	8c 01       	movw	r16, r24
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	40 e0       	ldi	r20, 0x00	; 0
     f34:	5f e4       	ldi	r21, 0x4F	; 79
     f36:	0e 94 3d 0b 	call	0x167a	; 0x167a <__gesf2>
     f3a:	88 23       	and	r24, r24
     f3c:	8c f0       	brlt	.+34     	; 0xf60 <__fixunssfsi+0x3e>
     f3e:	c8 01       	movw	r24, r16
     f40:	b7 01       	movw	r22, r14
     f42:	20 e0       	ldi	r18, 0x00	; 0
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	40 e0       	ldi	r20, 0x00	; 0
     f48:	5f e4       	ldi	r21, 0x4F	; 79
     f4a:	0e 94 09 09 	call	0x1212	; 0x1212 <__subsf3>
     f4e:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__fixsfsi>
     f52:	9b 01       	movw	r18, r22
     f54:	ac 01       	movw	r20, r24
     f56:	20 50       	subi	r18, 0x00	; 0
     f58:	30 40       	sbci	r19, 0x00	; 0
     f5a:	40 40       	sbci	r20, 0x00	; 0
     f5c:	50 48       	sbci	r21, 0x80	; 128
     f5e:	06 c0       	rjmp	.+12     	; 0xf6c <__fixunssfsi+0x4a>
     f60:	c8 01       	movw	r24, r16
     f62:	b7 01       	movw	r22, r14
     f64:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__fixsfsi>
     f68:	9b 01       	movw	r18, r22
     f6a:	ac 01       	movw	r20, r24
     f6c:	b9 01       	movw	r22, r18
     f6e:	ca 01       	movw	r24, r20
     f70:	1f 91       	pop	r17
     f72:	0f 91       	pop	r16
     f74:	ff 90       	pop	r15
     f76:	ef 90       	pop	r14
     f78:	08 95       	ret

00000f7a <_fpadd_parts>:
     f7a:	a0 e0       	ldi	r26, 0x00	; 0
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e3 ec       	ldi	r30, 0xC3	; 195
     f80:	f7 e0       	ldi	r31, 0x07	; 7
     f82:	0c 94 44 0e 	jmp	0x1c88	; 0x1c88 <__prologue_saves__>
     f86:	dc 01       	movw	r26, r24
     f88:	2b 01       	movw	r4, r22
     f8a:	fa 01       	movw	r30, r20
     f8c:	9c 91       	ld	r25, X
     f8e:	92 30       	cpi	r25, 0x02	; 2
     f90:	08 f4       	brcc	.+2      	; 0xf94 <_fpadd_parts+0x1a>
     f92:	39 c1       	rjmp	.+626    	; 0x1206 <_fpadd_parts+0x28c>
     f94:	eb 01       	movw	r28, r22
     f96:	88 81       	ld	r24, Y
     f98:	82 30       	cpi	r24, 0x02	; 2
     f9a:	08 f4       	brcc	.+2      	; 0xf9e <_fpadd_parts+0x24>
     f9c:	33 c1       	rjmp	.+614    	; 0x1204 <_fpadd_parts+0x28a>
     f9e:	94 30       	cpi	r25, 0x04	; 4
     fa0:	69 f4       	brne	.+26     	; 0xfbc <_fpadd_parts+0x42>
     fa2:	84 30       	cpi	r24, 0x04	; 4
     fa4:	09 f0       	breq	.+2      	; 0xfa8 <_fpadd_parts+0x2e>
     fa6:	2f c1       	rjmp	.+606    	; 0x1206 <_fpadd_parts+0x28c>
     fa8:	11 96       	adiw	r26, 0x01	; 1
     faa:	9c 91       	ld	r25, X
     fac:	11 97       	sbiw	r26, 0x01	; 1
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	98 17       	cp	r25, r24
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <_fpadd_parts+0x3c>
     fb4:	28 c1       	rjmp	.+592    	; 0x1206 <_fpadd_parts+0x28c>
     fb6:	a3 e0       	ldi	r26, 0x03	; 3
     fb8:	b1 e0       	ldi	r27, 0x01	; 1
     fba:	25 c1       	rjmp	.+586    	; 0x1206 <_fpadd_parts+0x28c>
     fbc:	84 30       	cpi	r24, 0x04	; 4
     fbe:	09 f4       	brne	.+2      	; 0xfc2 <_fpadd_parts+0x48>
     fc0:	21 c1       	rjmp	.+578    	; 0x1204 <_fpadd_parts+0x28a>
     fc2:	82 30       	cpi	r24, 0x02	; 2
     fc4:	a9 f4       	brne	.+42     	; 0xff0 <_fpadd_parts+0x76>
     fc6:	92 30       	cpi	r25, 0x02	; 2
     fc8:	09 f0       	breq	.+2      	; 0xfcc <_fpadd_parts+0x52>
     fca:	1d c1       	rjmp	.+570    	; 0x1206 <_fpadd_parts+0x28c>
     fcc:	9a 01       	movw	r18, r20
     fce:	ad 01       	movw	r20, r26
     fd0:	88 e0       	ldi	r24, 0x08	; 8
     fd2:	ea 01       	movw	r28, r20
     fd4:	09 90       	ld	r0, Y+
     fd6:	ae 01       	movw	r20, r28
     fd8:	e9 01       	movw	r28, r18
     fda:	09 92       	st	Y+, r0
     fdc:	9e 01       	movw	r18, r28
     fde:	81 50       	subi	r24, 0x01	; 1
     fe0:	c1 f7       	brne	.-16     	; 0xfd2 <_fpadd_parts+0x58>
     fe2:	e2 01       	movw	r28, r4
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
     fe6:	11 96       	adiw	r26, 0x01	; 1
     fe8:	9c 91       	ld	r25, X
     fea:	89 23       	and	r24, r25
     fec:	81 83       	std	Z+1, r24	; 0x01
     fee:	08 c1       	rjmp	.+528    	; 0x1200 <_fpadd_parts+0x286>
     ff0:	92 30       	cpi	r25, 0x02	; 2
     ff2:	09 f4       	brne	.+2      	; 0xff6 <_fpadd_parts+0x7c>
     ff4:	07 c1       	rjmp	.+526    	; 0x1204 <_fpadd_parts+0x28a>
     ff6:	12 96       	adiw	r26, 0x02	; 2
     ff8:	2d 90       	ld	r2, X+
     ffa:	3c 90       	ld	r3, X
     ffc:	13 97       	sbiw	r26, 0x03	; 3
     ffe:	eb 01       	movw	r28, r22
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	9b 81       	ldd	r25, Y+3	; 0x03
    1004:	14 96       	adiw	r26, 0x04	; 4
    1006:	ad 90       	ld	r10, X+
    1008:	bd 90       	ld	r11, X+
    100a:	cd 90       	ld	r12, X+
    100c:	dc 90       	ld	r13, X
    100e:	17 97       	sbiw	r26, 0x07	; 7
    1010:	ec 80       	ldd	r14, Y+4	; 0x04
    1012:	fd 80       	ldd	r15, Y+5	; 0x05
    1014:	0e 81       	ldd	r16, Y+6	; 0x06
    1016:	1f 81       	ldd	r17, Y+7	; 0x07
    1018:	91 01       	movw	r18, r2
    101a:	28 1b       	sub	r18, r24
    101c:	39 0b       	sbc	r19, r25
    101e:	b9 01       	movw	r22, r18
    1020:	37 ff       	sbrs	r19, 7
    1022:	04 c0       	rjmp	.+8      	; 0x102c <_fpadd_parts+0xb2>
    1024:	66 27       	eor	r22, r22
    1026:	77 27       	eor	r23, r23
    1028:	62 1b       	sub	r22, r18
    102a:	73 0b       	sbc	r23, r19
    102c:	60 32       	cpi	r22, 0x20	; 32
    102e:	71 05       	cpc	r23, r1
    1030:	0c f0       	brlt	.+2      	; 0x1034 <_fpadd_parts+0xba>
    1032:	61 c0       	rjmp	.+194    	; 0x10f6 <_fpadd_parts+0x17c>
    1034:	12 16       	cp	r1, r18
    1036:	13 06       	cpc	r1, r19
    1038:	6c f5       	brge	.+90     	; 0x1094 <_fpadd_parts+0x11a>
    103a:	37 01       	movw	r6, r14
    103c:	48 01       	movw	r8, r16
    103e:	06 2e       	mov	r0, r22
    1040:	04 c0       	rjmp	.+8      	; 0x104a <_fpadd_parts+0xd0>
    1042:	96 94       	lsr	r9
    1044:	87 94       	ror	r8
    1046:	77 94       	ror	r7
    1048:	67 94       	ror	r6
    104a:	0a 94       	dec	r0
    104c:	d2 f7       	brpl	.-12     	; 0x1042 <_fpadd_parts+0xc8>
    104e:	21 e0       	ldi	r18, 0x01	; 1
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	40 e0       	ldi	r20, 0x00	; 0
    1054:	50 e0       	ldi	r21, 0x00	; 0
    1056:	04 c0       	rjmp	.+8      	; 0x1060 <_fpadd_parts+0xe6>
    1058:	22 0f       	add	r18, r18
    105a:	33 1f       	adc	r19, r19
    105c:	44 1f       	adc	r20, r20
    105e:	55 1f       	adc	r21, r21
    1060:	6a 95       	dec	r22
    1062:	d2 f7       	brpl	.-12     	; 0x1058 <_fpadd_parts+0xde>
    1064:	21 50       	subi	r18, 0x01	; 1
    1066:	30 40       	sbci	r19, 0x00	; 0
    1068:	40 40       	sbci	r20, 0x00	; 0
    106a:	50 40       	sbci	r21, 0x00	; 0
    106c:	2e 21       	and	r18, r14
    106e:	3f 21       	and	r19, r15
    1070:	40 23       	and	r20, r16
    1072:	51 23       	and	r21, r17
    1074:	21 15       	cp	r18, r1
    1076:	31 05       	cpc	r19, r1
    1078:	41 05       	cpc	r20, r1
    107a:	51 05       	cpc	r21, r1
    107c:	21 f0       	breq	.+8      	; 0x1086 <_fpadd_parts+0x10c>
    107e:	21 e0       	ldi	r18, 0x01	; 1
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	40 e0       	ldi	r20, 0x00	; 0
    1084:	50 e0       	ldi	r21, 0x00	; 0
    1086:	79 01       	movw	r14, r18
    1088:	8a 01       	movw	r16, r20
    108a:	e6 28       	or	r14, r6
    108c:	f7 28       	or	r15, r7
    108e:	08 29       	or	r16, r8
    1090:	19 29       	or	r17, r9
    1092:	3c c0       	rjmp	.+120    	; 0x110c <_fpadd_parts+0x192>
    1094:	23 2b       	or	r18, r19
    1096:	d1 f1       	breq	.+116    	; 0x110c <_fpadd_parts+0x192>
    1098:	26 0e       	add	r2, r22
    109a:	37 1e       	adc	r3, r23
    109c:	35 01       	movw	r6, r10
    109e:	46 01       	movw	r8, r12
    10a0:	06 2e       	mov	r0, r22
    10a2:	04 c0       	rjmp	.+8      	; 0x10ac <_fpadd_parts+0x132>
    10a4:	96 94       	lsr	r9
    10a6:	87 94       	ror	r8
    10a8:	77 94       	ror	r7
    10aa:	67 94       	ror	r6
    10ac:	0a 94       	dec	r0
    10ae:	d2 f7       	brpl	.-12     	; 0x10a4 <_fpadd_parts+0x12a>
    10b0:	21 e0       	ldi	r18, 0x01	; 1
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	40 e0       	ldi	r20, 0x00	; 0
    10b6:	50 e0       	ldi	r21, 0x00	; 0
    10b8:	04 c0       	rjmp	.+8      	; 0x10c2 <_fpadd_parts+0x148>
    10ba:	22 0f       	add	r18, r18
    10bc:	33 1f       	adc	r19, r19
    10be:	44 1f       	adc	r20, r20
    10c0:	55 1f       	adc	r21, r21
    10c2:	6a 95       	dec	r22
    10c4:	d2 f7       	brpl	.-12     	; 0x10ba <_fpadd_parts+0x140>
    10c6:	21 50       	subi	r18, 0x01	; 1
    10c8:	30 40       	sbci	r19, 0x00	; 0
    10ca:	40 40       	sbci	r20, 0x00	; 0
    10cc:	50 40       	sbci	r21, 0x00	; 0
    10ce:	2a 21       	and	r18, r10
    10d0:	3b 21       	and	r19, r11
    10d2:	4c 21       	and	r20, r12
    10d4:	5d 21       	and	r21, r13
    10d6:	21 15       	cp	r18, r1
    10d8:	31 05       	cpc	r19, r1
    10da:	41 05       	cpc	r20, r1
    10dc:	51 05       	cpc	r21, r1
    10de:	21 f0       	breq	.+8      	; 0x10e8 <_fpadd_parts+0x16e>
    10e0:	21 e0       	ldi	r18, 0x01	; 1
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	40 e0       	ldi	r20, 0x00	; 0
    10e6:	50 e0       	ldi	r21, 0x00	; 0
    10e8:	59 01       	movw	r10, r18
    10ea:	6a 01       	movw	r12, r20
    10ec:	a6 28       	or	r10, r6
    10ee:	b7 28       	or	r11, r7
    10f0:	c8 28       	or	r12, r8
    10f2:	d9 28       	or	r13, r9
    10f4:	0b c0       	rjmp	.+22     	; 0x110c <_fpadd_parts+0x192>
    10f6:	82 15       	cp	r24, r2
    10f8:	93 05       	cpc	r25, r3
    10fa:	2c f0       	brlt	.+10     	; 0x1106 <_fpadd_parts+0x18c>
    10fc:	1c 01       	movw	r2, r24
    10fe:	aa 24       	eor	r10, r10
    1100:	bb 24       	eor	r11, r11
    1102:	65 01       	movw	r12, r10
    1104:	03 c0       	rjmp	.+6      	; 0x110c <_fpadd_parts+0x192>
    1106:	ee 24       	eor	r14, r14
    1108:	ff 24       	eor	r15, r15
    110a:	87 01       	movw	r16, r14
    110c:	11 96       	adiw	r26, 0x01	; 1
    110e:	9c 91       	ld	r25, X
    1110:	d2 01       	movw	r26, r4
    1112:	11 96       	adiw	r26, 0x01	; 1
    1114:	8c 91       	ld	r24, X
    1116:	98 17       	cp	r25, r24
    1118:	09 f4       	brne	.+2      	; 0x111c <_fpadd_parts+0x1a2>
    111a:	45 c0       	rjmp	.+138    	; 0x11a6 <_fpadd_parts+0x22c>
    111c:	99 23       	and	r25, r25
    111e:	39 f0       	breq	.+14     	; 0x112e <_fpadd_parts+0x1b4>
    1120:	a8 01       	movw	r20, r16
    1122:	97 01       	movw	r18, r14
    1124:	2a 19       	sub	r18, r10
    1126:	3b 09       	sbc	r19, r11
    1128:	4c 09       	sbc	r20, r12
    112a:	5d 09       	sbc	r21, r13
    112c:	06 c0       	rjmp	.+12     	; 0x113a <_fpadd_parts+0x1c0>
    112e:	a6 01       	movw	r20, r12
    1130:	95 01       	movw	r18, r10
    1132:	2e 19       	sub	r18, r14
    1134:	3f 09       	sbc	r19, r15
    1136:	40 0b       	sbc	r20, r16
    1138:	51 0b       	sbc	r21, r17
    113a:	57 fd       	sbrc	r21, 7
    113c:	08 c0       	rjmp	.+16     	; 0x114e <_fpadd_parts+0x1d4>
    113e:	11 82       	std	Z+1, r1	; 0x01
    1140:	33 82       	std	Z+3, r3	; 0x03
    1142:	22 82       	std	Z+2, r2	; 0x02
    1144:	24 83       	std	Z+4, r18	; 0x04
    1146:	35 83       	std	Z+5, r19	; 0x05
    1148:	46 83       	std	Z+6, r20	; 0x06
    114a:	57 83       	std	Z+7, r21	; 0x07
    114c:	1d c0       	rjmp	.+58     	; 0x1188 <_fpadd_parts+0x20e>
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	81 83       	std	Z+1, r24	; 0x01
    1152:	33 82       	std	Z+3, r3	; 0x03
    1154:	22 82       	std	Z+2, r2	; 0x02
    1156:	88 27       	eor	r24, r24
    1158:	99 27       	eor	r25, r25
    115a:	dc 01       	movw	r26, r24
    115c:	82 1b       	sub	r24, r18
    115e:	93 0b       	sbc	r25, r19
    1160:	a4 0b       	sbc	r26, r20
    1162:	b5 0b       	sbc	r27, r21
    1164:	84 83       	std	Z+4, r24	; 0x04
    1166:	95 83       	std	Z+5, r25	; 0x05
    1168:	a6 83       	std	Z+6, r26	; 0x06
    116a:	b7 83       	std	Z+7, r27	; 0x07
    116c:	0d c0       	rjmp	.+26     	; 0x1188 <_fpadd_parts+0x20e>
    116e:	22 0f       	add	r18, r18
    1170:	33 1f       	adc	r19, r19
    1172:	44 1f       	adc	r20, r20
    1174:	55 1f       	adc	r21, r21
    1176:	24 83       	std	Z+4, r18	; 0x04
    1178:	35 83       	std	Z+5, r19	; 0x05
    117a:	46 83       	std	Z+6, r20	; 0x06
    117c:	57 83       	std	Z+7, r21	; 0x07
    117e:	82 81       	ldd	r24, Z+2	; 0x02
    1180:	93 81       	ldd	r25, Z+3	; 0x03
    1182:	01 97       	sbiw	r24, 0x01	; 1
    1184:	93 83       	std	Z+3, r25	; 0x03
    1186:	82 83       	std	Z+2, r24	; 0x02
    1188:	24 81       	ldd	r18, Z+4	; 0x04
    118a:	35 81       	ldd	r19, Z+5	; 0x05
    118c:	46 81       	ldd	r20, Z+6	; 0x06
    118e:	57 81       	ldd	r21, Z+7	; 0x07
    1190:	da 01       	movw	r26, r20
    1192:	c9 01       	movw	r24, r18
    1194:	01 97       	sbiw	r24, 0x01	; 1
    1196:	a1 09       	sbc	r26, r1
    1198:	b1 09       	sbc	r27, r1
    119a:	8f 5f       	subi	r24, 0xFF	; 255
    119c:	9f 4f       	sbci	r25, 0xFF	; 255
    119e:	af 4f       	sbci	r26, 0xFF	; 255
    11a0:	bf 43       	sbci	r27, 0x3F	; 63
    11a2:	28 f3       	brcs	.-54     	; 0x116e <_fpadd_parts+0x1f4>
    11a4:	0b c0       	rjmp	.+22     	; 0x11bc <_fpadd_parts+0x242>
    11a6:	91 83       	std	Z+1, r25	; 0x01
    11a8:	33 82       	std	Z+3, r3	; 0x03
    11aa:	22 82       	std	Z+2, r2	; 0x02
    11ac:	ea 0c       	add	r14, r10
    11ae:	fb 1c       	adc	r15, r11
    11b0:	0c 1d       	adc	r16, r12
    11b2:	1d 1d       	adc	r17, r13
    11b4:	e4 82       	std	Z+4, r14	; 0x04
    11b6:	f5 82       	std	Z+5, r15	; 0x05
    11b8:	06 83       	std	Z+6, r16	; 0x06
    11ba:	17 83       	std	Z+7, r17	; 0x07
    11bc:	83 e0       	ldi	r24, 0x03	; 3
    11be:	80 83       	st	Z, r24
    11c0:	24 81       	ldd	r18, Z+4	; 0x04
    11c2:	35 81       	ldd	r19, Z+5	; 0x05
    11c4:	46 81       	ldd	r20, Z+6	; 0x06
    11c6:	57 81       	ldd	r21, Z+7	; 0x07
    11c8:	57 ff       	sbrs	r21, 7
    11ca:	1a c0       	rjmp	.+52     	; 0x1200 <_fpadd_parts+0x286>
    11cc:	c9 01       	movw	r24, r18
    11ce:	aa 27       	eor	r26, r26
    11d0:	97 fd       	sbrc	r25, 7
    11d2:	a0 95       	com	r26
    11d4:	ba 2f       	mov	r27, r26
    11d6:	81 70       	andi	r24, 0x01	; 1
    11d8:	90 70       	andi	r25, 0x00	; 0
    11da:	a0 70       	andi	r26, 0x00	; 0
    11dc:	b0 70       	andi	r27, 0x00	; 0
    11de:	56 95       	lsr	r21
    11e0:	47 95       	ror	r20
    11e2:	37 95       	ror	r19
    11e4:	27 95       	ror	r18
    11e6:	82 2b       	or	r24, r18
    11e8:	93 2b       	or	r25, r19
    11ea:	a4 2b       	or	r26, r20
    11ec:	b5 2b       	or	r27, r21
    11ee:	84 83       	std	Z+4, r24	; 0x04
    11f0:	95 83       	std	Z+5, r25	; 0x05
    11f2:	a6 83       	std	Z+6, r26	; 0x06
    11f4:	b7 83       	std	Z+7, r27	; 0x07
    11f6:	82 81       	ldd	r24, Z+2	; 0x02
    11f8:	93 81       	ldd	r25, Z+3	; 0x03
    11fa:	01 96       	adiw	r24, 0x01	; 1
    11fc:	93 83       	std	Z+3, r25	; 0x03
    11fe:	82 83       	std	Z+2, r24	; 0x02
    1200:	df 01       	movw	r26, r30
    1202:	01 c0       	rjmp	.+2      	; 0x1206 <_fpadd_parts+0x28c>
    1204:	d2 01       	movw	r26, r4
    1206:	cd 01       	movw	r24, r26
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
    120c:	e2 e1       	ldi	r30, 0x12	; 18
    120e:	0c 94 60 0e 	jmp	0x1cc0	; 0x1cc0 <__epilogue_restores__>

00001212 <__subsf3>:
    1212:	a0 e2       	ldi	r26, 0x20	; 32
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	ef e0       	ldi	r30, 0x0F	; 15
    1218:	f9 e0       	ldi	r31, 0x09	; 9
    121a:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__prologue_saves__+0x18>
    121e:	69 83       	std	Y+1, r22	; 0x01
    1220:	7a 83       	std	Y+2, r23	; 0x02
    1222:	8b 83       	std	Y+3, r24	; 0x03
    1224:	9c 83       	std	Y+4, r25	; 0x04
    1226:	2d 83       	std	Y+5, r18	; 0x05
    1228:	3e 83       	std	Y+6, r19	; 0x06
    122a:	4f 83       	std	Y+7, r20	; 0x07
    122c:	58 87       	std	Y+8, r21	; 0x08
    122e:	e9 e0       	ldi	r30, 0x09	; 9
    1230:	ee 2e       	mov	r14, r30
    1232:	f1 2c       	mov	r15, r1
    1234:	ec 0e       	add	r14, r28
    1236:	fd 1e       	adc	r15, r29
    1238:	ce 01       	movw	r24, r28
    123a:	01 96       	adiw	r24, 0x01	; 1
    123c:	b7 01       	movw	r22, r14
    123e:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__unpack_f>
    1242:	8e 01       	movw	r16, r28
    1244:	0f 5e       	subi	r16, 0xEF	; 239
    1246:	1f 4f       	sbci	r17, 0xFF	; 255
    1248:	ce 01       	movw	r24, r28
    124a:	05 96       	adiw	r24, 0x05	; 5
    124c:	b8 01       	movw	r22, r16
    124e:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__unpack_f>
    1252:	8a 89       	ldd	r24, Y+18	; 0x12
    1254:	91 e0       	ldi	r25, 0x01	; 1
    1256:	89 27       	eor	r24, r25
    1258:	8a 8b       	std	Y+18, r24	; 0x12
    125a:	c7 01       	movw	r24, r14
    125c:	b8 01       	movw	r22, r16
    125e:	ae 01       	movw	r20, r28
    1260:	47 5e       	subi	r20, 0xE7	; 231
    1262:	5f 4f       	sbci	r21, 0xFF	; 255
    1264:	0e 94 bd 07 	call	0xf7a	; 0xf7a <_fpadd_parts>
    1268:	0e 94 9e 0c 	call	0x193c	; 0x193c <__pack_f>
    126c:	a0 96       	adiw	r28, 0x20	; 32
    126e:	e6 e0       	ldi	r30, 0x06	; 6
    1270:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <__epilogue_restores__+0x18>

00001274 <__addsf3>:
    1274:	a0 e2       	ldi	r26, 0x20	; 32
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	e0 e4       	ldi	r30, 0x40	; 64
    127a:	f9 e0       	ldi	r31, 0x09	; 9
    127c:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__prologue_saves__+0x18>
    1280:	69 83       	std	Y+1, r22	; 0x01
    1282:	7a 83       	std	Y+2, r23	; 0x02
    1284:	8b 83       	std	Y+3, r24	; 0x03
    1286:	9c 83       	std	Y+4, r25	; 0x04
    1288:	2d 83       	std	Y+5, r18	; 0x05
    128a:	3e 83       	std	Y+6, r19	; 0x06
    128c:	4f 83       	std	Y+7, r20	; 0x07
    128e:	58 87       	std	Y+8, r21	; 0x08
    1290:	f9 e0       	ldi	r31, 0x09	; 9
    1292:	ef 2e       	mov	r14, r31
    1294:	f1 2c       	mov	r15, r1
    1296:	ec 0e       	add	r14, r28
    1298:	fd 1e       	adc	r15, r29
    129a:	ce 01       	movw	r24, r28
    129c:	01 96       	adiw	r24, 0x01	; 1
    129e:	b7 01       	movw	r22, r14
    12a0:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__unpack_f>
    12a4:	8e 01       	movw	r16, r28
    12a6:	0f 5e       	subi	r16, 0xEF	; 239
    12a8:	1f 4f       	sbci	r17, 0xFF	; 255
    12aa:	ce 01       	movw	r24, r28
    12ac:	05 96       	adiw	r24, 0x05	; 5
    12ae:	b8 01       	movw	r22, r16
    12b0:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__unpack_f>
    12b4:	c7 01       	movw	r24, r14
    12b6:	b8 01       	movw	r22, r16
    12b8:	ae 01       	movw	r20, r28
    12ba:	47 5e       	subi	r20, 0xE7	; 231
    12bc:	5f 4f       	sbci	r21, 0xFF	; 255
    12be:	0e 94 bd 07 	call	0xf7a	; 0xf7a <_fpadd_parts>
    12c2:	0e 94 9e 0c 	call	0x193c	; 0x193c <__pack_f>
    12c6:	a0 96       	adiw	r28, 0x20	; 32
    12c8:	e6 e0       	ldi	r30, 0x06	; 6
    12ca:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <__epilogue_restores__+0x18>

000012ce <__mulsf3>:
    12ce:	a0 e2       	ldi	r26, 0x20	; 32
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	ed e6       	ldi	r30, 0x6D	; 109
    12d4:	f9 e0       	ldi	r31, 0x09	; 9
    12d6:	0c 94 44 0e 	jmp	0x1c88	; 0x1c88 <__prologue_saves__>
    12da:	69 83       	std	Y+1, r22	; 0x01
    12dc:	7a 83       	std	Y+2, r23	; 0x02
    12de:	8b 83       	std	Y+3, r24	; 0x03
    12e0:	9c 83       	std	Y+4, r25	; 0x04
    12e2:	2d 83       	std	Y+5, r18	; 0x05
    12e4:	3e 83       	std	Y+6, r19	; 0x06
    12e6:	4f 83       	std	Y+7, r20	; 0x07
    12e8:	58 87       	std	Y+8, r21	; 0x08
    12ea:	ce 01       	movw	r24, r28
    12ec:	01 96       	adiw	r24, 0x01	; 1
    12ee:	be 01       	movw	r22, r28
    12f0:	67 5f       	subi	r22, 0xF7	; 247
    12f2:	7f 4f       	sbci	r23, 0xFF	; 255
    12f4:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__unpack_f>
    12f8:	ce 01       	movw	r24, r28
    12fa:	05 96       	adiw	r24, 0x05	; 5
    12fc:	be 01       	movw	r22, r28
    12fe:	6f 5e       	subi	r22, 0xEF	; 239
    1300:	7f 4f       	sbci	r23, 0xFF	; 255
    1302:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__unpack_f>
    1306:	99 85       	ldd	r25, Y+9	; 0x09
    1308:	92 30       	cpi	r25, 0x02	; 2
    130a:	88 f0       	brcs	.+34     	; 0x132e <__mulsf3+0x60>
    130c:	89 89       	ldd	r24, Y+17	; 0x11
    130e:	82 30       	cpi	r24, 0x02	; 2
    1310:	c8 f0       	brcs	.+50     	; 0x1344 <__mulsf3+0x76>
    1312:	94 30       	cpi	r25, 0x04	; 4
    1314:	19 f4       	brne	.+6      	; 0x131c <__mulsf3+0x4e>
    1316:	82 30       	cpi	r24, 0x02	; 2
    1318:	51 f4       	brne	.+20     	; 0x132e <__mulsf3+0x60>
    131a:	04 c0       	rjmp	.+8      	; 0x1324 <__mulsf3+0x56>
    131c:	84 30       	cpi	r24, 0x04	; 4
    131e:	29 f4       	brne	.+10     	; 0x132a <__mulsf3+0x5c>
    1320:	92 30       	cpi	r25, 0x02	; 2
    1322:	81 f4       	brne	.+32     	; 0x1344 <__mulsf3+0x76>
    1324:	83 e0       	ldi	r24, 0x03	; 3
    1326:	91 e0       	ldi	r25, 0x01	; 1
    1328:	c6 c0       	rjmp	.+396    	; 0x14b6 <__mulsf3+0x1e8>
    132a:	92 30       	cpi	r25, 0x02	; 2
    132c:	49 f4       	brne	.+18     	; 0x1340 <__mulsf3+0x72>
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	9a 85       	ldd	r25, Y+10	; 0x0a
    1332:	8a 89       	ldd	r24, Y+18	; 0x12
    1334:	98 13       	cpse	r25, r24
    1336:	21 e0       	ldi	r18, 0x01	; 1
    1338:	2a 87       	std	Y+10, r18	; 0x0a
    133a:	ce 01       	movw	r24, r28
    133c:	09 96       	adiw	r24, 0x09	; 9
    133e:	bb c0       	rjmp	.+374    	; 0x14b6 <__mulsf3+0x1e8>
    1340:	82 30       	cpi	r24, 0x02	; 2
    1342:	49 f4       	brne	.+18     	; 0x1356 <__mulsf3+0x88>
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	9a 85       	ldd	r25, Y+10	; 0x0a
    1348:	8a 89       	ldd	r24, Y+18	; 0x12
    134a:	98 13       	cpse	r25, r24
    134c:	21 e0       	ldi	r18, 0x01	; 1
    134e:	2a 8b       	std	Y+18, r18	; 0x12
    1350:	ce 01       	movw	r24, r28
    1352:	41 96       	adiw	r24, 0x11	; 17
    1354:	b0 c0       	rjmp	.+352    	; 0x14b6 <__mulsf3+0x1e8>
    1356:	2d 84       	ldd	r2, Y+13	; 0x0d
    1358:	3e 84       	ldd	r3, Y+14	; 0x0e
    135a:	4f 84       	ldd	r4, Y+15	; 0x0f
    135c:	58 88       	ldd	r5, Y+16	; 0x10
    135e:	6d 88       	ldd	r6, Y+21	; 0x15
    1360:	7e 88       	ldd	r7, Y+22	; 0x16
    1362:	8f 88       	ldd	r8, Y+23	; 0x17
    1364:	98 8c       	ldd	r9, Y+24	; 0x18
    1366:	ee 24       	eor	r14, r14
    1368:	ff 24       	eor	r15, r15
    136a:	87 01       	movw	r16, r14
    136c:	aa 24       	eor	r10, r10
    136e:	bb 24       	eor	r11, r11
    1370:	65 01       	movw	r12, r10
    1372:	40 e0       	ldi	r20, 0x00	; 0
    1374:	50 e0       	ldi	r21, 0x00	; 0
    1376:	60 e0       	ldi	r22, 0x00	; 0
    1378:	70 e0       	ldi	r23, 0x00	; 0
    137a:	e0 e0       	ldi	r30, 0x00	; 0
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	c1 01       	movw	r24, r2
    1380:	81 70       	andi	r24, 0x01	; 1
    1382:	90 70       	andi	r25, 0x00	; 0
    1384:	89 2b       	or	r24, r25
    1386:	e9 f0       	breq	.+58     	; 0x13c2 <__mulsf3+0xf4>
    1388:	e6 0c       	add	r14, r6
    138a:	f7 1c       	adc	r15, r7
    138c:	08 1d       	adc	r16, r8
    138e:	19 1d       	adc	r17, r9
    1390:	9a 01       	movw	r18, r20
    1392:	ab 01       	movw	r20, r22
    1394:	2a 0d       	add	r18, r10
    1396:	3b 1d       	adc	r19, r11
    1398:	4c 1d       	adc	r20, r12
    139a:	5d 1d       	adc	r21, r13
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	a0 e0       	ldi	r26, 0x00	; 0
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	e6 14       	cp	r14, r6
    13a6:	f7 04       	cpc	r15, r7
    13a8:	08 05       	cpc	r16, r8
    13aa:	19 05       	cpc	r17, r9
    13ac:	20 f4       	brcc	.+8      	; 0x13b6 <__mulsf3+0xe8>
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	a0 e0       	ldi	r26, 0x00	; 0
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	ba 01       	movw	r22, r20
    13b8:	a9 01       	movw	r20, r18
    13ba:	48 0f       	add	r20, r24
    13bc:	59 1f       	adc	r21, r25
    13be:	6a 1f       	adc	r22, r26
    13c0:	7b 1f       	adc	r23, r27
    13c2:	aa 0c       	add	r10, r10
    13c4:	bb 1c       	adc	r11, r11
    13c6:	cc 1c       	adc	r12, r12
    13c8:	dd 1c       	adc	r13, r13
    13ca:	97 fe       	sbrs	r9, 7
    13cc:	08 c0       	rjmp	.+16     	; 0x13de <__mulsf3+0x110>
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	a0 e0       	ldi	r26, 0x00	; 0
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	a8 2a       	or	r10, r24
    13d8:	b9 2a       	or	r11, r25
    13da:	ca 2a       	or	r12, r26
    13dc:	db 2a       	or	r13, r27
    13de:	31 96       	adiw	r30, 0x01	; 1
    13e0:	e0 32       	cpi	r30, 0x20	; 32
    13e2:	f1 05       	cpc	r31, r1
    13e4:	49 f0       	breq	.+18     	; 0x13f8 <__mulsf3+0x12a>
    13e6:	66 0c       	add	r6, r6
    13e8:	77 1c       	adc	r7, r7
    13ea:	88 1c       	adc	r8, r8
    13ec:	99 1c       	adc	r9, r9
    13ee:	56 94       	lsr	r5
    13f0:	47 94       	ror	r4
    13f2:	37 94       	ror	r3
    13f4:	27 94       	ror	r2
    13f6:	c3 cf       	rjmp	.-122    	; 0x137e <__mulsf3+0xb0>
    13f8:	fa 85       	ldd	r31, Y+10	; 0x0a
    13fa:	ea 89       	ldd	r30, Y+18	; 0x12
    13fc:	2b 89       	ldd	r18, Y+19	; 0x13
    13fe:	3c 89       	ldd	r19, Y+20	; 0x14
    1400:	8b 85       	ldd	r24, Y+11	; 0x0b
    1402:	9c 85       	ldd	r25, Y+12	; 0x0c
    1404:	28 0f       	add	r18, r24
    1406:	39 1f       	adc	r19, r25
    1408:	2e 5f       	subi	r18, 0xFE	; 254
    140a:	3f 4f       	sbci	r19, 0xFF	; 255
    140c:	17 c0       	rjmp	.+46     	; 0x143c <__mulsf3+0x16e>
    140e:	ca 01       	movw	r24, r20
    1410:	81 70       	andi	r24, 0x01	; 1
    1412:	90 70       	andi	r25, 0x00	; 0
    1414:	89 2b       	or	r24, r25
    1416:	61 f0       	breq	.+24     	; 0x1430 <__mulsf3+0x162>
    1418:	16 95       	lsr	r17
    141a:	07 95       	ror	r16
    141c:	f7 94       	ror	r15
    141e:	e7 94       	ror	r14
    1420:	80 e0       	ldi	r24, 0x00	; 0
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	a0 e0       	ldi	r26, 0x00	; 0
    1426:	b0 e8       	ldi	r27, 0x80	; 128
    1428:	e8 2a       	or	r14, r24
    142a:	f9 2a       	or	r15, r25
    142c:	0a 2b       	or	r16, r26
    142e:	1b 2b       	or	r17, r27
    1430:	76 95       	lsr	r23
    1432:	67 95       	ror	r22
    1434:	57 95       	ror	r21
    1436:	47 95       	ror	r20
    1438:	2f 5f       	subi	r18, 0xFF	; 255
    143a:	3f 4f       	sbci	r19, 0xFF	; 255
    143c:	77 fd       	sbrc	r23, 7
    143e:	e7 cf       	rjmp	.-50     	; 0x140e <__mulsf3+0x140>
    1440:	0c c0       	rjmp	.+24     	; 0x145a <__mulsf3+0x18c>
    1442:	44 0f       	add	r20, r20
    1444:	55 1f       	adc	r21, r21
    1446:	66 1f       	adc	r22, r22
    1448:	77 1f       	adc	r23, r23
    144a:	17 fd       	sbrc	r17, 7
    144c:	41 60       	ori	r20, 0x01	; 1
    144e:	ee 0c       	add	r14, r14
    1450:	ff 1c       	adc	r15, r15
    1452:	00 1f       	adc	r16, r16
    1454:	11 1f       	adc	r17, r17
    1456:	21 50       	subi	r18, 0x01	; 1
    1458:	30 40       	sbci	r19, 0x00	; 0
    145a:	40 30       	cpi	r20, 0x00	; 0
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	59 07       	cpc	r21, r25
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	69 07       	cpc	r22, r25
    1464:	90 e4       	ldi	r25, 0x40	; 64
    1466:	79 07       	cpc	r23, r25
    1468:	60 f3       	brcs	.-40     	; 0x1442 <__mulsf3+0x174>
    146a:	2b 8f       	std	Y+27, r18	; 0x1b
    146c:	3c 8f       	std	Y+28, r19	; 0x1c
    146e:	db 01       	movw	r26, r22
    1470:	ca 01       	movw	r24, r20
    1472:	8f 77       	andi	r24, 0x7F	; 127
    1474:	90 70       	andi	r25, 0x00	; 0
    1476:	a0 70       	andi	r26, 0x00	; 0
    1478:	b0 70       	andi	r27, 0x00	; 0
    147a:	80 34       	cpi	r24, 0x40	; 64
    147c:	91 05       	cpc	r25, r1
    147e:	a1 05       	cpc	r26, r1
    1480:	b1 05       	cpc	r27, r1
    1482:	61 f4       	brne	.+24     	; 0x149c <__mulsf3+0x1ce>
    1484:	47 fd       	sbrc	r20, 7
    1486:	0a c0       	rjmp	.+20     	; 0x149c <__mulsf3+0x1ce>
    1488:	e1 14       	cp	r14, r1
    148a:	f1 04       	cpc	r15, r1
    148c:	01 05       	cpc	r16, r1
    148e:	11 05       	cpc	r17, r1
    1490:	29 f0       	breq	.+10     	; 0x149c <__mulsf3+0x1ce>
    1492:	40 5c       	subi	r20, 0xC0	; 192
    1494:	5f 4f       	sbci	r21, 0xFF	; 255
    1496:	6f 4f       	sbci	r22, 0xFF	; 255
    1498:	7f 4f       	sbci	r23, 0xFF	; 255
    149a:	40 78       	andi	r20, 0x80	; 128
    149c:	1a 8e       	std	Y+26, r1	; 0x1a
    149e:	fe 17       	cp	r31, r30
    14a0:	11 f0       	breq	.+4      	; 0x14a6 <__mulsf3+0x1d8>
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	8a 8f       	std	Y+26, r24	; 0x1a
    14a6:	4d 8f       	std	Y+29, r20	; 0x1d
    14a8:	5e 8f       	std	Y+30, r21	; 0x1e
    14aa:	6f 8f       	std	Y+31, r22	; 0x1f
    14ac:	78 a3       	std	Y+32, r23	; 0x20
    14ae:	83 e0       	ldi	r24, 0x03	; 3
    14b0:	89 8f       	std	Y+25, r24	; 0x19
    14b2:	ce 01       	movw	r24, r28
    14b4:	49 96       	adiw	r24, 0x19	; 25
    14b6:	0e 94 9e 0c 	call	0x193c	; 0x193c <__pack_f>
    14ba:	a0 96       	adiw	r28, 0x20	; 32
    14bc:	e2 e1       	ldi	r30, 0x12	; 18
    14be:	0c 94 60 0e 	jmp	0x1cc0	; 0x1cc0 <__epilogue_restores__>

000014c2 <__divsf3>:
    14c2:	a8 e1       	ldi	r26, 0x18	; 24
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	e7 e6       	ldi	r30, 0x67	; 103
    14c8:	fa e0       	ldi	r31, 0x0A	; 10
    14ca:	0c 94 4c 0e 	jmp	0x1c98	; 0x1c98 <__prologue_saves__+0x10>
    14ce:	69 83       	std	Y+1, r22	; 0x01
    14d0:	7a 83       	std	Y+2, r23	; 0x02
    14d2:	8b 83       	std	Y+3, r24	; 0x03
    14d4:	9c 83       	std	Y+4, r25	; 0x04
    14d6:	2d 83       	std	Y+5, r18	; 0x05
    14d8:	3e 83       	std	Y+6, r19	; 0x06
    14da:	4f 83       	std	Y+7, r20	; 0x07
    14dc:	58 87       	std	Y+8, r21	; 0x08
    14de:	b9 e0       	ldi	r27, 0x09	; 9
    14e0:	eb 2e       	mov	r14, r27
    14e2:	f1 2c       	mov	r15, r1
    14e4:	ec 0e       	add	r14, r28
    14e6:	fd 1e       	adc	r15, r29
    14e8:	ce 01       	movw	r24, r28
    14ea:	01 96       	adiw	r24, 0x01	; 1
    14ec:	b7 01       	movw	r22, r14
    14ee:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__unpack_f>
    14f2:	8e 01       	movw	r16, r28
    14f4:	0f 5e       	subi	r16, 0xEF	; 239
    14f6:	1f 4f       	sbci	r17, 0xFF	; 255
    14f8:	ce 01       	movw	r24, r28
    14fa:	05 96       	adiw	r24, 0x05	; 5
    14fc:	b8 01       	movw	r22, r16
    14fe:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__unpack_f>
    1502:	29 85       	ldd	r18, Y+9	; 0x09
    1504:	22 30       	cpi	r18, 0x02	; 2
    1506:	08 f4       	brcc	.+2      	; 0x150a <__divsf3+0x48>
    1508:	7e c0       	rjmp	.+252    	; 0x1606 <__divsf3+0x144>
    150a:	39 89       	ldd	r19, Y+17	; 0x11
    150c:	32 30       	cpi	r19, 0x02	; 2
    150e:	10 f4       	brcc	.+4      	; 0x1514 <__divsf3+0x52>
    1510:	b8 01       	movw	r22, r16
    1512:	7c c0       	rjmp	.+248    	; 0x160c <__divsf3+0x14a>
    1514:	8a 85       	ldd	r24, Y+10	; 0x0a
    1516:	9a 89       	ldd	r25, Y+18	; 0x12
    1518:	89 27       	eor	r24, r25
    151a:	8a 87       	std	Y+10, r24	; 0x0a
    151c:	24 30       	cpi	r18, 0x04	; 4
    151e:	11 f0       	breq	.+4      	; 0x1524 <__divsf3+0x62>
    1520:	22 30       	cpi	r18, 0x02	; 2
    1522:	31 f4       	brne	.+12     	; 0x1530 <__divsf3+0x6e>
    1524:	23 17       	cp	r18, r19
    1526:	09 f0       	breq	.+2      	; 0x152a <__divsf3+0x68>
    1528:	6e c0       	rjmp	.+220    	; 0x1606 <__divsf3+0x144>
    152a:	63 e0       	ldi	r22, 0x03	; 3
    152c:	71 e0       	ldi	r23, 0x01	; 1
    152e:	6e c0       	rjmp	.+220    	; 0x160c <__divsf3+0x14a>
    1530:	34 30       	cpi	r19, 0x04	; 4
    1532:	39 f4       	brne	.+14     	; 0x1542 <__divsf3+0x80>
    1534:	1d 86       	std	Y+13, r1	; 0x0d
    1536:	1e 86       	std	Y+14, r1	; 0x0e
    1538:	1f 86       	std	Y+15, r1	; 0x0f
    153a:	18 8a       	std	Y+16, r1	; 0x10
    153c:	1c 86       	std	Y+12, r1	; 0x0c
    153e:	1b 86       	std	Y+11, r1	; 0x0b
    1540:	04 c0       	rjmp	.+8      	; 0x154a <__divsf3+0x88>
    1542:	32 30       	cpi	r19, 0x02	; 2
    1544:	21 f4       	brne	.+8      	; 0x154e <__divsf3+0x8c>
    1546:	84 e0       	ldi	r24, 0x04	; 4
    1548:	89 87       	std	Y+9, r24	; 0x09
    154a:	b7 01       	movw	r22, r14
    154c:	5f c0       	rjmp	.+190    	; 0x160c <__divsf3+0x14a>
    154e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1550:	3c 85       	ldd	r19, Y+12	; 0x0c
    1552:	8b 89       	ldd	r24, Y+19	; 0x13
    1554:	9c 89       	ldd	r25, Y+20	; 0x14
    1556:	28 1b       	sub	r18, r24
    1558:	39 0b       	sbc	r19, r25
    155a:	3c 87       	std	Y+12, r19	; 0x0c
    155c:	2b 87       	std	Y+11, r18	; 0x0b
    155e:	ed 84       	ldd	r14, Y+13	; 0x0d
    1560:	fe 84       	ldd	r15, Y+14	; 0x0e
    1562:	0f 85       	ldd	r16, Y+15	; 0x0f
    1564:	18 89       	ldd	r17, Y+16	; 0x10
    1566:	ad 88       	ldd	r10, Y+21	; 0x15
    1568:	be 88       	ldd	r11, Y+22	; 0x16
    156a:	cf 88       	ldd	r12, Y+23	; 0x17
    156c:	d8 8c       	ldd	r13, Y+24	; 0x18
    156e:	ea 14       	cp	r14, r10
    1570:	fb 04       	cpc	r15, r11
    1572:	0c 05       	cpc	r16, r12
    1574:	1d 05       	cpc	r17, r13
    1576:	40 f4       	brcc	.+16     	; 0x1588 <__divsf3+0xc6>
    1578:	ee 0c       	add	r14, r14
    157a:	ff 1c       	adc	r15, r15
    157c:	00 1f       	adc	r16, r16
    157e:	11 1f       	adc	r17, r17
    1580:	21 50       	subi	r18, 0x01	; 1
    1582:	30 40       	sbci	r19, 0x00	; 0
    1584:	3c 87       	std	Y+12, r19	; 0x0c
    1586:	2b 87       	std	Y+11, r18	; 0x0b
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	40 e0       	ldi	r20, 0x00	; 0
    158e:	50 e0       	ldi	r21, 0x00	; 0
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	a0 e0       	ldi	r26, 0x00	; 0
    1596:	b0 e4       	ldi	r27, 0x40	; 64
    1598:	60 e0       	ldi	r22, 0x00	; 0
    159a:	70 e0       	ldi	r23, 0x00	; 0
    159c:	ea 14       	cp	r14, r10
    159e:	fb 04       	cpc	r15, r11
    15a0:	0c 05       	cpc	r16, r12
    15a2:	1d 05       	cpc	r17, r13
    15a4:	40 f0       	brcs	.+16     	; 0x15b6 <__divsf3+0xf4>
    15a6:	28 2b       	or	r18, r24
    15a8:	39 2b       	or	r19, r25
    15aa:	4a 2b       	or	r20, r26
    15ac:	5b 2b       	or	r21, r27
    15ae:	ea 18       	sub	r14, r10
    15b0:	fb 08       	sbc	r15, r11
    15b2:	0c 09       	sbc	r16, r12
    15b4:	1d 09       	sbc	r17, r13
    15b6:	b6 95       	lsr	r27
    15b8:	a7 95       	ror	r26
    15ba:	97 95       	ror	r25
    15bc:	87 95       	ror	r24
    15be:	ee 0c       	add	r14, r14
    15c0:	ff 1c       	adc	r15, r15
    15c2:	00 1f       	adc	r16, r16
    15c4:	11 1f       	adc	r17, r17
    15c6:	6f 5f       	subi	r22, 0xFF	; 255
    15c8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ca:	6f 31       	cpi	r22, 0x1F	; 31
    15cc:	71 05       	cpc	r23, r1
    15ce:	31 f7       	brne	.-52     	; 0x159c <__divsf3+0xda>
    15d0:	da 01       	movw	r26, r20
    15d2:	c9 01       	movw	r24, r18
    15d4:	8f 77       	andi	r24, 0x7F	; 127
    15d6:	90 70       	andi	r25, 0x00	; 0
    15d8:	a0 70       	andi	r26, 0x00	; 0
    15da:	b0 70       	andi	r27, 0x00	; 0
    15dc:	80 34       	cpi	r24, 0x40	; 64
    15de:	91 05       	cpc	r25, r1
    15e0:	a1 05       	cpc	r26, r1
    15e2:	b1 05       	cpc	r27, r1
    15e4:	61 f4       	brne	.+24     	; 0x15fe <__divsf3+0x13c>
    15e6:	27 fd       	sbrc	r18, 7
    15e8:	0a c0       	rjmp	.+20     	; 0x15fe <__divsf3+0x13c>
    15ea:	e1 14       	cp	r14, r1
    15ec:	f1 04       	cpc	r15, r1
    15ee:	01 05       	cpc	r16, r1
    15f0:	11 05       	cpc	r17, r1
    15f2:	29 f0       	breq	.+10     	; 0x15fe <__divsf3+0x13c>
    15f4:	20 5c       	subi	r18, 0xC0	; 192
    15f6:	3f 4f       	sbci	r19, 0xFF	; 255
    15f8:	4f 4f       	sbci	r20, 0xFF	; 255
    15fa:	5f 4f       	sbci	r21, 0xFF	; 255
    15fc:	20 78       	andi	r18, 0x80	; 128
    15fe:	2d 87       	std	Y+13, r18	; 0x0d
    1600:	3e 87       	std	Y+14, r19	; 0x0e
    1602:	4f 87       	std	Y+15, r20	; 0x0f
    1604:	58 8b       	std	Y+16, r21	; 0x10
    1606:	be 01       	movw	r22, r28
    1608:	67 5f       	subi	r22, 0xF7	; 247
    160a:	7f 4f       	sbci	r23, 0xFF	; 255
    160c:	cb 01       	movw	r24, r22
    160e:	0e 94 9e 0c 	call	0x193c	; 0x193c <__pack_f>
    1612:	68 96       	adiw	r28, 0x18	; 24
    1614:	ea e0       	ldi	r30, 0x0A	; 10
    1616:	0c 94 68 0e 	jmp	0x1cd0	; 0x1cd0 <__epilogue_restores__+0x10>

0000161a <__gtsf2>:
    161a:	a8 e1       	ldi	r26, 0x18	; 24
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	e3 e1       	ldi	r30, 0x13	; 19
    1620:	fb e0       	ldi	r31, 0x0B	; 11
    1622:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__prologue_saves__+0x18>
    1626:	69 83       	std	Y+1, r22	; 0x01
    1628:	7a 83       	std	Y+2, r23	; 0x02
    162a:	8b 83       	std	Y+3, r24	; 0x03
    162c:	9c 83       	std	Y+4, r25	; 0x04
    162e:	2d 83       	std	Y+5, r18	; 0x05
    1630:	3e 83       	std	Y+6, r19	; 0x06
    1632:	4f 83       	std	Y+7, r20	; 0x07
    1634:	58 87       	std	Y+8, r21	; 0x08
    1636:	89 e0       	ldi	r24, 0x09	; 9
    1638:	e8 2e       	mov	r14, r24
    163a:	f1 2c       	mov	r15, r1
    163c:	ec 0e       	add	r14, r28
    163e:	fd 1e       	adc	r15, r29
    1640:	ce 01       	movw	r24, r28
    1642:	01 96       	adiw	r24, 0x01	; 1
    1644:	b7 01       	movw	r22, r14
    1646:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__unpack_f>
    164a:	8e 01       	movw	r16, r28
    164c:	0f 5e       	subi	r16, 0xEF	; 239
    164e:	1f 4f       	sbci	r17, 0xFF	; 255
    1650:	ce 01       	movw	r24, r28
    1652:	05 96       	adiw	r24, 0x05	; 5
    1654:	b8 01       	movw	r22, r16
    1656:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__unpack_f>
    165a:	89 85       	ldd	r24, Y+9	; 0x09
    165c:	82 30       	cpi	r24, 0x02	; 2
    165e:	40 f0       	brcs	.+16     	; 0x1670 <__gtsf2+0x56>
    1660:	89 89       	ldd	r24, Y+17	; 0x11
    1662:	82 30       	cpi	r24, 0x02	; 2
    1664:	28 f0       	brcs	.+10     	; 0x1670 <__gtsf2+0x56>
    1666:	c7 01       	movw	r24, r14
    1668:	b8 01       	movw	r22, r16
    166a:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <__fpcmp_parts_f>
    166e:	01 c0       	rjmp	.+2      	; 0x1672 <__gtsf2+0x58>
    1670:	8f ef       	ldi	r24, 0xFF	; 255
    1672:	68 96       	adiw	r28, 0x18	; 24
    1674:	e6 e0       	ldi	r30, 0x06	; 6
    1676:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <__epilogue_restores__+0x18>

0000167a <__gesf2>:
    167a:	a8 e1       	ldi	r26, 0x18	; 24
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	e3 e4       	ldi	r30, 0x43	; 67
    1680:	fb e0       	ldi	r31, 0x0B	; 11
    1682:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__prologue_saves__+0x18>
    1686:	69 83       	std	Y+1, r22	; 0x01
    1688:	7a 83       	std	Y+2, r23	; 0x02
    168a:	8b 83       	std	Y+3, r24	; 0x03
    168c:	9c 83       	std	Y+4, r25	; 0x04
    168e:	2d 83       	std	Y+5, r18	; 0x05
    1690:	3e 83       	std	Y+6, r19	; 0x06
    1692:	4f 83       	std	Y+7, r20	; 0x07
    1694:	58 87       	std	Y+8, r21	; 0x08
    1696:	89 e0       	ldi	r24, 0x09	; 9
    1698:	e8 2e       	mov	r14, r24
    169a:	f1 2c       	mov	r15, r1
    169c:	ec 0e       	add	r14, r28
    169e:	fd 1e       	adc	r15, r29
    16a0:	ce 01       	movw	r24, r28
    16a2:	01 96       	adiw	r24, 0x01	; 1
    16a4:	b7 01       	movw	r22, r14
    16a6:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__unpack_f>
    16aa:	8e 01       	movw	r16, r28
    16ac:	0f 5e       	subi	r16, 0xEF	; 239
    16ae:	1f 4f       	sbci	r17, 0xFF	; 255
    16b0:	ce 01       	movw	r24, r28
    16b2:	05 96       	adiw	r24, 0x05	; 5
    16b4:	b8 01       	movw	r22, r16
    16b6:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__unpack_f>
    16ba:	89 85       	ldd	r24, Y+9	; 0x09
    16bc:	82 30       	cpi	r24, 0x02	; 2
    16be:	40 f0       	brcs	.+16     	; 0x16d0 <__gesf2+0x56>
    16c0:	89 89       	ldd	r24, Y+17	; 0x11
    16c2:	82 30       	cpi	r24, 0x02	; 2
    16c4:	28 f0       	brcs	.+10     	; 0x16d0 <__gesf2+0x56>
    16c6:	c7 01       	movw	r24, r14
    16c8:	b8 01       	movw	r22, r16
    16ca:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <__fpcmp_parts_f>
    16ce:	01 c0       	rjmp	.+2      	; 0x16d2 <__gesf2+0x58>
    16d0:	8f ef       	ldi	r24, 0xFF	; 255
    16d2:	68 96       	adiw	r28, 0x18	; 24
    16d4:	e6 e0       	ldi	r30, 0x06	; 6
    16d6:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <__epilogue_restores__+0x18>

000016da <__ltsf2>:
    16da:	a8 e1       	ldi	r26, 0x18	; 24
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	e3 e7       	ldi	r30, 0x73	; 115
    16e0:	fb e0       	ldi	r31, 0x0B	; 11
    16e2:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__prologue_saves__+0x18>
    16e6:	69 83       	std	Y+1, r22	; 0x01
    16e8:	7a 83       	std	Y+2, r23	; 0x02
    16ea:	8b 83       	std	Y+3, r24	; 0x03
    16ec:	9c 83       	std	Y+4, r25	; 0x04
    16ee:	2d 83       	std	Y+5, r18	; 0x05
    16f0:	3e 83       	std	Y+6, r19	; 0x06
    16f2:	4f 83       	std	Y+7, r20	; 0x07
    16f4:	58 87       	std	Y+8, r21	; 0x08
    16f6:	89 e0       	ldi	r24, 0x09	; 9
    16f8:	e8 2e       	mov	r14, r24
    16fa:	f1 2c       	mov	r15, r1
    16fc:	ec 0e       	add	r14, r28
    16fe:	fd 1e       	adc	r15, r29
    1700:	ce 01       	movw	r24, r28
    1702:	01 96       	adiw	r24, 0x01	; 1
    1704:	b7 01       	movw	r22, r14
    1706:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__unpack_f>
    170a:	8e 01       	movw	r16, r28
    170c:	0f 5e       	subi	r16, 0xEF	; 239
    170e:	1f 4f       	sbci	r17, 0xFF	; 255
    1710:	ce 01       	movw	r24, r28
    1712:	05 96       	adiw	r24, 0x05	; 5
    1714:	b8 01       	movw	r22, r16
    1716:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__unpack_f>
    171a:	89 85       	ldd	r24, Y+9	; 0x09
    171c:	82 30       	cpi	r24, 0x02	; 2
    171e:	40 f0       	brcs	.+16     	; 0x1730 <__ltsf2+0x56>
    1720:	89 89       	ldd	r24, Y+17	; 0x11
    1722:	82 30       	cpi	r24, 0x02	; 2
    1724:	28 f0       	brcs	.+10     	; 0x1730 <__ltsf2+0x56>
    1726:	c7 01       	movw	r24, r14
    1728:	b8 01       	movw	r22, r16
    172a:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <__fpcmp_parts_f>
    172e:	01 c0       	rjmp	.+2      	; 0x1732 <__ltsf2+0x58>
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	68 96       	adiw	r28, 0x18	; 24
    1734:	e6 e0       	ldi	r30, 0x06	; 6
    1736:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <__epilogue_restores__+0x18>

0000173a <__floatsisf>:
    173a:	a8 e0       	ldi	r26, 0x08	; 8
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	e3 ea       	ldi	r30, 0xA3	; 163
    1740:	fb e0       	ldi	r31, 0x0B	; 11
    1742:	0c 94 4d 0e 	jmp	0x1c9a	; 0x1c9a <__prologue_saves__+0x12>
    1746:	9b 01       	movw	r18, r22
    1748:	ac 01       	movw	r20, r24
    174a:	83 e0       	ldi	r24, 0x03	; 3
    174c:	89 83       	std	Y+1, r24	; 0x01
    174e:	da 01       	movw	r26, r20
    1750:	c9 01       	movw	r24, r18
    1752:	88 27       	eor	r24, r24
    1754:	b7 fd       	sbrc	r27, 7
    1756:	83 95       	inc	r24
    1758:	99 27       	eor	r25, r25
    175a:	aa 27       	eor	r26, r26
    175c:	bb 27       	eor	r27, r27
    175e:	b8 2e       	mov	r11, r24
    1760:	21 15       	cp	r18, r1
    1762:	31 05       	cpc	r19, r1
    1764:	41 05       	cpc	r20, r1
    1766:	51 05       	cpc	r21, r1
    1768:	19 f4       	brne	.+6      	; 0x1770 <__floatsisf+0x36>
    176a:	82 e0       	ldi	r24, 0x02	; 2
    176c:	89 83       	std	Y+1, r24	; 0x01
    176e:	3a c0       	rjmp	.+116    	; 0x17e4 <__floatsisf+0xaa>
    1770:	88 23       	and	r24, r24
    1772:	a9 f0       	breq	.+42     	; 0x179e <__floatsisf+0x64>
    1774:	20 30       	cpi	r18, 0x00	; 0
    1776:	80 e0       	ldi	r24, 0x00	; 0
    1778:	38 07       	cpc	r19, r24
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	48 07       	cpc	r20, r24
    177e:	80 e8       	ldi	r24, 0x80	; 128
    1780:	58 07       	cpc	r21, r24
    1782:	29 f4       	brne	.+10     	; 0x178e <__floatsisf+0x54>
    1784:	60 e0       	ldi	r22, 0x00	; 0
    1786:	70 e0       	ldi	r23, 0x00	; 0
    1788:	80 e0       	ldi	r24, 0x00	; 0
    178a:	9f ec       	ldi	r25, 0xCF	; 207
    178c:	30 c0       	rjmp	.+96     	; 0x17ee <__floatsisf+0xb4>
    178e:	ee 24       	eor	r14, r14
    1790:	ff 24       	eor	r15, r15
    1792:	87 01       	movw	r16, r14
    1794:	e2 1a       	sub	r14, r18
    1796:	f3 0a       	sbc	r15, r19
    1798:	04 0b       	sbc	r16, r20
    179a:	15 0b       	sbc	r17, r21
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <__floatsisf+0x68>
    179e:	79 01       	movw	r14, r18
    17a0:	8a 01       	movw	r16, r20
    17a2:	8e e1       	ldi	r24, 0x1E	; 30
    17a4:	c8 2e       	mov	r12, r24
    17a6:	d1 2c       	mov	r13, r1
    17a8:	dc 82       	std	Y+4, r13	; 0x04
    17aa:	cb 82       	std	Y+3, r12	; 0x03
    17ac:	ed 82       	std	Y+5, r14	; 0x05
    17ae:	fe 82       	std	Y+6, r15	; 0x06
    17b0:	0f 83       	std	Y+7, r16	; 0x07
    17b2:	18 87       	std	Y+8, r17	; 0x08
    17b4:	c8 01       	movw	r24, r16
    17b6:	b7 01       	movw	r22, r14
    17b8:	0e 94 4f 0c 	call	0x189e	; 0x189e <__clzsi2>
    17bc:	01 97       	sbiw	r24, 0x01	; 1
    17be:	18 16       	cp	r1, r24
    17c0:	19 06       	cpc	r1, r25
    17c2:	84 f4       	brge	.+32     	; 0x17e4 <__floatsisf+0xaa>
    17c4:	08 2e       	mov	r0, r24
    17c6:	04 c0       	rjmp	.+8      	; 0x17d0 <__floatsisf+0x96>
    17c8:	ee 0c       	add	r14, r14
    17ca:	ff 1c       	adc	r15, r15
    17cc:	00 1f       	adc	r16, r16
    17ce:	11 1f       	adc	r17, r17
    17d0:	0a 94       	dec	r0
    17d2:	d2 f7       	brpl	.-12     	; 0x17c8 <__floatsisf+0x8e>
    17d4:	ed 82       	std	Y+5, r14	; 0x05
    17d6:	fe 82       	std	Y+6, r15	; 0x06
    17d8:	0f 83       	std	Y+7, r16	; 0x07
    17da:	18 87       	std	Y+8, r17	; 0x08
    17dc:	c8 1a       	sub	r12, r24
    17de:	d9 0a       	sbc	r13, r25
    17e0:	dc 82       	std	Y+4, r13	; 0x04
    17e2:	cb 82       	std	Y+3, r12	; 0x03
    17e4:	ba 82       	std	Y+2, r11	; 0x02
    17e6:	ce 01       	movw	r24, r28
    17e8:	01 96       	adiw	r24, 0x01	; 1
    17ea:	0e 94 9e 0c 	call	0x193c	; 0x193c <__pack_f>
    17ee:	28 96       	adiw	r28, 0x08	; 8
    17f0:	e9 e0       	ldi	r30, 0x09	; 9
    17f2:	0c 94 69 0e 	jmp	0x1cd2	; 0x1cd2 <__epilogue_restores__+0x12>

000017f6 <__fixsfsi>:
    17f6:	ac e0       	ldi	r26, 0x0C	; 12
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e1 e0       	ldi	r30, 0x01	; 1
    17fc:	fc e0       	ldi	r31, 0x0C	; 12
    17fe:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__prologue_saves__+0x20>
    1802:	69 83       	std	Y+1, r22	; 0x01
    1804:	7a 83       	std	Y+2, r23	; 0x02
    1806:	8b 83       	std	Y+3, r24	; 0x03
    1808:	9c 83       	std	Y+4, r25	; 0x04
    180a:	ce 01       	movw	r24, r28
    180c:	01 96       	adiw	r24, 0x01	; 1
    180e:	be 01       	movw	r22, r28
    1810:	6b 5f       	subi	r22, 0xFB	; 251
    1812:	7f 4f       	sbci	r23, 0xFF	; 255
    1814:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__unpack_f>
    1818:	8d 81       	ldd	r24, Y+5	; 0x05
    181a:	82 30       	cpi	r24, 0x02	; 2
    181c:	61 f1       	breq	.+88     	; 0x1876 <__fixsfsi+0x80>
    181e:	82 30       	cpi	r24, 0x02	; 2
    1820:	50 f1       	brcs	.+84     	; 0x1876 <__fixsfsi+0x80>
    1822:	84 30       	cpi	r24, 0x04	; 4
    1824:	21 f4       	brne	.+8      	; 0x182e <__fixsfsi+0x38>
    1826:	8e 81       	ldd	r24, Y+6	; 0x06
    1828:	88 23       	and	r24, r24
    182a:	51 f1       	breq	.+84     	; 0x1880 <__fixsfsi+0x8a>
    182c:	2e c0       	rjmp	.+92     	; 0x188a <__fixsfsi+0x94>
    182e:	2f 81       	ldd	r18, Y+7	; 0x07
    1830:	38 85       	ldd	r19, Y+8	; 0x08
    1832:	37 fd       	sbrc	r19, 7
    1834:	20 c0       	rjmp	.+64     	; 0x1876 <__fixsfsi+0x80>
    1836:	6e 81       	ldd	r22, Y+6	; 0x06
    1838:	2f 31       	cpi	r18, 0x1F	; 31
    183a:	31 05       	cpc	r19, r1
    183c:	1c f0       	brlt	.+6      	; 0x1844 <__fixsfsi+0x4e>
    183e:	66 23       	and	r22, r22
    1840:	f9 f0       	breq	.+62     	; 0x1880 <__fixsfsi+0x8a>
    1842:	23 c0       	rjmp	.+70     	; 0x188a <__fixsfsi+0x94>
    1844:	8e e1       	ldi	r24, 0x1E	; 30
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	82 1b       	sub	r24, r18
    184a:	93 0b       	sbc	r25, r19
    184c:	29 85       	ldd	r18, Y+9	; 0x09
    184e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1850:	4b 85       	ldd	r20, Y+11	; 0x0b
    1852:	5c 85       	ldd	r21, Y+12	; 0x0c
    1854:	04 c0       	rjmp	.+8      	; 0x185e <__fixsfsi+0x68>
    1856:	56 95       	lsr	r21
    1858:	47 95       	ror	r20
    185a:	37 95       	ror	r19
    185c:	27 95       	ror	r18
    185e:	8a 95       	dec	r24
    1860:	d2 f7       	brpl	.-12     	; 0x1856 <__fixsfsi+0x60>
    1862:	66 23       	and	r22, r22
    1864:	b1 f0       	breq	.+44     	; 0x1892 <__fixsfsi+0x9c>
    1866:	50 95       	com	r21
    1868:	40 95       	com	r20
    186a:	30 95       	com	r19
    186c:	21 95       	neg	r18
    186e:	3f 4f       	sbci	r19, 0xFF	; 255
    1870:	4f 4f       	sbci	r20, 0xFF	; 255
    1872:	5f 4f       	sbci	r21, 0xFF	; 255
    1874:	0e c0       	rjmp	.+28     	; 0x1892 <__fixsfsi+0x9c>
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	40 e0       	ldi	r20, 0x00	; 0
    187c:	50 e0       	ldi	r21, 0x00	; 0
    187e:	09 c0       	rjmp	.+18     	; 0x1892 <__fixsfsi+0x9c>
    1880:	2f ef       	ldi	r18, 0xFF	; 255
    1882:	3f ef       	ldi	r19, 0xFF	; 255
    1884:	4f ef       	ldi	r20, 0xFF	; 255
    1886:	5f e7       	ldi	r21, 0x7F	; 127
    1888:	04 c0       	rjmp	.+8      	; 0x1892 <__fixsfsi+0x9c>
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	40 e0       	ldi	r20, 0x00	; 0
    1890:	50 e8       	ldi	r21, 0x80	; 128
    1892:	b9 01       	movw	r22, r18
    1894:	ca 01       	movw	r24, r20
    1896:	2c 96       	adiw	r28, 0x0c	; 12
    1898:	e2 e0       	ldi	r30, 0x02	; 2
    189a:	0c 94 70 0e 	jmp	0x1ce0	; 0x1ce0 <__epilogue_restores__+0x20>

0000189e <__clzsi2>:
    189e:	ef 92       	push	r14
    18a0:	ff 92       	push	r15
    18a2:	0f 93       	push	r16
    18a4:	1f 93       	push	r17
    18a6:	7b 01       	movw	r14, r22
    18a8:	8c 01       	movw	r16, r24
    18aa:	80 e0       	ldi	r24, 0x00	; 0
    18ac:	e8 16       	cp	r14, r24
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	f8 06       	cpc	r15, r24
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	08 07       	cpc	r16, r24
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    18b8:	18 07       	cpc	r17, r24
    18ba:	88 f4       	brcc	.+34     	; 0x18de <__clzsi2+0x40>
    18bc:	8f ef       	ldi	r24, 0xFF	; 255
    18be:	e8 16       	cp	r14, r24
    18c0:	f1 04       	cpc	r15, r1
    18c2:	01 05       	cpc	r16, r1
    18c4:	11 05       	cpc	r17, r1
    18c6:	31 f0       	breq	.+12     	; 0x18d4 <__clzsi2+0x36>
    18c8:	28 f0       	brcs	.+10     	; 0x18d4 <__clzsi2+0x36>
    18ca:	88 e0       	ldi	r24, 0x08	; 8
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	a0 e0       	ldi	r26, 0x00	; 0
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	17 c0       	rjmp	.+46     	; 0x1902 <__clzsi2+0x64>
    18d4:	80 e0       	ldi	r24, 0x00	; 0
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	a0 e0       	ldi	r26, 0x00	; 0
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	12 c0       	rjmp	.+36     	; 0x1902 <__clzsi2+0x64>
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	e8 16       	cp	r14, r24
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	f8 06       	cpc	r15, r24
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	08 07       	cpc	r16, r24
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	18 07       	cpc	r17, r24
    18ee:	28 f0       	brcs	.+10     	; 0x18fa <__clzsi2+0x5c>
    18f0:	88 e1       	ldi	r24, 0x18	; 24
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	a0 e0       	ldi	r26, 0x00	; 0
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	04 c0       	rjmp	.+8      	; 0x1902 <__clzsi2+0x64>
    18fa:	80 e1       	ldi	r24, 0x10	; 16
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	a0 e0       	ldi	r26, 0x00	; 0
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	20 e2       	ldi	r18, 0x20	; 32
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	40 e0       	ldi	r20, 0x00	; 0
    1908:	50 e0       	ldi	r21, 0x00	; 0
    190a:	28 1b       	sub	r18, r24
    190c:	39 0b       	sbc	r19, r25
    190e:	4a 0b       	sbc	r20, r26
    1910:	5b 0b       	sbc	r21, r27
    1912:	04 c0       	rjmp	.+8      	; 0x191c <__clzsi2+0x7e>
    1914:	16 95       	lsr	r17
    1916:	07 95       	ror	r16
    1918:	f7 94       	ror	r15
    191a:	e7 94       	ror	r14
    191c:	8a 95       	dec	r24
    191e:	d2 f7       	brpl	.-12     	; 0x1914 <__clzsi2+0x76>
    1920:	f7 01       	movw	r30, r14
    1922:	e5 5f       	subi	r30, 0xF5	; 245
    1924:	fe 4f       	sbci	r31, 0xFE	; 254
    1926:	80 81       	ld	r24, Z
    1928:	28 1b       	sub	r18, r24
    192a:	31 09       	sbc	r19, r1
    192c:	41 09       	sbc	r20, r1
    192e:	51 09       	sbc	r21, r1
    1930:	c9 01       	movw	r24, r18
    1932:	1f 91       	pop	r17
    1934:	0f 91       	pop	r16
    1936:	ff 90       	pop	r15
    1938:	ef 90       	pop	r14
    193a:	08 95       	ret

0000193c <__pack_f>:
    193c:	df 92       	push	r13
    193e:	ef 92       	push	r14
    1940:	ff 92       	push	r15
    1942:	0f 93       	push	r16
    1944:	1f 93       	push	r17
    1946:	fc 01       	movw	r30, r24
    1948:	e4 80       	ldd	r14, Z+4	; 0x04
    194a:	f5 80       	ldd	r15, Z+5	; 0x05
    194c:	06 81       	ldd	r16, Z+6	; 0x06
    194e:	17 81       	ldd	r17, Z+7	; 0x07
    1950:	d1 80       	ldd	r13, Z+1	; 0x01
    1952:	80 81       	ld	r24, Z
    1954:	82 30       	cpi	r24, 0x02	; 2
    1956:	48 f4       	brcc	.+18     	; 0x196a <__pack_f+0x2e>
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	a0 e1       	ldi	r26, 0x10	; 16
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	e8 2a       	or	r14, r24
    1962:	f9 2a       	or	r15, r25
    1964:	0a 2b       	or	r16, r26
    1966:	1b 2b       	or	r17, r27
    1968:	a5 c0       	rjmp	.+330    	; 0x1ab4 <__pack_f+0x178>
    196a:	84 30       	cpi	r24, 0x04	; 4
    196c:	09 f4       	brne	.+2      	; 0x1970 <__pack_f+0x34>
    196e:	9f c0       	rjmp	.+318    	; 0x1aae <__pack_f+0x172>
    1970:	82 30       	cpi	r24, 0x02	; 2
    1972:	21 f4       	brne	.+8      	; 0x197c <__pack_f+0x40>
    1974:	ee 24       	eor	r14, r14
    1976:	ff 24       	eor	r15, r15
    1978:	87 01       	movw	r16, r14
    197a:	05 c0       	rjmp	.+10     	; 0x1986 <__pack_f+0x4a>
    197c:	e1 14       	cp	r14, r1
    197e:	f1 04       	cpc	r15, r1
    1980:	01 05       	cpc	r16, r1
    1982:	11 05       	cpc	r17, r1
    1984:	19 f4       	brne	.+6      	; 0x198c <__pack_f+0x50>
    1986:	e0 e0       	ldi	r30, 0x00	; 0
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	96 c0       	rjmp	.+300    	; 0x1ab8 <__pack_f+0x17c>
    198c:	62 81       	ldd	r22, Z+2	; 0x02
    198e:	73 81       	ldd	r23, Z+3	; 0x03
    1990:	9f ef       	ldi	r25, 0xFF	; 255
    1992:	62 38       	cpi	r22, 0x82	; 130
    1994:	79 07       	cpc	r23, r25
    1996:	0c f0       	brlt	.+2      	; 0x199a <__pack_f+0x5e>
    1998:	5b c0       	rjmp	.+182    	; 0x1a50 <__pack_f+0x114>
    199a:	22 e8       	ldi	r18, 0x82	; 130
    199c:	3f ef       	ldi	r19, 0xFF	; 255
    199e:	26 1b       	sub	r18, r22
    19a0:	37 0b       	sbc	r19, r23
    19a2:	2a 31       	cpi	r18, 0x1A	; 26
    19a4:	31 05       	cpc	r19, r1
    19a6:	2c f0       	brlt	.+10     	; 0x19b2 <__pack_f+0x76>
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	40 e0       	ldi	r20, 0x00	; 0
    19ae:	50 e0       	ldi	r21, 0x00	; 0
    19b0:	2a c0       	rjmp	.+84     	; 0x1a06 <__pack_f+0xca>
    19b2:	b8 01       	movw	r22, r16
    19b4:	a7 01       	movw	r20, r14
    19b6:	02 2e       	mov	r0, r18
    19b8:	04 c0       	rjmp	.+8      	; 0x19c2 <__pack_f+0x86>
    19ba:	76 95       	lsr	r23
    19bc:	67 95       	ror	r22
    19be:	57 95       	ror	r21
    19c0:	47 95       	ror	r20
    19c2:	0a 94       	dec	r0
    19c4:	d2 f7       	brpl	.-12     	; 0x19ba <__pack_f+0x7e>
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	a0 e0       	ldi	r26, 0x00	; 0
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	04 c0       	rjmp	.+8      	; 0x19d8 <__pack_f+0x9c>
    19d0:	88 0f       	add	r24, r24
    19d2:	99 1f       	adc	r25, r25
    19d4:	aa 1f       	adc	r26, r26
    19d6:	bb 1f       	adc	r27, r27
    19d8:	2a 95       	dec	r18
    19da:	d2 f7       	brpl	.-12     	; 0x19d0 <__pack_f+0x94>
    19dc:	01 97       	sbiw	r24, 0x01	; 1
    19de:	a1 09       	sbc	r26, r1
    19e0:	b1 09       	sbc	r27, r1
    19e2:	8e 21       	and	r24, r14
    19e4:	9f 21       	and	r25, r15
    19e6:	a0 23       	and	r26, r16
    19e8:	b1 23       	and	r27, r17
    19ea:	00 97       	sbiw	r24, 0x00	; 0
    19ec:	a1 05       	cpc	r26, r1
    19ee:	b1 05       	cpc	r27, r1
    19f0:	21 f0       	breq	.+8      	; 0x19fa <__pack_f+0xbe>
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	a0 e0       	ldi	r26, 0x00	; 0
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	9a 01       	movw	r18, r20
    19fc:	ab 01       	movw	r20, r22
    19fe:	28 2b       	or	r18, r24
    1a00:	39 2b       	or	r19, r25
    1a02:	4a 2b       	or	r20, r26
    1a04:	5b 2b       	or	r21, r27
    1a06:	da 01       	movw	r26, r20
    1a08:	c9 01       	movw	r24, r18
    1a0a:	8f 77       	andi	r24, 0x7F	; 127
    1a0c:	90 70       	andi	r25, 0x00	; 0
    1a0e:	a0 70       	andi	r26, 0x00	; 0
    1a10:	b0 70       	andi	r27, 0x00	; 0
    1a12:	80 34       	cpi	r24, 0x40	; 64
    1a14:	91 05       	cpc	r25, r1
    1a16:	a1 05       	cpc	r26, r1
    1a18:	b1 05       	cpc	r27, r1
    1a1a:	39 f4       	brne	.+14     	; 0x1a2a <__pack_f+0xee>
    1a1c:	27 ff       	sbrs	r18, 7
    1a1e:	09 c0       	rjmp	.+18     	; 0x1a32 <__pack_f+0xf6>
    1a20:	20 5c       	subi	r18, 0xC0	; 192
    1a22:	3f 4f       	sbci	r19, 0xFF	; 255
    1a24:	4f 4f       	sbci	r20, 0xFF	; 255
    1a26:	5f 4f       	sbci	r21, 0xFF	; 255
    1a28:	04 c0       	rjmp	.+8      	; 0x1a32 <__pack_f+0xf6>
    1a2a:	21 5c       	subi	r18, 0xC1	; 193
    1a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a2e:	4f 4f       	sbci	r20, 0xFF	; 255
    1a30:	5f 4f       	sbci	r21, 0xFF	; 255
    1a32:	e0 e0       	ldi	r30, 0x00	; 0
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	20 30       	cpi	r18, 0x00	; 0
    1a38:	a0 e0       	ldi	r26, 0x00	; 0
    1a3a:	3a 07       	cpc	r19, r26
    1a3c:	a0 e0       	ldi	r26, 0x00	; 0
    1a3e:	4a 07       	cpc	r20, r26
    1a40:	a0 e4       	ldi	r26, 0x40	; 64
    1a42:	5a 07       	cpc	r21, r26
    1a44:	10 f0       	brcs	.+4      	; 0x1a4a <__pack_f+0x10e>
    1a46:	e1 e0       	ldi	r30, 0x01	; 1
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	79 01       	movw	r14, r18
    1a4c:	8a 01       	movw	r16, r20
    1a4e:	27 c0       	rjmp	.+78     	; 0x1a9e <__pack_f+0x162>
    1a50:	60 38       	cpi	r22, 0x80	; 128
    1a52:	71 05       	cpc	r23, r1
    1a54:	64 f5       	brge	.+88     	; 0x1aae <__pack_f+0x172>
    1a56:	fb 01       	movw	r30, r22
    1a58:	e1 58       	subi	r30, 0x81	; 129
    1a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5c:	d8 01       	movw	r26, r16
    1a5e:	c7 01       	movw	r24, r14
    1a60:	8f 77       	andi	r24, 0x7F	; 127
    1a62:	90 70       	andi	r25, 0x00	; 0
    1a64:	a0 70       	andi	r26, 0x00	; 0
    1a66:	b0 70       	andi	r27, 0x00	; 0
    1a68:	80 34       	cpi	r24, 0x40	; 64
    1a6a:	91 05       	cpc	r25, r1
    1a6c:	a1 05       	cpc	r26, r1
    1a6e:	b1 05       	cpc	r27, r1
    1a70:	39 f4       	brne	.+14     	; 0x1a80 <__pack_f+0x144>
    1a72:	e7 fe       	sbrs	r14, 7
    1a74:	0d c0       	rjmp	.+26     	; 0x1a90 <__pack_f+0x154>
    1a76:	80 e4       	ldi	r24, 0x40	; 64
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	a0 e0       	ldi	r26, 0x00	; 0
    1a7c:	b0 e0       	ldi	r27, 0x00	; 0
    1a7e:	04 c0       	rjmp	.+8      	; 0x1a88 <__pack_f+0x14c>
    1a80:	8f e3       	ldi	r24, 0x3F	; 63
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	a0 e0       	ldi	r26, 0x00	; 0
    1a86:	b0 e0       	ldi	r27, 0x00	; 0
    1a88:	e8 0e       	add	r14, r24
    1a8a:	f9 1e       	adc	r15, r25
    1a8c:	0a 1f       	adc	r16, r26
    1a8e:	1b 1f       	adc	r17, r27
    1a90:	17 ff       	sbrs	r17, 7
    1a92:	05 c0       	rjmp	.+10     	; 0x1a9e <__pack_f+0x162>
    1a94:	16 95       	lsr	r17
    1a96:	07 95       	ror	r16
    1a98:	f7 94       	ror	r15
    1a9a:	e7 94       	ror	r14
    1a9c:	31 96       	adiw	r30, 0x01	; 1
    1a9e:	87 e0       	ldi	r24, 0x07	; 7
    1aa0:	16 95       	lsr	r17
    1aa2:	07 95       	ror	r16
    1aa4:	f7 94       	ror	r15
    1aa6:	e7 94       	ror	r14
    1aa8:	8a 95       	dec	r24
    1aaa:	d1 f7       	brne	.-12     	; 0x1aa0 <__pack_f+0x164>
    1aac:	05 c0       	rjmp	.+10     	; 0x1ab8 <__pack_f+0x17c>
    1aae:	ee 24       	eor	r14, r14
    1ab0:	ff 24       	eor	r15, r15
    1ab2:	87 01       	movw	r16, r14
    1ab4:	ef ef       	ldi	r30, 0xFF	; 255
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	6e 2f       	mov	r22, r30
    1aba:	67 95       	ror	r22
    1abc:	66 27       	eor	r22, r22
    1abe:	67 95       	ror	r22
    1ac0:	90 2f       	mov	r25, r16
    1ac2:	9f 77       	andi	r25, 0x7F	; 127
    1ac4:	d7 94       	ror	r13
    1ac6:	dd 24       	eor	r13, r13
    1ac8:	d7 94       	ror	r13
    1aca:	8e 2f       	mov	r24, r30
    1acc:	86 95       	lsr	r24
    1ace:	49 2f       	mov	r20, r25
    1ad0:	46 2b       	or	r20, r22
    1ad2:	58 2f       	mov	r21, r24
    1ad4:	5d 29       	or	r21, r13
    1ad6:	b7 01       	movw	r22, r14
    1ad8:	ca 01       	movw	r24, r20
    1ada:	1f 91       	pop	r17
    1adc:	0f 91       	pop	r16
    1ade:	ff 90       	pop	r15
    1ae0:	ef 90       	pop	r14
    1ae2:	df 90       	pop	r13
    1ae4:	08 95       	ret

00001ae6 <__unpack_f>:
    1ae6:	fc 01       	movw	r30, r24
    1ae8:	db 01       	movw	r26, r22
    1aea:	40 81       	ld	r20, Z
    1aec:	51 81       	ldd	r21, Z+1	; 0x01
    1aee:	22 81       	ldd	r18, Z+2	; 0x02
    1af0:	62 2f       	mov	r22, r18
    1af2:	6f 77       	andi	r22, 0x7F	; 127
    1af4:	70 e0       	ldi	r23, 0x00	; 0
    1af6:	22 1f       	adc	r18, r18
    1af8:	22 27       	eor	r18, r18
    1afa:	22 1f       	adc	r18, r18
    1afc:	93 81       	ldd	r25, Z+3	; 0x03
    1afe:	89 2f       	mov	r24, r25
    1b00:	88 0f       	add	r24, r24
    1b02:	82 2b       	or	r24, r18
    1b04:	28 2f       	mov	r18, r24
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	99 1f       	adc	r25, r25
    1b0a:	99 27       	eor	r25, r25
    1b0c:	99 1f       	adc	r25, r25
    1b0e:	11 96       	adiw	r26, 0x01	; 1
    1b10:	9c 93       	st	X, r25
    1b12:	11 97       	sbiw	r26, 0x01	; 1
    1b14:	21 15       	cp	r18, r1
    1b16:	31 05       	cpc	r19, r1
    1b18:	a9 f5       	brne	.+106    	; 0x1b84 <__unpack_f+0x9e>
    1b1a:	41 15       	cp	r20, r1
    1b1c:	51 05       	cpc	r21, r1
    1b1e:	61 05       	cpc	r22, r1
    1b20:	71 05       	cpc	r23, r1
    1b22:	11 f4       	brne	.+4      	; 0x1b28 <__unpack_f+0x42>
    1b24:	82 e0       	ldi	r24, 0x02	; 2
    1b26:	37 c0       	rjmp	.+110    	; 0x1b96 <__unpack_f+0xb0>
    1b28:	82 e8       	ldi	r24, 0x82	; 130
    1b2a:	9f ef       	ldi	r25, 0xFF	; 255
    1b2c:	13 96       	adiw	r26, 0x03	; 3
    1b2e:	9c 93       	st	X, r25
    1b30:	8e 93       	st	-X, r24
    1b32:	12 97       	sbiw	r26, 0x02	; 2
    1b34:	9a 01       	movw	r18, r20
    1b36:	ab 01       	movw	r20, r22
    1b38:	67 e0       	ldi	r22, 0x07	; 7
    1b3a:	22 0f       	add	r18, r18
    1b3c:	33 1f       	adc	r19, r19
    1b3e:	44 1f       	adc	r20, r20
    1b40:	55 1f       	adc	r21, r21
    1b42:	6a 95       	dec	r22
    1b44:	d1 f7       	brne	.-12     	; 0x1b3a <__unpack_f+0x54>
    1b46:	83 e0       	ldi	r24, 0x03	; 3
    1b48:	8c 93       	st	X, r24
    1b4a:	0d c0       	rjmp	.+26     	; 0x1b66 <__unpack_f+0x80>
    1b4c:	22 0f       	add	r18, r18
    1b4e:	33 1f       	adc	r19, r19
    1b50:	44 1f       	adc	r20, r20
    1b52:	55 1f       	adc	r21, r21
    1b54:	12 96       	adiw	r26, 0x02	; 2
    1b56:	8d 91       	ld	r24, X+
    1b58:	9c 91       	ld	r25, X
    1b5a:	13 97       	sbiw	r26, 0x03	; 3
    1b5c:	01 97       	sbiw	r24, 0x01	; 1
    1b5e:	13 96       	adiw	r26, 0x03	; 3
    1b60:	9c 93       	st	X, r25
    1b62:	8e 93       	st	-X, r24
    1b64:	12 97       	sbiw	r26, 0x02	; 2
    1b66:	20 30       	cpi	r18, 0x00	; 0
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	38 07       	cpc	r19, r24
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	48 07       	cpc	r20, r24
    1b70:	80 e4       	ldi	r24, 0x40	; 64
    1b72:	58 07       	cpc	r21, r24
    1b74:	58 f3       	brcs	.-42     	; 0x1b4c <__unpack_f+0x66>
    1b76:	14 96       	adiw	r26, 0x04	; 4
    1b78:	2d 93       	st	X+, r18
    1b7a:	3d 93       	st	X+, r19
    1b7c:	4d 93       	st	X+, r20
    1b7e:	5c 93       	st	X, r21
    1b80:	17 97       	sbiw	r26, 0x07	; 7
    1b82:	08 95       	ret
    1b84:	2f 3f       	cpi	r18, 0xFF	; 255
    1b86:	31 05       	cpc	r19, r1
    1b88:	79 f4       	brne	.+30     	; 0x1ba8 <__unpack_f+0xc2>
    1b8a:	41 15       	cp	r20, r1
    1b8c:	51 05       	cpc	r21, r1
    1b8e:	61 05       	cpc	r22, r1
    1b90:	71 05       	cpc	r23, r1
    1b92:	19 f4       	brne	.+6      	; 0x1b9a <__unpack_f+0xb4>
    1b94:	84 e0       	ldi	r24, 0x04	; 4
    1b96:	8c 93       	st	X, r24
    1b98:	08 95       	ret
    1b9a:	64 ff       	sbrs	r22, 4
    1b9c:	03 c0       	rjmp	.+6      	; 0x1ba4 <__unpack_f+0xbe>
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	8c 93       	st	X, r24
    1ba2:	12 c0       	rjmp	.+36     	; 0x1bc8 <__unpack_f+0xe2>
    1ba4:	1c 92       	st	X, r1
    1ba6:	10 c0       	rjmp	.+32     	; 0x1bc8 <__unpack_f+0xe2>
    1ba8:	2f 57       	subi	r18, 0x7F	; 127
    1baa:	30 40       	sbci	r19, 0x00	; 0
    1bac:	13 96       	adiw	r26, 0x03	; 3
    1bae:	3c 93       	st	X, r19
    1bb0:	2e 93       	st	-X, r18
    1bb2:	12 97       	sbiw	r26, 0x02	; 2
    1bb4:	83 e0       	ldi	r24, 0x03	; 3
    1bb6:	8c 93       	st	X, r24
    1bb8:	87 e0       	ldi	r24, 0x07	; 7
    1bba:	44 0f       	add	r20, r20
    1bbc:	55 1f       	adc	r21, r21
    1bbe:	66 1f       	adc	r22, r22
    1bc0:	77 1f       	adc	r23, r23
    1bc2:	8a 95       	dec	r24
    1bc4:	d1 f7       	brne	.-12     	; 0x1bba <__unpack_f+0xd4>
    1bc6:	70 64       	ori	r23, 0x40	; 64
    1bc8:	14 96       	adiw	r26, 0x04	; 4
    1bca:	4d 93       	st	X+, r20
    1bcc:	5d 93       	st	X+, r21
    1bce:	6d 93       	st	X+, r22
    1bd0:	7c 93       	st	X, r23
    1bd2:	17 97       	sbiw	r26, 0x07	; 7
    1bd4:	08 95       	ret

00001bd6 <__fpcmp_parts_f>:
    1bd6:	1f 93       	push	r17
    1bd8:	dc 01       	movw	r26, r24
    1bda:	fb 01       	movw	r30, r22
    1bdc:	9c 91       	ld	r25, X
    1bde:	92 30       	cpi	r25, 0x02	; 2
    1be0:	08 f4       	brcc	.+2      	; 0x1be4 <__fpcmp_parts_f+0xe>
    1be2:	47 c0       	rjmp	.+142    	; 0x1c72 <__fpcmp_parts_f+0x9c>
    1be4:	80 81       	ld	r24, Z
    1be6:	82 30       	cpi	r24, 0x02	; 2
    1be8:	08 f4       	brcc	.+2      	; 0x1bec <__fpcmp_parts_f+0x16>
    1bea:	43 c0       	rjmp	.+134    	; 0x1c72 <__fpcmp_parts_f+0x9c>
    1bec:	94 30       	cpi	r25, 0x04	; 4
    1bee:	51 f4       	brne	.+20     	; 0x1c04 <__fpcmp_parts_f+0x2e>
    1bf0:	11 96       	adiw	r26, 0x01	; 1
    1bf2:	1c 91       	ld	r17, X
    1bf4:	84 30       	cpi	r24, 0x04	; 4
    1bf6:	99 f5       	brne	.+102    	; 0x1c5e <__fpcmp_parts_f+0x88>
    1bf8:	81 81       	ldd	r24, Z+1	; 0x01
    1bfa:	68 2f       	mov	r22, r24
    1bfc:	70 e0       	ldi	r23, 0x00	; 0
    1bfe:	61 1b       	sub	r22, r17
    1c00:	71 09       	sbc	r23, r1
    1c02:	3f c0       	rjmp	.+126    	; 0x1c82 <__fpcmp_parts_f+0xac>
    1c04:	84 30       	cpi	r24, 0x04	; 4
    1c06:	21 f0       	breq	.+8      	; 0x1c10 <__fpcmp_parts_f+0x3a>
    1c08:	92 30       	cpi	r25, 0x02	; 2
    1c0a:	31 f4       	brne	.+12     	; 0x1c18 <__fpcmp_parts_f+0x42>
    1c0c:	82 30       	cpi	r24, 0x02	; 2
    1c0e:	b9 f1       	breq	.+110    	; 0x1c7e <__fpcmp_parts_f+0xa8>
    1c10:	81 81       	ldd	r24, Z+1	; 0x01
    1c12:	88 23       	and	r24, r24
    1c14:	89 f1       	breq	.+98     	; 0x1c78 <__fpcmp_parts_f+0xa2>
    1c16:	2d c0       	rjmp	.+90     	; 0x1c72 <__fpcmp_parts_f+0x9c>
    1c18:	11 96       	adiw	r26, 0x01	; 1
    1c1a:	1c 91       	ld	r17, X
    1c1c:	11 97       	sbiw	r26, 0x01	; 1
    1c1e:	82 30       	cpi	r24, 0x02	; 2
    1c20:	f1 f0       	breq	.+60     	; 0x1c5e <__fpcmp_parts_f+0x88>
    1c22:	81 81       	ldd	r24, Z+1	; 0x01
    1c24:	18 17       	cp	r17, r24
    1c26:	d9 f4       	brne	.+54     	; 0x1c5e <__fpcmp_parts_f+0x88>
    1c28:	12 96       	adiw	r26, 0x02	; 2
    1c2a:	2d 91       	ld	r18, X+
    1c2c:	3c 91       	ld	r19, X
    1c2e:	13 97       	sbiw	r26, 0x03	; 3
    1c30:	82 81       	ldd	r24, Z+2	; 0x02
    1c32:	93 81       	ldd	r25, Z+3	; 0x03
    1c34:	82 17       	cp	r24, r18
    1c36:	93 07       	cpc	r25, r19
    1c38:	94 f0       	brlt	.+36     	; 0x1c5e <__fpcmp_parts_f+0x88>
    1c3a:	28 17       	cp	r18, r24
    1c3c:	39 07       	cpc	r19, r25
    1c3e:	bc f0       	brlt	.+46     	; 0x1c6e <__fpcmp_parts_f+0x98>
    1c40:	14 96       	adiw	r26, 0x04	; 4
    1c42:	8d 91       	ld	r24, X+
    1c44:	9d 91       	ld	r25, X+
    1c46:	0d 90       	ld	r0, X+
    1c48:	bc 91       	ld	r27, X
    1c4a:	a0 2d       	mov	r26, r0
    1c4c:	24 81       	ldd	r18, Z+4	; 0x04
    1c4e:	35 81       	ldd	r19, Z+5	; 0x05
    1c50:	46 81       	ldd	r20, Z+6	; 0x06
    1c52:	57 81       	ldd	r21, Z+7	; 0x07
    1c54:	28 17       	cp	r18, r24
    1c56:	39 07       	cpc	r19, r25
    1c58:	4a 07       	cpc	r20, r26
    1c5a:	5b 07       	cpc	r21, r27
    1c5c:	18 f4       	brcc	.+6      	; 0x1c64 <__fpcmp_parts_f+0x8e>
    1c5e:	11 23       	and	r17, r17
    1c60:	41 f0       	breq	.+16     	; 0x1c72 <__fpcmp_parts_f+0x9c>
    1c62:	0a c0       	rjmp	.+20     	; 0x1c78 <__fpcmp_parts_f+0xa2>
    1c64:	82 17       	cp	r24, r18
    1c66:	93 07       	cpc	r25, r19
    1c68:	a4 07       	cpc	r26, r20
    1c6a:	b5 07       	cpc	r27, r21
    1c6c:	40 f4       	brcc	.+16     	; 0x1c7e <__fpcmp_parts_f+0xa8>
    1c6e:	11 23       	and	r17, r17
    1c70:	19 f0       	breq	.+6      	; 0x1c78 <__fpcmp_parts_f+0xa2>
    1c72:	61 e0       	ldi	r22, 0x01	; 1
    1c74:	70 e0       	ldi	r23, 0x00	; 0
    1c76:	05 c0       	rjmp	.+10     	; 0x1c82 <__fpcmp_parts_f+0xac>
    1c78:	6f ef       	ldi	r22, 0xFF	; 255
    1c7a:	7f ef       	ldi	r23, 0xFF	; 255
    1c7c:	02 c0       	rjmp	.+4      	; 0x1c82 <__fpcmp_parts_f+0xac>
    1c7e:	60 e0       	ldi	r22, 0x00	; 0
    1c80:	70 e0       	ldi	r23, 0x00	; 0
    1c82:	cb 01       	movw	r24, r22
    1c84:	1f 91       	pop	r17
    1c86:	08 95       	ret

00001c88 <__prologue_saves__>:
    1c88:	2f 92       	push	r2
    1c8a:	3f 92       	push	r3
    1c8c:	4f 92       	push	r4
    1c8e:	5f 92       	push	r5
    1c90:	6f 92       	push	r6
    1c92:	7f 92       	push	r7
    1c94:	8f 92       	push	r8
    1c96:	9f 92       	push	r9
    1c98:	af 92       	push	r10
    1c9a:	bf 92       	push	r11
    1c9c:	cf 92       	push	r12
    1c9e:	df 92       	push	r13
    1ca0:	ef 92       	push	r14
    1ca2:	ff 92       	push	r15
    1ca4:	0f 93       	push	r16
    1ca6:	1f 93       	push	r17
    1ca8:	cf 93       	push	r28
    1caa:	df 93       	push	r29
    1cac:	cd b7       	in	r28, 0x3d	; 61
    1cae:	de b7       	in	r29, 0x3e	; 62
    1cb0:	ca 1b       	sub	r28, r26
    1cb2:	db 0b       	sbc	r29, r27
    1cb4:	0f b6       	in	r0, 0x3f	; 63
    1cb6:	f8 94       	cli
    1cb8:	de bf       	out	0x3e, r29	; 62
    1cba:	0f be       	out	0x3f, r0	; 63
    1cbc:	cd bf       	out	0x3d, r28	; 61
    1cbe:	09 94       	ijmp

00001cc0 <__epilogue_restores__>:
    1cc0:	2a 88       	ldd	r2, Y+18	; 0x12
    1cc2:	39 88       	ldd	r3, Y+17	; 0x11
    1cc4:	48 88       	ldd	r4, Y+16	; 0x10
    1cc6:	5f 84       	ldd	r5, Y+15	; 0x0f
    1cc8:	6e 84       	ldd	r6, Y+14	; 0x0e
    1cca:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ccc:	8c 84       	ldd	r8, Y+12	; 0x0c
    1cce:	9b 84       	ldd	r9, Y+11	; 0x0b
    1cd0:	aa 84       	ldd	r10, Y+10	; 0x0a
    1cd2:	b9 84       	ldd	r11, Y+9	; 0x09
    1cd4:	c8 84       	ldd	r12, Y+8	; 0x08
    1cd6:	df 80       	ldd	r13, Y+7	; 0x07
    1cd8:	ee 80       	ldd	r14, Y+6	; 0x06
    1cda:	fd 80       	ldd	r15, Y+5	; 0x05
    1cdc:	0c 81       	ldd	r16, Y+4	; 0x04
    1cde:	1b 81       	ldd	r17, Y+3	; 0x03
    1ce0:	aa 81       	ldd	r26, Y+2	; 0x02
    1ce2:	b9 81       	ldd	r27, Y+1	; 0x01
    1ce4:	ce 0f       	add	r28, r30
    1ce6:	d1 1d       	adc	r29, r1
    1ce8:	0f b6       	in	r0, 0x3f	; 63
    1cea:	f8 94       	cli
    1cec:	de bf       	out	0x3e, r29	; 62
    1cee:	0f be       	out	0x3f, r0	; 63
    1cf0:	cd bf       	out	0x3d, r28	; 61
    1cf2:	ed 01       	movw	r28, r26
    1cf4:	08 95       	ret

00001cf6 <dtostrf>:
    1cf6:	ef 92       	push	r14
    1cf8:	ff 92       	push	r15
    1cfa:	0f 93       	push	r16
    1cfc:	1f 93       	push	r17
    1cfe:	f2 2f       	mov	r31, r18
    1d00:	f0 2e       	mov	r15, r16
    1d02:	47 fd       	sbrc	r20, 7
    1d04:	02 c0       	rjmp	.+4      	; 0x1d0a <dtostrf+0x14>
    1d06:	e4 e0       	ldi	r30, 0x04	; 4
    1d08:	01 c0       	rjmp	.+2      	; 0x1d0c <dtostrf+0x16>
    1d0a:	e4 e1       	ldi	r30, 0x14	; 20
    1d0c:	24 2f       	mov	r18, r20
    1d0e:	33 27       	eor	r19, r19
    1d10:	27 fd       	sbrc	r18, 7
    1d12:	30 95       	com	r19
    1d14:	37 ff       	sbrs	r19, 7
    1d16:	03 c0       	rjmp	.+6      	; 0x1d1e <dtostrf+0x28>
    1d18:	30 95       	com	r19
    1d1a:	21 95       	neg	r18
    1d1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d1e:	4f 2d       	mov	r20, r15
    1d20:	51 2f       	mov	r21, r17
    1d22:	0f 2f       	mov	r16, r31
    1d24:	ee 2e       	mov	r14, r30
    1d26:	0e 94 66 10 	call	0x20cc	; 0x20cc <dtoa_prf>
    1d2a:	8f 2d       	mov	r24, r15
    1d2c:	91 2f       	mov	r25, r17
    1d2e:	1f 91       	pop	r17
    1d30:	0f 91       	pop	r16
    1d32:	ff 90       	pop	r15
    1d34:	ef 90       	pop	r14
    1d36:	08 95       	ret

00001d38 <itoa>:
    1d38:	fb 01       	movw	r30, r22
    1d3a:	9f 01       	movw	r18, r30
    1d3c:	e8 94       	clt
    1d3e:	42 30       	cpi	r20, 0x02	; 2
    1d40:	c4 f0       	brlt	.+48     	; 0x1d72 <itoa+0x3a>
    1d42:	45 32       	cpi	r20, 0x25	; 37
    1d44:	b4 f4       	brge	.+44     	; 0x1d72 <itoa+0x3a>
    1d46:	4a 30       	cpi	r20, 0x0A	; 10
    1d48:	29 f4       	brne	.+10     	; 0x1d54 <itoa+0x1c>
    1d4a:	97 fb       	bst	r25, 7
    1d4c:	1e f4       	brtc	.+6      	; 0x1d54 <itoa+0x1c>
    1d4e:	90 95       	com	r25
    1d50:	81 95       	neg	r24
    1d52:	9f 4f       	sbci	r25, 0xFF	; 255
    1d54:	64 2f       	mov	r22, r20
    1d56:	77 27       	eor	r23, r23
    1d58:	0e 94 10 13 	call	0x2620	; 0x2620 <__udivmodhi4>
    1d5c:	80 5d       	subi	r24, 0xD0	; 208
    1d5e:	8a 33       	cpi	r24, 0x3A	; 58
    1d60:	0c f0       	brlt	.+2      	; 0x1d64 <itoa+0x2c>
    1d62:	89 5d       	subi	r24, 0xD9	; 217
    1d64:	81 93       	st	Z+, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	00 97       	sbiw	r24, 0x00	; 0
    1d6a:	a1 f7       	brne	.-24     	; 0x1d54 <itoa+0x1c>
    1d6c:	16 f4       	brtc	.+4      	; 0x1d72 <itoa+0x3a>
    1d6e:	5d e2       	ldi	r21, 0x2D	; 45
    1d70:	51 93       	st	Z+, r21
    1d72:	10 82       	st	Z, r1
    1d74:	c9 01       	movw	r24, r18
    1d76:	0c 94 a0 12 	jmp	0x2540	; 0x2540 <strrev>
    1d7a:	f5 d0       	rcall	.+490    	; 0x1f66 <__fp_pscA>
    1d7c:	58 f0       	brcs	.+22     	; 0x1d94 <itoa+0x5c>
    1d7e:	80 e8       	ldi	r24, 0x80	; 128
    1d80:	91 e0       	ldi	r25, 0x01	; 1
    1d82:	09 f4       	brne	.+2      	; 0x1d86 <itoa+0x4e>
    1d84:	9e ef       	ldi	r25, 0xFE	; 254
    1d86:	f6 d0       	rcall	.+492    	; 0x1f74 <__fp_pscB>
    1d88:	28 f0       	brcs	.+10     	; 0x1d94 <itoa+0x5c>
    1d8a:	40 e8       	ldi	r20, 0x80	; 128
    1d8c:	51 e0       	ldi	r21, 0x01	; 1
    1d8e:	59 f4       	brne	.+22     	; 0x1da6 <atan2+0xe>
    1d90:	5e ef       	ldi	r21, 0xFE	; 254
    1d92:	09 c0       	rjmp	.+18     	; 0x1da6 <atan2+0xe>
    1d94:	c0 c0       	rjmp	.+384    	; 0x1f16 <__fp_nan>
    1d96:	28 c1       	rjmp	.+592    	; 0x1fe8 <__fp_zero>

00001d98 <atan2>:
    1d98:	e9 2f       	mov	r30, r25
    1d9a:	e0 78       	andi	r30, 0x80	; 128
    1d9c:	03 d1       	rcall	.+518    	; 0x1fa4 <__fp_split3>
    1d9e:	68 f3       	brcs	.-38     	; 0x1d7a <itoa+0x42>
    1da0:	09 2e       	mov	r0, r25
    1da2:	05 2a       	or	r0, r21
    1da4:	c1 f3       	breq	.-16     	; 0x1d96 <itoa+0x5e>
    1da6:	26 17       	cp	r18, r22
    1da8:	37 07       	cpc	r19, r23
    1daa:	48 07       	cpc	r20, r24
    1dac:	59 07       	cpc	r21, r25
    1dae:	38 f0       	brcs	.+14     	; 0x1dbe <atan2+0x26>
    1db0:	0e 2e       	mov	r0, r30
    1db2:	07 f8       	bld	r0, 7
    1db4:	e0 25       	eor	r30, r0
    1db6:	69 f0       	breq	.+26     	; 0x1dd2 <atan2+0x3a>
    1db8:	e0 25       	eor	r30, r0
    1dba:	e0 64       	ori	r30, 0x40	; 64
    1dbc:	0a c0       	rjmp	.+20     	; 0x1dd2 <atan2+0x3a>
    1dbe:	ef 63       	ori	r30, 0x3F	; 63
    1dc0:	07 f8       	bld	r0, 7
    1dc2:	00 94       	com	r0
    1dc4:	07 fa       	bst	r0, 7
    1dc6:	db 01       	movw	r26, r22
    1dc8:	b9 01       	movw	r22, r18
    1dca:	9d 01       	movw	r18, r26
    1dcc:	dc 01       	movw	r26, r24
    1dce:	ca 01       	movw	r24, r20
    1dd0:	ad 01       	movw	r20, r26
    1dd2:	ef 93       	push	r30
    1dd4:	41 d0       	rcall	.+130    	; 0x1e58 <__divsf3_pse>
    1dd6:	d5 d0       	rcall	.+426    	; 0x1f82 <__fp_round>
    1dd8:	0a d0       	rcall	.+20     	; 0x1dee <atan>
    1dda:	5f 91       	pop	r21
    1ddc:	55 23       	and	r21, r21
    1dde:	31 f0       	breq	.+12     	; 0x1dec <atan2+0x54>
    1de0:	2b ed       	ldi	r18, 0xDB	; 219
    1de2:	3f e0       	ldi	r19, 0x0F	; 15
    1de4:	49 e4       	ldi	r20, 0x49	; 73
    1de6:	50 fd       	sbrc	r21, 0
    1de8:	49 ec       	ldi	r20, 0xC9	; 201
    1dea:	44 ca       	rjmp	.-2936   	; 0x1274 <__addsf3>
    1dec:	08 95       	ret

00001dee <atan>:
    1dee:	df 93       	push	r29
    1df0:	dd 27       	eor	r29, r29
    1df2:	b9 2f       	mov	r27, r25
    1df4:	bf 77       	andi	r27, 0x7F	; 127
    1df6:	40 e8       	ldi	r20, 0x80	; 128
    1df8:	5f e3       	ldi	r21, 0x3F	; 63
    1dfa:	16 16       	cp	r1, r22
    1dfc:	17 06       	cpc	r1, r23
    1dfe:	48 07       	cpc	r20, r24
    1e00:	5b 07       	cpc	r21, r27
    1e02:	10 f4       	brcc	.+4      	; 0x1e08 <atan+0x1a>
    1e04:	d9 2f       	mov	r29, r25
    1e06:	f7 d0       	rcall	.+494    	; 0x1ff6 <inverse>
    1e08:	9f 93       	push	r25
    1e0a:	8f 93       	push	r24
    1e0c:	7f 93       	push	r23
    1e0e:	6f 93       	push	r22
    1e10:	5a d1       	rcall	.+692    	; 0x20c6 <square>
    1e12:	ec ea       	ldi	r30, 0xAC	; 172
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	82 d0       	rcall	.+260    	; 0x1f1c <__fp_powser>
    1e18:	b4 d0       	rcall	.+360    	; 0x1f82 <__fp_round>
    1e1a:	2f 91       	pop	r18
    1e1c:	3f 91       	pop	r19
    1e1e:	4f 91       	pop	r20
    1e20:	5f 91       	pop	r21
    1e22:	fa d0       	rcall	.+500    	; 0x2018 <__mulsf3x>
    1e24:	dd 23       	and	r29, r29
    1e26:	49 f0       	breq	.+18     	; 0x1e3a <atan+0x4c>
    1e28:	90 58       	subi	r25, 0x80	; 128
    1e2a:	a2 ea       	ldi	r26, 0xA2	; 162
    1e2c:	2a ed       	ldi	r18, 0xDA	; 218
    1e2e:	3f e0       	ldi	r19, 0x0F	; 15
    1e30:	49 ec       	ldi	r20, 0xC9	; 201
    1e32:	5f e3       	ldi	r21, 0x3F	; 63
    1e34:	d0 78       	andi	r29, 0x80	; 128
    1e36:	5d 27       	eor	r21, r29
    1e38:	a0 d3       	rcall	.+1856   	; 0x257a <__addsf3x>
    1e3a:	df 91       	pop	r29
    1e3c:	a2 c0       	rjmp	.+324    	; 0x1f82 <__fp_round>
    1e3e:	9a d0       	rcall	.+308    	; 0x1f74 <__fp_pscB>
    1e40:	40 f0       	brcs	.+16     	; 0x1e52 <atan+0x64>
    1e42:	91 d0       	rcall	.+290    	; 0x1f66 <__fp_pscA>
    1e44:	30 f0       	brcs	.+12     	; 0x1e52 <atan+0x64>
    1e46:	21 f4       	brne	.+8      	; 0x1e50 <atan+0x62>
    1e48:	5f 3f       	cpi	r21, 0xFF	; 255
    1e4a:	19 f0       	breq	.+6      	; 0x1e52 <atan+0x64>
    1e4c:	5e c0       	rjmp	.+188    	; 0x1f0a <__fp_inf>
    1e4e:	51 11       	cpse	r21, r1
    1e50:	cc c0       	rjmp	.+408    	; 0x1fea <__fp_szero>
    1e52:	61 c0       	rjmp	.+194    	; 0x1f16 <__fp_nan>

00001e54 <__divsf3x>:
    1e54:	a7 d0       	rcall	.+334    	; 0x1fa4 <__fp_split3>
    1e56:	98 f3       	brcs	.-26     	; 0x1e3e <atan+0x50>

00001e58 <__divsf3_pse>:
    1e58:	99 23       	and	r25, r25
    1e5a:	c9 f3       	breq	.-14     	; 0x1e4e <atan+0x60>
    1e5c:	55 23       	and	r21, r21
    1e5e:	b1 f3       	breq	.-20     	; 0x1e4c <atan+0x5e>
    1e60:	95 1b       	sub	r25, r21
    1e62:	55 0b       	sbc	r21, r21
    1e64:	bb 27       	eor	r27, r27
    1e66:	aa 27       	eor	r26, r26
    1e68:	62 17       	cp	r22, r18
    1e6a:	73 07       	cpc	r23, r19
    1e6c:	84 07       	cpc	r24, r20
    1e6e:	38 f0       	brcs	.+14     	; 0x1e7e <__divsf3_pse+0x26>
    1e70:	9f 5f       	subi	r25, 0xFF	; 255
    1e72:	5f 4f       	sbci	r21, 0xFF	; 255
    1e74:	22 0f       	add	r18, r18
    1e76:	33 1f       	adc	r19, r19
    1e78:	44 1f       	adc	r20, r20
    1e7a:	aa 1f       	adc	r26, r26
    1e7c:	a9 f3       	breq	.-22     	; 0x1e68 <__divsf3_pse+0x10>
    1e7e:	33 d0       	rcall	.+102    	; 0x1ee6 <__divsf3_pse+0x8e>
    1e80:	0e 2e       	mov	r0, r30
    1e82:	3a f0       	brmi	.+14     	; 0x1e92 <__divsf3_pse+0x3a>
    1e84:	e0 e8       	ldi	r30, 0x80	; 128
    1e86:	30 d0       	rcall	.+96     	; 0x1ee8 <__divsf3_pse+0x90>
    1e88:	91 50       	subi	r25, 0x01	; 1
    1e8a:	50 40       	sbci	r21, 0x00	; 0
    1e8c:	e6 95       	lsr	r30
    1e8e:	00 1c       	adc	r0, r0
    1e90:	ca f7       	brpl	.-14     	; 0x1e84 <__divsf3_pse+0x2c>
    1e92:	29 d0       	rcall	.+82     	; 0x1ee6 <__divsf3_pse+0x8e>
    1e94:	fe 2f       	mov	r31, r30
    1e96:	27 d0       	rcall	.+78     	; 0x1ee6 <__divsf3_pse+0x8e>
    1e98:	66 0f       	add	r22, r22
    1e9a:	77 1f       	adc	r23, r23
    1e9c:	88 1f       	adc	r24, r24
    1e9e:	bb 1f       	adc	r27, r27
    1ea0:	26 17       	cp	r18, r22
    1ea2:	37 07       	cpc	r19, r23
    1ea4:	48 07       	cpc	r20, r24
    1ea6:	ab 07       	cpc	r26, r27
    1ea8:	b0 e8       	ldi	r27, 0x80	; 128
    1eaa:	09 f0       	breq	.+2      	; 0x1eae <__divsf3_pse+0x56>
    1eac:	bb 0b       	sbc	r27, r27
    1eae:	80 2d       	mov	r24, r0
    1eb0:	bf 01       	movw	r22, r30
    1eb2:	ff 27       	eor	r31, r31
    1eb4:	93 58       	subi	r25, 0x83	; 131
    1eb6:	5f 4f       	sbci	r21, 0xFF	; 255
    1eb8:	2a f0       	brmi	.+10     	; 0x1ec4 <__divsf3_pse+0x6c>
    1eba:	9e 3f       	cpi	r25, 0xFE	; 254
    1ebc:	51 05       	cpc	r21, r1
    1ebe:	68 f0       	brcs	.+26     	; 0x1eda <__divsf3_pse+0x82>
    1ec0:	24 c0       	rjmp	.+72     	; 0x1f0a <__fp_inf>
    1ec2:	93 c0       	rjmp	.+294    	; 0x1fea <__fp_szero>
    1ec4:	5f 3f       	cpi	r21, 0xFF	; 255
    1ec6:	ec f3       	brlt	.-6      	; 0x1ec2 <__divsf3_pse+0x6a>
    1ec8:	98 3e       	cpi	r25, 0xE8	; 232
    1eca:	dc f3       	brlt	.-10     	; 0x1ec2 <__divsf3_pse+0x6a>
    1ecc:	86 95       	lsr	r24
    1ece:	77 95       	ror	r23
    1ed0:	67 95       	ror	r22
    1ed2:	b7 95       	ror	r27
    1ed4:	f7 95       	ror	r31
    1ed6:	9f 5f       	subi	r25, 0xFF	; 255
    1ed8:	c9 f7       	brne	.-14     	; 0x1ecc <__divsf3_pse+0x74>
    1eda:	88 0f       	add	r24, r24
    1edc:	91 1d       	adc	r25, r1
    1ede:	96 95       	lsr	r25
    1ee0:	87 95       	ror	r24
    1ee2:	97 f9       	bld	r25, 7
    1ee4:	08 95       	ret
    1ee6:	e1 e0       	ldi	r30, 0x01	; 1
    1ee8:	66 0f       	add	r22, r22
    1eea:	77 1f       	adc	r23, r23
    1eec:	88 1f       	adc	r24, r24
    1eee:	bb 1f       	adc	r27, r27
    1ef0:	62 17       	cp	r22, r18
    1ef2:	73 07       	cpc	r23, r19
    1ef4:	84 07       	cpc	r24, r20
    1ef6:	ba 07       	cpc	r27, r26
    1ef8:	20 f0       	brcs	.+8      	; 0x1f02 <__divsf3_pse+0xaa>
    1efa:	62 1b       	sub	r22, r18
    1efc:	73 0b       	sbc	r23, r19
    1efe:	84 0b       	sbc	r24, r20
    1f00:	ba 0b       	sbc	r27, r26
    1f02:	ee 1f       	adc	r30, r30
    1f04:	88 f7       	brcc	.-30     	; 0x1ee8 <__divsf3_pse+0x90>
    1f06:	e0 95       	com	r30
    1f08:	08 95       	ret

00001f0a <__fp_inf>:
    1f0a:	97 f9       	bld	r25, 7
    1f0c:	9f 67       	ori	r25, 0x7F	; 127
    1f0e:	80 e8       	ldi	r24, 0x80	; 128
    1f10:	70 e0       	ldi	r23, 0x00	; 0
    1f12:	60 e0       	ldi	r22, 0x00	; 0
    1f14:	08 95       	ret

00001f16 <__fp_nan>:
    1f16:	9f ef       	ldi	r25, 0xFF	; 255
    1f18:	80 ec       	ldi	r24, 0xC0	; 192
    1f1a:	08 95       	ret

00001f1c <__fp_powser>:
    1f1c:	df 93       	push	r29
    1f1e:	cf 93       	push	r28
    1f20:	1f 93       	push	r17
    1f22:	0f 93       	push	r16
    1f24:	ff 92       	push	r15
    1f26:	ef 92       	push	r14
    1f28:	df 92       	push	r13
    1f2a:	7b 01       	movw	r14, r22
    1f2c:	8c 01       	movw	r16, r24
    1f2e:	68 94       	set
    1f30:	05 c0       	rjmp	.+10     	; 0x1f3c <__fp_powser+0x20>
    1f32:	da 2e       	mov	r13, r26
    1f34:	ef 01       	movw	r28, r30
    1f36:	70 d0       	rcall	.+224    	; 0x2018 <__mulsf3x>
    1f38:	fe 01       	movw	r30, r28
    1f3a:	e8 94       	clt
    1f3c:	a5 91       	lpm	r26, Z+
    1f3e:	25 91       	lpm	r18, Z+
    1f40:	35 91       	lpm	r19, Z+
    1f42:	45 91       	lpm	r20, Z+
    1f44:	55 91       	lpm	r21, Z+
    1f46:	ae f3       	brts	.-22     	; 0x1f32 <__fp_powser+0x16>
    1f48:	ef 01       	movw	r28, r30
    1f4a:	17 d3       	rcall	.+1582   	; 0x257a <__addsf3x>
    1f4c:	fe 01       	movw	r30, r28
    1f4e:	97 01       	movw	r18, r14
    1f50:	a8 01       	movw	r20, r16
    1f52:	da 94       	dec	r13
    1f54:	79 f7       	brne	.-34     	; 0x1f34 <__fp_powser+0x18>
    1f56:	df 90       	pop	r13
    1f58:	ef 90       	pop	r14
    1f5a:	ff 90       	pop	r15
    1f5c:	0f 91       	pop	r16
    1f5e:	1f 91       	pop	r17
    1f60:	cf 91       	pop	r28
    1f62:	df 91       	pop	r29
    1f64:	08 95       	ret

00001f66 <__fp_pscA>:
    1f66:	00 24       	eor	r0, r0
    1f68:	0a 94       	dec	r0
    1f6a:	16 16       	cp	r1, r22
    1f6c:	17 06       	cpc	r1, r23
    1f6e:	18 06       	cpc	r1, r24
    1f70:	09 06       	cpc	r0, r25
    1f72:	08 95       	ret

00001f74 <__fp_pscB>:
    1f74:	00 24       	eor	r0, r0
    1f76:	0a 94       	dec	r0
    1f78:	12 16       	cp	r1, r18
    1f7a:	13 06       	cpc	r1, r19
    1f7c:	14 06       	cpc	r1, r20
    1f7e:	05 06       	cpc	r0, r21
    1f80:	08 95       	ret

00001f82 <__fp_round>:
    1f82:	09 2e       	mov	r0, r25
    1f84:	03 94       	inc	r0
    1f86:	00 0c       	add	r0, r0
    1f88:	11 f4       	brne	.+4      	; 0x1f8e <__fp_round+0xc>
    1f8a:	88 23       	and	r24, r24
    1f8c:	52 f0       	brmi	.+20     	; 0x1fa2 <__fp_round+0x20>
    1f8e:	bb 0f       	add	r27, r27
    1f90:	40 f4       	brcc	.+16     	; 0x1fa2 <__fp_round+0x20>
    1f92:	bf 2b       	or	r27, r31
    1f94:	11 f4       	brne	.+4      	; 0x1f9a <__fp_round+0x18>
    1f96:	60 ff       	sbrs	r22, 0
    1f98:	04 c0       	rjmp	.+8      	; 0x1fa2 <__fp_round+0x20>
    1f9a:	6f 5f       	subi	r22, 0xFF	; 255
    1f9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f9e:	8f 4f       	sbci	r24, 0xFF	; 255
    1fa0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa2:	08 95       	ret

00001fa4 <__fp_split3>:
    1fa4:	57 fd       	sbrc	r21, 7
    1fa6:	90 58       	subi	r25, 0x80	; 128
    1fa8:	44 0f       	add	r20, r20
    1faa:	55 1f       	adc	r21, r21
    1fac:	59 f0       	breq	.+22     	; 0x1fc4 <__fp_splitA+0x10>
    1fae:	5f 3f       	cpi	r21, 0xFF	; 255
    1fb0:	71 f0       	breq	.+28     	; 0x1fce <__fp_splitA+0x1a>
    1fb2:	47 95       	ror	r20

00001fb4 <__fp_splitA>:
    1fb4:	88 0f       	add	r24, r24
    1fb6:	97 fb       	bst	r25, 7
    1fb8:	99 1f       	adc	r25, r25
    1fba:	61 f0       	breq	.+24     	; 0x1fd4 <__fp_splitA+0x20>
    1fbc:	9f 3f       	cpi	r25, 0xFF	; 255
    1fbe:	79 f0       	breq	.+30     	; 0x1fde <__fp_splitA+0x2a>
    1fc0:	87 95       	ror	r24
    1fc2:	08 95       	ret
    1fc4:	12 16       	cp	r1, r18
    1fc6:	13 06       	cpc	r1, r19
    1fc8:	14 06       	cpc	r1, r20
    1fca:	55 1f       	adc	r21, r21
    1fcc:	f2 cf       	rjmp	.-28     	; 0x1fb2 <__fp_split3+0xe>
    1fce:	46 95       	lsr	r20
    1fd0:	f1 df       	rcall	.-30     	; 0x1fb4 <__fp_splitA>
    1fd2:	08 c0       	rjmp	.+16     	; 0x1fe4 <__fp_splitA+0x30>
    1fd4:	16 16       	cp	r1, r22
    1fd6:	17 06       	cpc	r1, r23
    1fd8:	18 06       	cpc	r1, r24
    1fda:	99 1f       	adc	r25, r25
    1fdc:	f1 cf       	rjmp	.-30     	; 0x1fc0 <__fp_splitA+0xc>
    1fde:	86 95       	lsr	r24
    1fe0:	71 05       	cpc	r23, r1
    1fe2:	61 05       	cpc	r22, r1
    1fe4:	08 94       	sec
    1fe6:	08 95       	ret

00001fe8 <__fp_zero>:
    1fe8:	e8 94       	clt

00001fea <__fp_szero>:
    1fea:	bb 27       	eor	r27, r27
    1fec:	66 27       	eor	r22, r22
    1fee:	77 27       	eor	r23, r23
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	97 f9       	bld	r25, 7
    1ff4:	08 95       	ret

00001ff6 <inverse>:
    1ff6:	9b 01       	movw	r18, r22
    1ff8:	ac 01       	movw	r20, r24
    1ffa:	60 e0       	ldi	r22, 0x00	; 0
    1ffc:	70 e0       	ldi	r23, 0x00	; 0
    1ffe:	80 e8       	ldi	r24, 0x80	; 128
    2000:	9f e3       	ldi	r25, 0x3F	; 63
    2002:	5f ca       	rjmp	.-2882   	; 0x14c2 <__divsf3>
    2004:	b0 df       	rcall	.-160    	; 0x1f66 <__fp_pscA>
    2006:	28 f0       	brcs	.+10     	; 0x2012 <inverse+0x1c>
    2008:	b5 df       	rcall	.-150    	; 0x1f74 <__fp_pscB>
    200a:	18 f0       	brcs	.+6      	; 0x2012 <inverse+0x1c>
    200c:	95 23       	and	r25, r21
    200e:	09 f0       	breq	.+2      	; 0x2012 <inverse+0x1c>
    2010:	7c cf       	rjmp	.-264    	; 0x1f0a <__fp_inf>
    2012:	81 cf       	rjmp	.-254    	; 0x1f16 <__fp_nan>
    2014:	11 24       	eor	r1, r1
    2016:	e9 cf       	rjmp	.-46     	; 0x1fea <__fp_szero>

00002018 <__mulsf3x>:
    2018:	c5 df       	rcall	.-118    	; 0x1fa4 <__fp_split3>
    201a:	a0 f3       	brcs	.-24     	; 0x2004 <inverse+0xe>

0000201c <__mulsf3_pse>:
    201c:	95 9f       	mul	r25, r21
    201e:	d1 f3       	breq	.-12     	; 0x2014 <inverse+0x1e>
    2020:	95 0f       	add	r25, r21
    2022:	50 e0       	ldi	r21, 0x00	; 0
    2024:	55 1f       	adc	r21, r21
    2026:	62 9f       	mul	r22, r18
    2028:	f0 01       	movw	r30, r0
    202a:	72 9f       	mul	r23, r18
    202c:	bb 27       	eor	r27, r27
    202e:	f0 0d       	add	r31, r0
    2030:	b1 1d       	adc	r27, r1
    2032:	63 9f       	mul	r22, r19
    2034:	aa 27       	eor	r26, r26
    2036:	f0 0d       	add	r31, r0
    2038:	b1 1d       	adc	r27, r1
    203a:	aa 1f       	adc	r26, r26
    203c:	64 9f       	mul	r22, r20
    203e:	66 27       	eor	r22, r22
    2040:	b0 0d       	add	r27, r0
    2042:	a1 1d       	adc	r26, r1
    2044:	66 1f       	adc	r22, r22
    2046:	82 9f       	mul	r24, r18
    2048:	22 27       	eor	r18, r18
    204a:	b0 0d       	add	r27, r0
    204c:	a1 1d       	adc	r26, r1
    204e:	62 1f       	adc	r22, r18
    2050:	73 9f       	mul	r23, r19
    2052:	b0 0d       	add	r27, r0
    2054:	a1 1d       	adc	r26, r1
    2056:	62 1f       	adc	r22, r18
    2058:	83 9f       	mul	r24, r19
    205a:	a0 0d       	add	r26, r0
    205c:	61 1d       	adc	r22, r1
    205e:	22 1f       	adc	r18, r18
    2060:	74 9f       	mul	r23, r20
    2062:	33 27       	eor	r19, r19
    2064:	a0 0d       	add	r26, r0
    2066:	61 1d       	adc	r22, r1
    2068:	23 1f       	adc	r18, r19
    206a:	84 9f       	mul	r24, r20
    206c:	60 0d       	add	r22, r0
    206e:	21 1d       	adc	r18, r1
    2070:	82 2f       	mov	r24, r18
    2072:	76 2f       	mov	r23, r22
    2074:	6a 2f       	mov	r22, r26
    2076:	11 24       	eor	r1, r1
    2078:	9f 57       	subi	r25, 0x7F	; 127
    207a:	50 40       	sbci	r21, 0x00	; 0
    207c:	8a f0       	brmi	.+34     	; 0x20a0 <__mulsf3_pse+0x84>
    207e:	e1 f0       	breq	.+56     	; 0x20b8 <__mulsf3_pse+0x9c>
    2080:	88 23       	and	r24, r24
    2082:	4a f0       	brmi	.+18     	; 0x2096 <__mulsf3_pse+0x7a>
    2084:	ee 0f       	add	r30, r30
    2086:	ff 1f       	adc	r31, r31
    2088:	bb 1f       	adc	r27, r27
    208a:	66 1f       	adc	r22, r22
    208c:	77 1f       	adc	r23, r23
    208e:	88 1f       	adc	r24, r24
    2090:	91 50       	subi	r25, 0x01	; 1
    2092:	50 40       	sbci	r21, 0x00	; 0
    2094:	a9 f7       	brne	.-22     	; 0x2080 <__mulsf3_pse+0x64>
    2096:	9e 3f       	cpi	r25, 0xFE	; 254
    2098:	51 05       	cpc	r21, r1
    209a:	70 f0       	brcs	.+28     	; 0x20b8 <__mulsf3_pse+0x9c>
    209c:	36 cf       	rjmp	.-404    	; 0x1f0a <__fp_inf>
    209e:	a5 cf       	rjmp	.-182    	; 0x1fea <__fp_szero>
    20a0:	5f 3f       	cpi	r21, 0xFF	; 255
    20a2:	ec f3       	brlt	.-6      	; 0x209e <__mulsf3_pse+0x82>
    20a4:	98 3e       	cpi	r25, 0xE8	; 232
    20a6:	dc f3       	brlt	.-10     	; 0x209e <__mulsf3_pse+0x82>
    20a8:	86 95       	lsr	r24
    20aa:	77 95       	ror	r23
    20ac:	67 95       	ror	r22
    20ae:	b7 95       	ror	r27
    20b0:	f7 95       	ror	r31
    20b2:	e7 95       	ror	r30
    20b4:	9f 5f       	subi	r25, 0xFF	; 255
    20b6:	c1 f7       	brne	.-16     	; 0x20a8 <__mulsf3_pse+0x8c>
    20b8:	fe 2b       	or	r31, r30
    20ba:	88 0f       	add	r24, r24
    20bc:	91 1d       	adc	r25, r1
    20be:	96 95       	lsr	r25
    20c0:	87 95       	ror	r24
    20c2:	97 f9       	bld	r25, 7
    20c4:	08 95       	ret

000020c6 <square>:
    20c6:	9b 01       	movw	r18, r22
    20c8:	ac 01       	movw	r20, r24
    20ca:	01 c9       	rjmp	.-3582   	; 0x12ce <__mulsf3>

000020cc <dtoa_prf>:
    20cc:	a9 e0       	ldi	r26, 0x09	; 9
    20ce:	b0 e0       	ldi	r27, 0x00	; 0
    20d0:	ec e6       	ldi	r30, 0x6C	; 108
    20d2:	f0 e1       	ldi	r31, 0x10	; 16
    20d4:	0c 94 48 0e 	jmp	0x1c90	; 0x1c90 <__prologue_saves__+0x8>
    20d8:	6a 01       	movw	r12, r20
    20da:	12 2f       	mov	r17, r18
    20dc:	a0 2e       	mov	r10, r16
    20de:	be 2c       	mov	r11, r14
    20e0:	2b e3       	ldi	r18, 0x3B	; 59
    20e2:	20 17       	cp	r18, r16
    20e4:	18 f4       	brcc	.+6      	; 0x20ec <dtoa_prf+0x20>
    20e6:	2c e3       	ldi	r18, 0x3C	; 60
    20e8:	92 2e       	mov	r9, r18
    20ea:	02 c0       	rjmp	.+4      	; 0x20f0 <dtoa_prf+0x24>
    20ec:	90 2e       	mov	r9, r16
    20ee:	93 94       	inc	r9
    20f0:	ae 01       	movw	r20, r28
    20f2:	4f 5f       	subi	r20, 0xFF	; 255
    20f4:	5f 4f       	sbci	r21, 0xFF	; 255
    20f6:	27 e0       	ldi	r18, 0x07	; 7
    20f8:	09 2d       	mov	r16, r9
    20fa:	0e 94 c8 11 	call	0x2390	; 0x2390 <__ftoa_engine>
    20fe:	bc 01       	movw	r22, r24
    2100:	89 81       	ldd	r24, Y+1	; 0x01
    2102:	e8 2e       	mov	r14, r24
    2104:	ff 24       	eor	r15, r15
    2106:	c7 01       	movw	r24, r14
    2108:	89 70       	andi	r24, 0x09	; 9
    210a:	90 70       	andi	r25, 0x00	; 0
    210c:	01 97       	sbiw	r24, 0x01	; 1
    210e:	11 f4       	brne	.+4      	; 0x2114 <dtoa_prf+0x48>
    2110:	ad e2       	ldi	r26, 0x2D	; 45
    2112:	09 c0       	rjmp	.+18     	; 0x2126 <dtoa_prf+0x5a>
    2114:	b1 fe       	sbrs	r11, 1
    2116:	02 c0       	rjmp	.+4      	; 0x211c <dtoa_prf+0x50>
    2118:	ab e2       	ldi	r26, 0x2B	; 43
    211a:	05 c0       	rjmp	.+10     	; 0x2126 <dtoa_prf+0x5a>
    211c:	b0 fc       	sbrc	r11, 0
    211e:	02 c0       	rjmp	.+4      	; 0x2124 <dtoa_prf+0x58>
    2120:	a0 e0       	ldi	r26, 0x00	; 0
    2122:	01 c0       	rjmp	.+2      	; 0x2126 <dtoa_prf+0x5a>
    2124:	a0 e2       	ldi	r26, 0x20	; 32
    2126:	e3 fe       	sbrs	r14, 3
    2128:	3b c0       	rjmp	.+118    	; 0x21a0 <dtoa_prf+0xd4>
    212a:	aa 23       	and	r26, r26
    212c:	11 f4       	brne	.+4      	; 0x2132 <dtoa_prf+0x66>
    212e:	23 e0       	ldi	r18, 0x03	; 3
    2130:	01 c0       	rjmp	.+2      	; 0x2134 <dtoa_prf+0x68>
    2132:	24 e0       	ldi	r18, 0x04	; 4
    2134:	21 17       	cp	r18, r17
    2136:	10 f0       	brcs	.+4      	; 0x213c <dtoa_prf+0x70>
    2138:	20 e0       	ldi	r18, 0x00	; 0
    213a:	02 c0       	rjmp	.+4      	; 0x2140 <dtoa_prf+0x74>
    213c:	12 1b       	sub	r17, r18
    213e:	21 2f       	mov	r18, r17
    2140:	eb 2c       	mov	r14, r11
    2142:	b4 fe       	sbrs	r11, 4
    2144:	02 c0       	rjmp	.+4      	; 0x214a <dtoa_prf+0x7e>
    2146:	32 2f       	mov	r19, r18
    2148:	0a c0       	rjmp	.+20     	; 0x215e <dtoa_prf+0x92>
    214a:	f6 01       	movw	r30, r12
    214c:	32 2f       	mov	r19, r18
    214e:	80 e2       	ldi	r24, 0x20	; 32
    2150:	02 c0       	rjmp	.+4      	; 0x2156 <dtoa_prf+0x8a>
    2152:	81 93       	st	Z+, r24
    2154:	31 50       	subi	r19, 0x01	; 1
    2156:	33 23       	and	r19, r19
    2158:	e1 f7       	brne	.-8      	; 0x2152 <dtoa_prf+0x86>
    215a:	c2 0e       	add	r12, r18
    215c:	d1 1c       	adc	r13, r1
    215e:	aa 23       	and	r26, r26
    2160:	19 f0       	breq	.+6      	; 0x2168 <dtoa_prf+0x9c>
    2162:	f6 01       	movw	r30, r12
    2164:	a1 93       	st	Z+, r26
    2166:	6f 01       	movw	r12, r30
    2168:	f6 01       	movw	r30, r12
    216a:	31 96       	adiw	r30, 0x01	; 1
    216c:	e2 fe       	sbrs	r14, 2
    216e:	05 c0       	rjmp	.+10     	; 0x217a <dtoa_prf+0xae>
    2170:	9e e4       	ldi	r25, 0x4E	; 78
    2172:	d6 01       	movw	r26, r12
    2174:	9c 93       	st	X, r25
    2176:	81 e4       	ldi	r24, 0x41	; 65
    2178:	04 c0       	rjmp	.+8      	; 0x2182 <dtoa_prf+0xb6>
    217a:	9e e6       	ldi	r25, 0x6E	; 110
    217c:	d6 01       	movw	r26, r12
    217e:	9c 93       	st	X, r25
    2180:	81 e6       	ldi	r24, 0x61	; 97
    2182:	11 96       	adiw	r26, 0x01	; 1
    2184:	8c 93       	st	X, r24
    2186:	91 83       	std	Z+1, r25	; 0x01
    2188:	32 96       	adiw	r30, 0x02	; 2
    218a:	df 01       	movw	r26, r30
    218c:	83 2f       	mov	r24, r19
    218e:	90 e2       	ldi	r25, 0x20	; 32
    2190:	02 c0       	rjmp	.+4      	; 0x2196 <dtoa_prf+0xca>
    2192:	9d 93       	st	X+, r25
    2194:	81 50       	subi	r24, 0x01	; 1
    2196:	88 23       	and	r24, r24
    2198:	e1 f7       	brne	.-8      	; 0x2192 <dtoa_prf+0xc6>
    219a:	e3 0f       	add	r30, r19
    219c:	f1 1d       	adc	r31, r1
    219e:	40 c0       	rjmp	.+128    	; 0x2220 <dtoa_prf+0x154>
    21a0:	e2 fe       	sbrs	r14, 2
    21a2:	42 c0       	rjmp	.+132    	; 0x2228 <dtoa_prf+0x15c>
    21a4:	aa 23       	and	r26, r26
    21a6:	11 f4       	brne	.+4      	; 0x21ac <dtoa_prf+0xe0>
    21a8:	23 e0       	ldi	r18, 0x03	; 3
    21aa:	01 c0       	rjmp	.+2      	; 0x21ae <dtoa_prf+0xe2>
    21ac:	24 e0       	ldi	r18, 0x04	; 4
    21ae:	21 17       	cp	r18, r17
    21b0:	10 f0       	brcs	.+4      	; 0x21b6 <dtoa_prf+0xea>
    21b2:	20 e0       	ldi	r18, 0x00	; 0
    21b4:	02 c0       	rjmp	.+4      	; 0x21ba <dtoa_prf+0xee>
    21b6:	12 1b       	sub	r17, r18
    21b8:	21 2f       	mov	r18, r17
    21ba:	eb 2c       	mov	r14, r11
    21bc:	b4 fe       	sbrs	r11, 4
    21be:	02 c0       	rjmp	.+4      	; 0x21c4 <dtoa_prf+0xf8>
    21c0:	92 2f       	mov	r25, r18
    21c2:	0a c0       	rjmp	.+20     	; 0x21d8 <dtoa_prf+0x10c>
    21c4:	f6 01       	movw	r30, r12
    21c6:	92 2f       	mov	r25, r18
    21c8:	80 e2       	ldi	r24, 0x20	; 32
    21ca:	02 c0       	rjmp	.+4      	; 0x21d0 <dtoa_prf+0x104>
    21cc:	81 93       	st	Z+, r24
    21ce:	91 50       	subi	r25, 0x01	; 1
    21d0:	99 23       	and	r25, r25
    21d2:	e1 f7       	brne	.-8      	; 0x21cc <dtoa_prf+0x100>
    21d4:	c2 0e       	add	r12, r18
    21d6:	d1 1c       	adc	r13, r1
    21d8:	aa 23       	and	r26, r26
    21da:	19 f0       	breq	.+6      	; 0x21e2 <dtoa_prf+0x116>
    21dc:	f6 01       	movw	r30, r12
    21de:	a1 93       	st	Z+, r26
    21e0:	6f 01       	movw	r12, r30
    21e2:	f6 01       	movw	r30, r12
    21e4:	31 96       	adiw	r30, 0x01	; 1
    21e6:	e2 fe       	sbrs	r14, 2
    21e8:	08 c0       	rjmp	.+16     	; 0x21fa <dtoa_prf+0x12e>
    21ea:	89 e4       	ldi	r24, 0x49	; 73
    21ec:	d6 01       	movw	r26, r12
    21ee:	8c 93       	st	X, r24
    21f0:	8e e4       	ldi	r24, 0x4E	; 78
    21f2:	11 96       	adiw	r26, 0x01	; 1
    21f4:	8c 93       	st	X, r24
    21f6:	86 e4       	ldi	r24, 0x46	; 70
    21f8:	07 c0       	rjmp	.+14     	; 0x2208 <dtoa_prf+0x13c>
    21fa:	89 e6       	ldi	r24, 0x69	; 105
    21fc:	d6 01       	movw	r26, r12
    21fe:	8c 93       	st	X, r24
    2200:	8e e6       	ldi	r24, 0x6E	; 110
    2202:	11 96       	adiw	r26, 0x01	; 1
    2204:	8c 93       	st	X, r24
    2206:	86 e6       	ldi	r24, 0x66	; 102
    2208:	81 83       	std	Z+1, r24	; 0x01
    220a:	32 96       	adiw	r30, 0x02	; 2
    220c:	df 01       	movw	r26, r30
    220e:	89 2f       	mov	r24, r25
    2210:	20 e2       	ldi	r18, 0x20	; 32
    2212:	02 c0       	rjmp	.+4      	; 0x2218 <dtoa_prf+0x14c>
    2214:	2d 93       	st	X+, r18
    2216:	81 50       	subi	r24, 0x01	; 1
    2218:	88 23       	and	r24, r24
    221a:	e1 f7       	brne	.-8      	; 0x2214 <dtoa_prf+0x148>
    221c:	e9 0f       	add	r30, r25
    221e:	f1 1d       	adc	r31, r1
    2220:	10 82       	st	Z, r1
    2222:	2e ef       	ldi	r18, 0xFE	; 254
    2224:	3f ef       	ldi	r19, 0xFF	; 255
    2226:	af c0       	rjmp	.+350    	; 0x2386 <dtoa_prf+0x2ba>
    2228:	16 16       	cp	r1, r22
    222a:	17 06       	cpc	r1, r23
    222c:	1c f0       	brlt	.+6      	; 0x2234 <dtoa_prf+0x168>
    222e:	41 e0       	ldi	r20, 0x01	; 1
    2230:	50 e0       	ldi	r21, 0x00	; 0
    2232:	03 c0       	rjmp	.+6      	; 0x223a <dtoa_prf+0x16e>
    2234:	ab 01       	movw	r20, r22
    2236:	4f 5f       	subi	r20, 0xFF	; 255
    2238:	5f 4f       	sbci	r21, 0xFF	; 255
    223a:	aa 20       	and	r10, r10
    223c:	19 f4       	brne	.+6      	; 0x2244 <dtoa_prf+0x178>
    223e:	80 e0       	ldi	r24, 0x00	; 0
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	03 c0       	rjmp	.+6      	; 0x224a <dtoa_prf+0x17e>
    2244:	8a 2d       	mov	r24, r10
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	01 96       	adiw	r24, 0x01	; 1
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	aa 23       	and	r26, r26
    2250:	11 f0       	breq	.+4      	; 0x2256 <dtoa_prf+0x18a>
    2252:	21 e0       	ldi	r18, 0x01	; 1
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	24 0f       	add	r18, r20
    2258:	35 1f       	adc	r19, r21
    225a:	28 0f       	add	r18, r24
    225c:	39 1f       	adc	r19, r25
    225e:	81 2f       	mov	r24, r17
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	28 17       	cp	r18, r24
    2264:	39 07       	cpc	r19, r25
    2266:	14 f0       	brlt	.+4      	; 0x226c <dtoa_prf+0x1a0>
    2268:	20 e0       	ldi	r18, 0x00	; 0
    226a:	02 c0       	rjmp	.+4      	; 0x2270 <dtoa_prf+0x1a4>
    226c:	12 1b       	sub	r17, r18
    226e:	21 2f       	mov	r18, r17
    2270:	4b 2d       	mov	r20, r11
    2272:	50 e0       	ldi	r21, 0x00	; 0
    2274:	ca 01       	movw	r24, r20
    2276:	80 71       	andi	r24, 0x10	; 16
    2278:	90 70       	andi	r25, 0x00	; 0
    227a:	b4 fc       	sbrc	r11, 4
    227c:	0d c0       	rjmp	.+26     	; 0x2298 <dtoa_prf+0x1cc>
    227e:	b3 fc       	sbrc	r11, 3
    2280:	0b c0       	rjmp	.+22     	; 0x2298 <dtoa_prf+0x1cc>
    2282:	f6 01       	movw	r30, r12
    2284:	32 2f       	mov	r19, r18
    2286:	40 e2       	ldi	r20, 0x20	; 32
    2288:	02 c0       	rjmp	.+4      	; 0x228e <dtoa_prf+0x1c2>
    228a:	41 93       	st	Z+, r20
    228c:	31 50       	subi	r19, 0x01	; 1
    228e:	33 23       	and	r19, r19
    2290:	e1 f7       	brne	.-8      	; 0x228a <dtoa_prf+0x1be>
    2292:	c2 0e       	add	r12, r18
    2294:	d1 1c       	adc	r13, r1
    2296:	01 c0       	rjmp	.+2      	; 0x229a <dtoa_prf+0x1ce>
    2298:	32 2f       	mov	r19, r18
    229a:	aa 23       	and	r26, r26
    229c:	19 f0       	breq	.+6      	; 0x22a4 <dtoa_prf+0x1d8>
    229e:	f6 01       	movw	r30, r12
    22a0:	a1 93       	st	Z+, r26
    22a2:	6f 01       	movw	r12, r30
    22a4:	89 2b       	or	r24, r25
    22a6:	11 f0       	breq	.+4      	; 0x22ac <dtoa_prf+0x1e0>
    22a8:	13 2f       	mov	r17, r19
    22aa:	0a c0       	rjmp	.+20     	; 0x22c0 <dtoa_prf+0x1f4>
    22ac:	f6 01       	movw	r30, r12
    22ae:	13 2f       	mov	r17, r19
    22b0:	80 e3       	ldi	r24, 0x30	; 48
    22b2:	02 c0       	rjmp	.+4      	; 0x22b8 <dtoa_prf+0x1ec>
    22b4:	81 93       	st	Z+, r24
    22b6:	11 50       	subi	r17, 0x01	; 1
    22b8:	11 23       	and	r17, r17
    22ba:	e1 f7       	brne	.-8      	; 0x22b4 <dtoa_prf+0x1e8>
    22bc:	c3 0e       	add	r12, r19
    22be:	d1 1c       	adc	r13, r1
    22c0:	09 2d       	mov	r16, r9
    22c2:	06 0f       	add	r16, r22
    22c4:	ba 80       	ldd	r11, Y+2	; 0x02
    22c6:	90 e1       	ldi	r25, 0x10	; 16
    22c8:	89 2e       	mov	r8, r25
    22ca:	91 2c       	mov	r9, r1
    22cc:	8e 20       	and	r8, r14
    22ce:	9f 20       	and	r9, r15
    22d0:	e4 fe       	sbrs	r14, 4
    22d2:	04 c0       	rjmp	.+8      	; 0x22dc <dtoa_prf+0x210>
    22d4:	f1 e3       	ldi	r31, 0x31	; 49
    22d6:	bf 16       	cp	r11, r31
    22d8:	09 f4       	brne	.+2      	; 0x22dc <dtoa_prf+0x210>
    22da:	01 50       	subi	r16, 0x01	; 1
    22dc:	10 16       	cp	r1, r16
    22de:	14 f0       	brlt	.+4      	; 0x22e4 <dtoa_prf+0x218>
    22e0:	01 e0       	ldi	r16, 0x01	; 1
    22e2:	03 c0       	rjmp	.+6      	; 0x22ea <dtoa_prf+0x21e>
    22e4:	09 30       	cpi	r16, 0x09	; 9
    22e6:	08 f0       	brcs	.+2      	; 0x22ea <dtoa_prf+0x21e>
    22e8:	08 e0       	ldi	r16, 0x08	; 8
    22ea:	9b 01       	movw	r18, r22
    22ec:	77 ff       	sbrs	r23, 7
    22ee:	02 c0       	rjmp	.+4      	; 0x22f4 <dtoa_prf+0x228>
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	cb 01       	movw	r24, r22
    22f6:	01 96       	adiw	r24, 0x01	; 1
    22f8:	82 1b       	sub	r24, r18
    22fa:	93 0b       	sbc	r25, r19
    22fc:	fe 01       	movw	r30, r28
    22fe:	31 96       	adiw	r30, 0x01	; 1
    2300:	e8 0f       	add	r30, r24
    2302:	f9 1f       	adc	r31, r25
    2304:	8e e2       	ldi	r24, 0x2E	; 46
    2306:	f8 2e       	mov	r15, r24
    2308:	3b 01       	movw	r6, r22
    230a:	60 1a       	sub	r6, r16
    230c:	71 08       	sbc	r7, r1
    230e:	8a 2d       	mov	r24, r10
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	44 27       	eor	r20, r20
    2314:	55 27       	eor	r21, r21
    2316:	48 1b       	sub	r20, r24
    2318:	59 0b       	sbc	r21, r25
    231a:	8f ef       	ldi	r24, 0xFF	; 255
    231c:	2f 3f       	cpi	r18, 0xFF	; 255
    231e:	38 07       	cpc	r19, r24
    2320:	19 f4       	brne	.+6      	; 0x2328 <dtoa_prf+0x25c>
    2322:	d6 01       	movw	r26, r12
    2324:	fd 92       	st	X+, r15
    2326:	6d 01       	movw	r12, r26
    2328:	62 17       	cp	r22, r18
    232a:	73 07       	cpc	r23, r19
    232c:	2c f0       	brlt	.+10     	; 0x2338 <dtoa_prf+0x26c>
    232e:	62 16       	cp	r6, r18
    2330:	73 06       	cpc	r7, r19
    2332:	14 f4       	brge	.+4      	; 0x2338 <dtoa_prf+0x26c>
    2334:	80 81       	ld	r24, Z
    2336:	01 c0       	rjmp	.+2      	; 0x233a <dtoa_prf+0x26e>
    2338:	80 e3       	ldi	r24, 0x30	; 48
    233a:	21 50       	subi	r18, 0x01	; 1
    233c:	30 40       	sbci	r19, 0x00	; 0
    233e:	31 96       	adiw	r30, 0x01	; 1
    2340:	24 17       	cp	r18, r20
    2342:	35 07       	cpc	r19, r21
    2344:	24 f0       	brlt	.+8      	; 0x234e <dtoa_prf+0x282>
    2346:	d6 01       	movw	r26, r12
    2348:	8d 93       	st	X+, r24
    234a:	6d 01       	movw	r12, r26
    234c:	e6 cf       	rjmp	.-52     	; 0x231a <dtoa_prf+0x24e>
    234e:	26 17       	cp	r18, r22
    2350:	37 07       	cpc	r19, r23
    2352:	49 f4       	brne	.+18     	; 0x2366 <dtoa_prf+0x29a>
    2354:	b5 e3       	ldi	r27, 0x35	; 53
    2356:	bb 15       	cp	r27, r11
    2358:	28 f0       	brcs	.+10     	; 0x2364 <dtoa_prf+0x298>
    235a:	bb 16       	cp	r11, r27
    235c:	21 f4       	brne	.+8      	; 0x2366 <dtoa_prf+0x29a>
    235e:	81 14       	cp	r8, r1
    2360:	91 04       	cpc	r9, r1
    2362:	09 f4       	brne	.+2      	; 0x2366 <dtoa_prf+0x29a>
    2364:	81 e3       	ldi	r24, 0x31	; 49
    2366:	f6 01       	movw	r30, r12
    2368:	81 93       	st	Z+, r24
    236a:	d6 01       	movw	r26, r12
    236c:	81 2f       	mov	r24, r17
    236e:	90 e2       	ldi	r25, 0x20	; 32
    2370:	02 c0       	rjmp	.+4      	; 0x2376 <dtoa_prf+0x2aa>
    2372:	9c 93       	st	X, r25
    2374:	81 50       	subi	r24, 0x01	; 1
    2376:	11 96       	adiw	r26, 0x01	; 1
    2378:	88 23       	and	r24, r24
    237a:	d9 f7       	brne	.-10     	; 0x2372 <dtoa_prf+0x2a6>
    237c:	e1 0f       	add	r30, r17
    237e:	f1 1d       	adc	r31, r1
    2380:	10 82       	st	Z, r1
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	c9 01       	movw	r24, r18
    2388:	29 96       	adiw	r28, 0x09	; 9
    238a:	ee e0       	ldi	r30, 0x0E	; 14
    238c:	0c 94 64 0e 	jmp	0x1cc8	; 0x1cc8 <__epilogue_restores__+0x8>

00002390 <__ftoa_engine>:
    2390:	28 30       	cpi	r18, 0x08	; 8
    2392:	08 f0       	brcs	.+2      	; 0x2396 <__ftoa_engine+0x6>
    2394:	27 e0       	ldi	r18, 0x07	; 7
    2396:	33 27       	eor	r19, r19
    2398:	da 01       	movw	r26, r20
    239a:	99 0f       	add	r25, r25
    239c:	31 1d       	adc	r19, r1
    239e:	87 fd       	sbrc	r24, 7
    23a0:	91 60       	ori	r25, 0x01	; 1
    23a2:	00 96       	adiw	r24, 0x00	; 0
    23a4:	61 05       	cpc	r22, r1
    23a6:	71 05       	cpc	r23, r1
    23a8:	39 f4       	brne	.+14     	; 0x23b8 <__ftoa_engine+0x28>
    23aa:	32 60       	ori	r19, 0x02	; 2
    23ac:	2e 5f       	subi	r18, 0xFE	; 254
    23ae:	3d 93       	st	X+, r19
    23b0:	30 e3       	ldi	r19, 0x30	; 48
    23b2:	2a 95       	dec	r18
    23b4:	e1 f7       	brne	.-8      	; 0x23ae <__ftoa_engine+0x1e>
    23b6:	08 95       	ret
    23b8:	9f 3f       	cpi	r25, 0xFF	; 255
    23ba:	30 f0       	brcs	.+12     	; 0x23c8 <__ftoa_engine+0x38>
    23bc:	80 38       	cpi	r24, 0x80	; 128
    23be:	71 05       	cpc	r23, r1
    23c0:	61 05       	cpc	r22, r1
    23c2:	09 f0       	breq	.+2      	; 0x23c6 <__ftoa_engine+0x36>
    23c4:	3c 5f       	subi	r19, 0xFC	; 252
    23c6:	3c 5f       	subi	r19, 0xFC	; 252
    23c8:	3d 93       	st	X+, r19
    23ca:	91 30       	cpi	r25, 0x01	; 1
    23cc:	08 f0       	brcs	.+2      	; 0x23d0 <__ftoa_engine+0x40>
    23ce:	80 68       	ori	r24, 0x80	; 128
    23d0:	91 1d       	adc	r25, r1
    23d2:	df 93       	push	r29
    23d4:	cf 93       	push	r28
    23d6:	1f 93       	push	r17
    23d8:	0f 93       	push	r16
    23da:	ff 92       	push	r15
    23dc:	ef 92       	push	r14
    23de:	19 2f       	mov	r17, r25
    23e0:	98 7f       	andi	r25, 0xF8	; 248
    23e2:	96 95       	lsr	r25
    23e4:	e9 2f       	mov	r30, r25
    23e6:	96 95       	lsr	r25
    23e8:	96 95       	lsr	r25
    23ea:	e9 0f       	add	r30, r25
    23ec:	ff 27       	eor	r31, r31
    23ee:	ed 5c       	subi	r30, 0xCD	; 205
    23f0:	fe 4f       	sbci	r31, 0xFE	; 254
    23f2:	99 27       	eor	r25, r25
    23f4:	33 27       	eor	r19, r19
    23f6:	ee 24       	eor	r14, r14
    23f8:	ff 24       	eor	r15, r15
    23fa:	a7 01       	movw	r20, r14
    23fc:	e7 01       	movw	r28, r14
    23fe:	05 90       	lpm	r0, Z+
    2400:	08 94       	sec
    2402:	07 94       	ror	r0
    2404:	28 f4       	brcc	.+10     	; 0x2410 <__ftoa_engine+0x80>
    2406:	36 0f       	add	r19, r22
    2408:	e7 1e       	adc	r14, r23
    240a:	f8 1e       	adc	r15, r24
    240c:	49 1f       	adc	r20, r25
    240e:	51 1d       	adc	r21, r1
    2410:	66 0f       	add	r22, r22
    2412:	77 1f       	adc	r23, r23
    2414:	88 1f       	adc	r24, r24
    2416:	99 1f       	adc	r25, r25
    2418:	06 94       	lsr	r0
    241a:	a1 f7       	brne	.-24     	; 0x2404 <__ftoa_engine+0x74>
    241c:	05 90       	lpm	r0, Z+
    241e:	07 94       	ror	r0
    2420:	28 f4       	brcc	.+10     	; 0x242c <__ftoa_engine+0x9c>
    2422:	e7 0e       	add	r14, r23
    2424:	f8 1e       	adc	r15, r24
    2426:	49 1f       	adc	r20, r25
    2428:	56 1f       	adc	r21, r22
    242a:	c1 1d       	adc	r28, r1
    242c:	77 0f       	add	r23, r23
    242e:	88 1f       	adc	r24, r24
    2430:	99 1f       	adc	r25, r25
    2432:	66 1f       	adc	r22, r22
    2434:	06 94       	lsr	r0
    2436:	a1 f7       	brne	.-24     	; 0x2420 <__ftoa_engine+0x90>
    2438:	05 90       	lpm	r0, Z+
    243a:	07 94       	ror	r0
    243c:	28 f4       	brcc	.+10     	; 0x2448 <__ftoa_engine+0xb8>
    243e:	f8 0e       	add	r15, r24
    2440:	49 1f       	adc	r20, r25
    2442:	56 1f       	adc	r21, r22
    2444:	c7 1f       	adc	r28, r23
    2446:	d1 1d       	adc	r29, r1
    2448:	88 0f       	add	r24, r24
    244a:	99 1f       	adc	r25, r25
    244c:	66 1f       	adc	r22, r22
    244e:	77 1f       	adc	r23, r23
    2450:	06 94       	lsr	r0
    2452:	a1 f7       	brne	.-24     	; 0x243c <__ftoa_engine+0xac>
    2454:	05 90       	lpm	r0, Z+
    2456:	07 94       	ror	r0
    2458:	20 f4       	brcc	.+8      	; 0x2462 <__ftoa_engine+0xd2>
    245a:	49 0f       	add	r20, r25
    245c:	56 1f       	adc	r21, r22
    245e:	c7 1f       	adc	r28, r23
    2460:	d8 1f       	adc	r29, r24
    2462:	99 0f       	add	r25, r25
    2464:	66 1f       	adc	r22, r22
    2466:	77 1f       	adc	r23, r23
    2468:	88 1f       	adc	r24, r24
    246a:	06 94       	lsr	r0
    246c:	a9 f7       	brne	.-22     	; 0x2458 <__ftoa_engine+0xc8>
    246e:	84 91       	lpm	r24, Z+
    2470:	10 95       	com	r17
    2472:	17 70       	andi	r17, 0x07	; 7
    2474:	41 f0       	breq	.+16     	; 0x2486 <__ftoa_engine+0xf6>
    2476:	d6 95       	lsr	r29
    2478:	c7 95       	ror	r28
    247a:	57 95       	ror	r21
    247c:	47 95       	ror	r20
    247e:	f7 94       	ror	r15
    2480:	e7 94       	ror	r14
    2482:	1a 95       	dec	r17
    2484:	c1 f7       	brne	.-16     	; 0x2476 <__ftoa_engine+0xe6>
    2486:	e9 ed       	ldi	r30, 0xD9	; 217
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	68 94       	set
    248c:	15 90       	lpm	r1, Z+
    248e:	15 91       	lpm	r17, Z+
    2490:	35 91       	lpm	r19, Z+
    2492:	65 91       	lpm	r22, Z+
    2494:	95 91       	lpm	r25, Z+
    2496:	05 90       	lpm	r0, Z+
    2498:	7f e2       	ldi	r23, 0x2F	; 47
    249a:	73 95       	inc	r23
    249c:	e1 18       	sub	r14, r1
    249e:	f1 0a       	sbc	r15, r17
    24a0:	43 0b       	sbc	r20, r19
    24a2:	56 0b       	sbc	r21, r22
    24a4:	c9 0b       	sbc	r28, r25
    24a6:	d0 09       	sbc	r29, r0
    24a8:	c0 f7       	brcc	.-16     	; 0x249a <__ftoa_engine+0x10a>
    24aa:	e1 0c       	add	r14, r1
    24ac:	f1 1e       	adc	r15, r17
    24ae:	43 1f       	adc	r20, r19
    24b0:	56 1f       	adc	r21, r22
    24b2:	c9 1f       	adc	r28, r25
    24b4:	d0 1d       	adc	r29, r0
    24b6:	7e f4       	brtc	.+30     	; 0x24d6 <__ftoa_engine+0x146>
    24b8:	70 33       	cpi	r23, 0x30	; 48
    24ba:	11 f4       	brne	.+4      	; 0x24c0 <__ftoa_engine+0x130>
    24bc:	8a 95       	dec	r24
    24be:	e6 cf       	rjmp	.-52     	; 0x248c <__ftoa_engine+0xfc>
    24c0:	e8 94       	clt
    24c2:	01 50       	subi	r16, 0x01	; 1
    24c4:	30 f0       	brcs	.+12     	; 0x24d2 <__ftoa_engine+0x142>
    24c6:	08 0f       	add	r16, r24
    24c8:	0a f4       	brpl	.+2      	; 0x24cc <__ftoa_engine+0x13c>
    24ca:	00 27       	eor	r16, r16
    24cc:	02 17       	cp	r16, r18
    24ce:	08 f4       	brcc	.+2      	; 0x24d2 <__ftoa_engine+0x142>
    24d0:	20 2f       	mov	r18, r16
    24d2:	23 95       	inc	r18
    24d4:	02 2f       	mov	r16, r18
    24d6:	7a 33       	cpi	r23, 0x3A	; 58
    24d8:	28 f0       	brcs	.+10     	; 0x24e4 <__ftoa_engine+0x154>
    24da:	79 e3       	ldi	r23, 0x39	; 57
    24dc:	7d 93       	st	X+, r23
    24de:	2a 95       	dec	r18
    24e0:	e9 f7       	brne	.-6      	; 0x24dc <__ftoa_engine+0x14c>
    24e2:	10 c0       	rjmp	.+32     	; 0x2504 <__ftoa_engine+0x174>
    24e4:	7d 93       	st	X+, r23
    24e6:	2a 95       	dec	r18
    24e8:	89 f6       	brne	.-94     	; 0x248c <__ftoa_engine+0xfc>
    24ea:	06 94       	lsr	r0
    24ec:	97 95       	ror	r25
    24ee:	67 95       	ror	r22
    24f0:	37 95       	ror	r19
    24f2:	17 95       	ror	r17
    24f4:	17 94       	ror	r1
    24f6:	e1 18       	sub	r14, r1
    24f8:	f1 0a       	sbc	r15, r17
    24fa:	43 0b       	sbc	r20, r19
    24fc:	56 0b       	sbc	r21, r22
    24fe:	c9 0b       	sbc	r28, r25
    2500:	d0 09       	sbc	r29, r0
    2502:	98 f0       	brcs	.+38     	; 0x252a <__ftoa_engine+0x19a>
    2504:	23 95       	inc	r18
    2506:	7e 91       	ld	r23, -X
    2508:	73 95       	inc	r23
    250a:	7a 33       	cpi	r23, 0x3A	; 58
    250c:	08 f0       	brcs	.+2      	; 0x2510 <__ftoa_engine+0x180>
    250e:	70 e3       	ldi	r23, 0x30	; 48
    2510:	7c 93       	st	X, r23
    2512:	20 13       	cpse	r18, r16
    2514:	b8 f7       	brcc	.-18     	; 0x2504 <__ftoa_engine+0x174>
    2516:	7e 91       	ld	r23, -X
    2518:	70 61       	ori	r23, 0x10	; 16
    251a:	7d 93       	st	X+, r23
    251c:	30 f0       	brcs	.+12     	; 0x252a <__ftoa_engine+0x19a>
    251e:	83 95       	inc	r24
    2520:	71 e3       	ldi	r23, 0x31	; 49
    2522:	7d 93       	st	X+, r23
    2524:	70 e3       	ldi	r23, 0x30	; 48
    2526:	2a 95       	dec	r18
    2528:	e1 f7       	brne	.-8      	; 0x2522 <__ftoa_engine+0x192>
    252a:	11 24       	eor	r1, r1
    252c:	ef 90       	pop	r14
    252e:	ff 90       	pop	r15
    2530:	0f 91       	pop	r16
    2532:	1f 91       	pop	r17
    2534:	cf 91       	pop	r28
    2536:	df 91       	pop	r29
    2538:	99 27       	eor	r25, r25
    253a:	87 fd       	sbrc	r24, 7
    253c:	90 95       	com	r25
    253e:	08 95       	ret

00002540 <strrev>:
    2540:	dc 01       	movw	r26, r24
    2542:	fc 01       	movw	r30, r24
    2544:	67 2f       	mov	r22, r23
    2546:	71 91       	ld	r23, Z+
    2548:	77 23       	and	r23, r23
    254a:	e1 f7       	brne	.-8      	; 0x2544 <strrev+0x4>
    254c:	32 97       	sbiw	r30, 0x02	; 2
    254e:	04 c0       	rjmp	.+8      	; 0x2558 <strrev+0x18>
    2550:	7c 91       	ld	r23, X
    2552:	6d 93       	st	X+, r22
    2554:	70 83       	st	Z, r23
    2556:	62 91       	ld	r22, -Z
    2558:	ae 17       	cp	r26, r30
    255a:	bf 07       	cpc	r27, r31
    255c:	c8 f3       	brcs	.-14     	; 0x2550 <strrev+0x10>
    255e:	08 95       	ret
    2560:	02 dd       	rcall	.-1532   	; 0x1f66 <__fp_pscA>
    2562:	30 f0       	brcs	.+12     	; 0x2570 <strrev+0x30>
    2564:	07 dd       	rcall	.-1522   	; 0x1f74 <__fp_pscB>
    2566:	20 f0       	brcs	.+8      	; 0x2570 <strrev+0x30>
    2568:	31 f4       	brne	.+12     	; 0x2576 <strrev+0x36>
    256a:	9f 3f       	cpi	r25, 0xFF	; 255
    256c:	11 f4       	brne	.+4      	; 0x2572 <strrev+0x32>
    256e:	1e f4       	brtc	.+6      	; 0x2576 <strrev+0x36>
    2570:	d2 cc       	rjmp	.-1628   	; 0x1f16 <__fp_nan>
    2572:	0e f4       	brtc	.+2      	; 0x2576 <strrev+0x36>
    2574:	e0 95       	com	r30
    2576:	e7 fb       	bst	r30, 7
    2578:	c8 cc       	rjmp	.-1648   	; 0x1f0a <__fp_inf>

0000257a <__addsf3x>:
    257a:	e9 2f       	mov	r30, r25
    257c:	13 dd       	rcall	.-1498   	; 0x1fa4 <__fp_split3>
    257e:	80 f3       	brcs	.-32     	; 0x2560 <strrev+0x20>
    2580:	ba 17       	cp	r27, r26
    2582:	62 07       	cpc	r22, r18
    2584:	73 07       	cpc	r23, r19
    2586:	84 07       	cpc	r24, r20
    2588:	95 07       	cpc	r25, r21
    258a:	18 f0       	brcs	.+6      	; 0x2592 <__addsf3x+0x18>
    258c:	71 f4       	brne	.+28     	; 0x25aa <__addsf3x+0x30>
    258e:	9e f5       	brtc	.+102    	; 0x25f6 <__addsf3x+0x7c>
    2590:	2b cd       	rjmp	.-1450   	; 0x1fe8 <__fp_zero>
    2592:	0e f4       	brtc	.+2      	; 0x2596 <__addsf3x+0x1c>
    2594:	e0 95       	com	r30
    2596:	0b 2e       	mov	r0, r27
    2598:	ba 2f       	mov	r27, r26
    259a:	a0 2d       	mov	r26, r0
    259c:	0b 01       	movw	r0, r22
    259e:	b9 01       	movw	r22, r18
    25a0:	90 01       	movw	r18, r0
    25a2:	0c 01       	movw	r0, r24
    25a4:	ca 01       	movw	r24, r20
    25a6:	a0 01       	movw	r20, r0
    25a8:	11 24       	eor	r1, r1
    25aa:	ff 27       	eor	r31, r31
    25ac:	59 1b       	sub	r21, r25
    25ae:	99 f0       	breq	.+38     	; 0x25d6 <__addsf3x+0x5c>
    25b0:	59 3f       	cpi	r21, 0xF9	; 249
    25b2:	50 f4       	brcc	.+20     	; 0x25c8 <__addsf3x+0x4e>
    25b4:	50 3e       	cpi	r21, 0xE0	; 224
    25b6:	68 f1       	brcs	.+90     	; 0x2612 <__addsf3x+0x98>
    25b8:	1a 16       	cp	r1, r26
    25ba:	f0 40       	sbci	r31, 0x00	; 0
    25bc:	a2 2f       	mov	r26, r18
    25be:	23 2f       	mov	r18, r19
    25c0:	34 2f       	mov	r19, r20
    25c2:	44 27       	eor	r20, r20
    25c4:	58 5f       	subi	r21, 0xF8	; 248
    25c6:	f3 cf       	rjmp	.-26     	; 0x25ae <__addsf3x+0x34>
    25c8:	46 95       	lsr	r20
    25ca:	37 95       	ror	r19
    25cc:	27 95       	ror	r18
    25ce:	a7 95       	ror	r26
    25d0:	f0 40       	sbci	r31, 0x00	; 0
    25d2:	53 95       	inc	r21
    25d4:	c9 f7       	brne	.-14     	; 0x25c8 <__addsf3x+0x4e>
    25d6:	7e f4       	brtc	.+30     	; 0x25f6 <__addsf3x+0x7c>
    25d8:	1f 16       	cp	r1, r31
    25da:	ba 0b       	sbc	r27, r26
    25dc:	62 0b       	sbc	r22, r18
    25de:	73 0b       	sbc	r23, r19
    25e0:	84 0b       	sbc	r24, r20
    25e2:	ba f0       	brmi	.+46     	; 0x2612 <__addsf3x+0x98>
    25e4:	91 50       	subi	r25, 0x01	; 1
    25e6:	a1 f0       	breq	.+40     	; 0x2610 <__addsf3x+0x96>
    25e8:	ff 0f       	add	r31, r31
    25ea:	bb 1f       	adc	r27, r27
    25ec:	66 1f       	adc	r22, r22
    25ee:	77 1f       	adc	r23, r23
    25f0:	88 1f       	adc	r24, r24
    25f2:	c2 f7       	brpl	.-16     	; 0x25e4 <__addsf3x+0x6a>
    25f4:	0e c0       	rjmp	.+28     	; 0x2612 <__addsf3x+0x98>
    25f6:	ba 0f       	add	r27, r26
    25f8:	62 1f       	adc	r22, r18
    25fa:	73 1f       	adc	r23, r19
    25fc:	84 1f       	adc	r24, r20
    25fe:	48 f4       	brcc	.+18     	; 0x2612 <__addsf3x+0x98>
    2600:	87 95       	ror	r24
    2602:	77 95       	ror	r23
    2604:	67 95       	ror	r22
    2606:	b7 95       	ror	r27
    2608:	f7 95       	ror	r31
    260a:	9e 3f       	cpi	r25, 0xFE	; 254
    260c:	08 f0       	brcs	.+2      	; 0x2610 <__addsf3x+0x96>
    260e:	b3 cf       	rjmp	.-154    	; 0x2576 <strrev+0x36>
    2610:	93 95       	inc	r25
    2612:	88 0f       	add	r24, r24
    2614:	08 f0       	brcs	.+2      	; 0x2618 <__addsf3x+0x9e>
    2616:	99 27       	eor	r25, r25
    2618:	ee 0f       	add	r30, r30
    261a:	97 95       	ror	r25
    261c:	87 95       	ror	r24
    261e:	08 95       	ret

00002620 <__udivmodhi4>:
    2620:	aa 1b       	sub	r26, r26
    2622:	bb 1b       	sub	r27, r27
    2624:	51 e1       	ldi	r21, 0x11	; 17
    2626:	07 c0       	rjmp	.+14     	; 0x2636 <__udivmodhi4_ep>

00002628 <__udivmodhi4_loop>:
    2628:	aa 1f       	adc	r26, r26
    262a:	bb 1f       	adc	r27, r27
    262c:	a6 17       	cp	r26, r22
    262e:	b7 07       	cpc	r27, r23
    2630:	10 f0       	brcs	.+4      	; 0x2636 <__udivmodhi4_ep>
    2632:	a6 1b       	sub	r26, r22
    2634:	b7 0b       	sbc	r27, r23

00002636 <__udivmodhi4_ep>:
    2636:	88 1f       	adc	r24, r24
    2638:	99 1f       	adc	r25, r25
    263a:	5a 95       	dec	r21
    263c:	a9 f7       	brne	.-22     	; 0x2628 <__udivmodhi4_loop>
    263e:	80 95       	com	r24
    2640:	90 95       	com	r25
    2642:	bc 01       	movw	r22, r24
    2644:	cd 01       	movw	r24, r26
    2646:	08 95       	ret

00002648 <_exit>:
    2648:	f8 94       	cli

0000264a <__stop_program>:
    264a:	ff cf       	rjmp	.-2      	; 0x264a <__stop_program>
