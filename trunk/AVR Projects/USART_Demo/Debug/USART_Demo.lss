
USART_Demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000130  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00000130  000001a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000438  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000006f4  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	26 c0       	rjmp	.+76     	; 0x50 <__bad_interrupt>
   4:	25 c0       	rjmp	.+74     	; 0x50 <__bad_interrupt>
   6:	24 c0       	rjmp	.+72     	; 0x50 <__bad_interrupt>
   8:	23 c0       	rjmp	.+70     	; 0x50 <__bad_interrupt>
   a:	22 c0       	rjmp	.+68     	; 0x50 <__bad_interrupt>
   c:	21 c0       	rjmp	.+66     	; 0x50 <__bad_interrupt>
   e:	20 c0       	rjmp	.+64     	; 0x50 <__bad_interrupt>
  10:	1f c0       	rjmp	.+62     	; 0x50 <__bad_interrupt>
  12:	1e c0       	rjmp	.+60     	; 0x50 <__bad_interrupt>
  14:	1d c0       	rjmp	.+58     	; 0x50 <__bad_interrupt>
  16:	1c c0       	rjmp	.+56     	; 0x50 <__bad_interrupt>
  18:	1b c0       	rjmp	.+54     	; 0x50 <__bad_interrupt>
  1a:	1a c0       	rjmp	.+52     	; 0x50 <__bad_interrupt>
  1c:	19 c0       	rjmp	.+50     	; 0x50 <__bad_interrupt>
  1e:	18 c0       	rjmp	.+48     	; 0x50 <__bad_interrupt>
  20:	17 c0       	rjmp	.+46     	; 0x50 <__bad_interrupt>
  22:	16 c0       	rjmp	.+44     	; 0x50 <__bad_interrupt>
  24:	15 c0       	rjmp	.+42     	; 0x50 <__bad_interrupt>
  26:	14 c0       	rjmp	.+40     	; 0x50 <__bad_interrupt>
  28:	13 c0       	rjmp	.+38     	; 0x50 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d1 e0       	ldi	r29, 0x01	; 1
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_copy_data>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	e0 e3       	ldi	r30, 0x30	; 48
  3e:	f1 e0       	ldi	r31, 0x01	; 1
  40:	02 c0       	rjmp	.+4      	; 0x46 <.do_copy_data_start>

00000042 <.do_copy_data_loop>:
  42:	05 90       	lpm	r0, Z+
  44:	0d 92       	st	X+, r0

00000046 <.do_copy_data_start>:
  46:	ae 37       	cpi	r26, 0x7E	; 126
  48:	b1 07       	cpc	r27, r17
  4a:	d9 f7       	brne	.-10     	; 0x42 <.do_copy_data_loop>
  4c:	5f d0       	rcall	.+190    	; 0x10c <main>
  4e:	6e c0       	rjmp	.+220    	; 0x12c <_exit>

00000050 <__bad_interrupt>:
  50:	d7 cf       	rjmp	.-82     	; 0x0 <__vectors>

00000052 <USART_vInit>:
// Define baud rate
#define USART_BAUD 9600L
#define USART_UBBR_VALUE ((FCPU/(USART_BAUD<<4))-1)

void USART_vInit(void)
{
  52:	df 93       	push	r29
  54:	cf 93       	push	r28
  56:	cd b7       	in	r28, 0x3d	; 61
  58:	de b7       	in	r29, 0x3e	; 62
	// Set baud rate
	UBRRH = (uint8_t)(USART_UBBR_VALUE>>8);
  5a:	e2 e2       	ldi	r30, 0x22	; 34
  5c:	f0 e0       	ldi	r31, 0x00	; 0
  5e:	10 82       	st	Z, r1
	UBRRL = (uint8_t)USART_UBBR_VALUE;
  60:	e9 e2       	ldi	r30, 0x29	; 41
  62:	f0 e0       	ldi	r31, 0x00	; 0
  64:	83 e3       	ldi	r24, 0x33	; 51
  66:	80 83       	st	Z, r24
	// Set frame format to 8 data bits, no parity, 1 stop bit
	UCSRC = (0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);
  68:	e3 e2       	ldi	r30, 0x23	; 35
  6a:	f0 e0       	ldi	r31, 0x00	; 0
  6c:	86 e0       	ldi	r24, 0x06	; 6
  6e:	80 83       	st	Z, r24
	// Enable receiver and transmitter
	UCSRB = (1<<RXEN)|(1<<TXEN);
  70:	ea e2       	ldi	r30, 0x2A	; 42
  72:	f0 e0       	ldi	r31, 0x00	; 0
  74:	88 e1       	ldi	r24, 0x18	; 24
  76:	80 83       	st	Z, r24
}
  78:	cf 91       	pop	r28
  7a:	df 91       	pop	r29
  7c:	08 95       	ret

0000007e <USART_SendChar>:

void USART_SendChar(uint8_t data)
{
  7e:	df 93       	push	r29
  80:	cf 93       	push	r28
  82:	0f 92       	push	r0
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	89 83       	std	Y+1, r24	; 0x01
	// Wait if a byte is being transmitted
	while((UCSRA&(1<<UDRE)) == 0);
  8a:	eb e2       	ldi	r30, 0x2B	; 43
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	88 2f       	mov	r24, r24
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	80 72       	andi	r24, 0x20	; 32
  96:	90 70       	andi	r25, 0x00	; 0
  98:	00 97       	sbiw	r24, 0x00	; 0
  9a:	b9 f3       	breq	.-18     	; 0x8a <USART_SendChar+0xc>
	// Transmit data
	UDR = data;
  9c:	ec e2       	ldi	r30, 0x2C	; 44
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	89 81       	ldd	r24, Y+1	; 0x01
  a2:	80 83       	st	Z, r24
}
  a4:	0f 90       	pop	r0
  a6:	cf 91       	pop	r28
  a8:	df 91       	pop	r29
  aa:	08 95       	ret

000000ac <sendString>:

void sendString(char s[]) {
  ac:	df 93       	push	r29
  ae:	cf 93       	push	r28
  b0:	00 d0       	rcall	.+0      	; 0xb2 <sendString+0x6>
  b2:	00 d0       	rcall	.+0      	; 0xb4 <sendString+0x8>
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
  b8:	9c 83       	std	Y+4, r25	; 0x04
  ba:	8b 83       	std	Y+3, r24	; 0x03
	int i = 0;
  bc:	1a 82       	std	Y+2, r1	; 0x02
  be:	19 82       	std	Y+1, r1	; 0x01
  c0:	19 c0       	rjmp	.+50     	; 0xf4 <sendString+0x48>

	while(i < 64)
	{ // don't get stuck if it is a bad string
		if( s[i] == '\0' ) break; // quit on string terminator
  c2:	29 81       	ldd	r18, Y+1	; 0x01
  c4:	3a 81       	ldd	r19, Y+2	; 0x02
  c6:	8b 81       	ldd	r24, Y+3	; 0x03
  c8:	9c 81       	ldd	r25, Y+4	; 0x04
  ca:	fc 01       	movw	r30, r24
  cc:	e2 0f       	add	r30, r18
  ce:	f3 1f       	adc	r31, r19
  d0:	80 81       	ld	r24, Z
  d2:	88 23       	and	r24, r24
  d4:	a1 f0       	breq	.+40     	; 0xfe <sendString+0x52>
		USART_SendChar(s[i++]);
  d6:	29 81       	ldd	r18, Y+1	; 0x01
  d8:	3a 81       	ldd	r19, Y+2	; 0x02
  da:	8b 81       	ldd	r24, Y+3	; 0x03
  dc:	9c 81       	ldd	r25, Y+4	; 0x04
  de:	fc 01       	movw	r30, r24
  e0:	e2 0f       	add	r30, r18
  e2:	f3 1f       	adc	r31, r19
  e4:	20 81       	ld	r18, Z
  e6:	89 81       	ldd	r24, Y+1	; 0x01
  e8:	9a 81       	ldd	r25, Y+2	; 0x02
  ea:	01 96       	adiw	r24, 0x01	; 1
  ec:	9a 83       	std	Y+2, r25	; 0x02
  ee:	89 83       	std	Y+1, r24	; 0x01
  f0:	82 2f       	mov	r24, r18
  f2:	c5 df       	rcall	.-118    	; 0x7e <USART_SendChar>
}

void sendString(char s[]) {
	int i = 0;

	while(i < 64)
  f4:	89 81       	ldd	r24, Y+1	; 0x01
  f6:	9a 81       	ldd	r25, Y+2	; 0x02
  f8:	80 34       	cpi	r24, 0x40	; 64
  fa:	91 05       	cpc	r25, r1
  fc:	14 f3       	brlt	.-60     	; 0xc2 <sendString+0x16>
	{ // don't get stuck if it is a bad string
		if( s[i] == '\0' ) break; // quit on string terminator
		USART_SendChar(s[i++]);
	}
}
  fe:	0f 90       	pop	r0
 100:	0f 90       	pop	r0
 102:	0f 90       	pop	r0
 104:	0f 90       	pop	r0
 106:	cf 91       	pop	r28
 108:	df 91       	pop	r29
 10a:	08 95       	ret

0000010c <main>:

int main(void)
{
 10c:	df 93       	push	r29
 10e:	cf 93       	push	r28
 110:	cd b7       	in	r28, 0x3d	; 61
 112:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0xFF;
 114:	e7 e3       	ldi	r30, 0x37	; 55
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	80 83       	st	Z, r24
	// Initialise USART
	USART_vInit();
 11c:	9a df       	rcall	.-204    	; 0x52 <USART_vInit>

	while(1)
	{
		// Send string
		sendString ("Hello World\n\r");
 11e:	80 e6       	ldi	r24, 0x60	; 96
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	c4 df       	rcall	.-120    	; 0xac <sendString>
		sendString ("How are you?\n\r");
 124:	8e e6       	ldi	r24, 0x6E	; 110
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	c1 df       	rcall	.-126    	; 0xac <sendString>
 12a:	f9 cf       	rjmp	.-14     	; 0x11e <main+0x12>

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
